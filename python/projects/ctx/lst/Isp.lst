C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE ISP
OBJECT MODULE PLACED IN .\output\Isp.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Isp.c OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND CODE PRINT(.\lst\Isp.lst) OB
                    -JECT(.\output\Isp.obj)

stmt level    source

   1          //*****************************************************************************************************//
   2          //         (C) Copyright 2007, Alcor Micro, Corp.                                                      //
   3          //                 ALL RIGHTS RESERVED                                                                 //
   4          //              Alcor Micro CONFIDENTIAL                                                               //
   5          //*****************************************************************************************************//
   6          // Project    : CK
   7          // Module     : isp
   8          // File name  : isp.c
   9          // Author     : MushLin
  10          // Description: isp
  11          //              In this c file, we put functions that ISP can use.
  12          //
  13          // Environment: Kernel Mode
  14          //
  15          // Date        Rev    By     Description
  16          //========================================================================================================
  17          //
  18          // 03/25/2008  0.01  MushLin 1. Create.
  19          //
  20          //========================================================================================================
  21          /************************************************************************|
  22          |                  A L C O R   M I C R O,  C O R P.                      |
  23          |                                                                        |
  24          |         This source code is classified as confidential and             |
  25          |         contains trade secrets owned by Alcor Micro, Corp.             |
  26          |                                                                        |
  27          |                         (C)Copyright 2007, 2008                        |
  28          |                         Alcor Micro, Corp.                             |
  29          |                        All rights reserved.                            |
  30          |************************************************************************/
  31          
  32          #ifndef __isp_c__
  33          #define __isp_c__
  34          
  35          #include "isp.h"
  36          #include "regmap.h"
  37          #include "globaldef.h"
  38          #include "globalvar.h"
  39          #include "regmap.h"
  40          #include "SettingDef.h"
  41          #include "usbif.h"
  42          #include "SettingDef.h"
  43          #include "setintf.h"
  44          
  45          void IspSetPropertyBrightness(void) // range : -255~255
  46          {
  47   1          if (n16Brightness > 0) {
  48   2              Reg[REG_ISP_BRIGHTNESSSIGN] = 0;
  49   2              Reg[REG_ISP_BRIGHTNESS]  = (BYTE)(n16Brightness);
  50   2          } else {
  51   2              Reg[REG_ISP_BRIGHTNESSSIGN] = 2;
  52   2              Reg[REG_ISP_BRIGHTNESS]  = (BYTE)(-n16Brightness);
  53   2          }
  54   1        
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 2   

  55   1      }
  56          void IspSetPropertyContrast(void)  // range : 0~30
  57          {
  58   1          if (wContrast>15) {
  59   2              Reg[REG_ISP_CONTRAST] = (BYTE)(wContrast - 15);
  60   2          } else {
  61   2              Reg[REG_ISP_CONTRAST] = (BYTE)(15 - wContrast);
  62   2              Reg[REG_ISP_CONTRAST] |= 0x80;
  63   2          }
  64   1      
  65   1      }
  66          
  67          void IspSetPropertyHue(void) // range : -180~180
  68          {
  69   1              if(n16Hue == 0){
  70   2                      // Patch hardware HUE issue
  71   2                      Reg[REG_ISP_COLORCORCTRL] &= (~HUEEN);
  72   2              }else{
  73   2          Reg[REG_ISP_COLORCORCTRL] |= HUEEN;
  74   2         (*((INT8*)(&Reg[REG_ISP_UUHUE]))) = IspGetCos(n16Hue/100);   
  75   2          (*((INT8*)(&Reg[REG_ISP_UVHUE]))) = (-IspGetSin(n16Hue/100));
  76   2      
  77   2          (*((INT8*)(&Reg[REG_ISP_VUHUE]))) =  (-(*((INT8*)(&Reg[REG_ISP_UVHUE]))));
  78   2          (*((INT8*)(&Reg[REG_ISP_VVHUE]))) =    (*((INT8*)(&Reg[REG_ISP_UUHUE])));
  79   2              }
  80   1      }
  81          void IspSetPropertySaturation(void) // range : 0~ 127
  82          {
  83   1          Reg[REG_ISP_SATURATION] = (BYTE)(wSaturation&0x7f);
  84   1      }
  85          /*void IspSetPropertySharpness(void)  // range : 0~60
  86          {
  87              Reg[REG_ISP_POSEDGE] = (BYTE)(wSharpness);
  88              Reg[REG_ISP_NEGEDGE] = (BYTE)(wSharpness>>1);
  89          }*/
  90          void IspSetPropertyGamma(void) // range 20~240
  91          {
  92   1          BYTE data i;
  93   1          WORD data wTabOffset;
  94   1          WORD data wTemp;
  95   1          
  96   1          Reg[REG_ISP_GAMMACTRL] |= YGammaEn;
  97   1          // path_GammaTable table use an 24*17 array
  98   1          SetPtrTabEx(path_GammaTable);
  99   1          
 100   1          wTabOffset = ((wGamma/10-2)*17) ;
 101   1          
 102   1          for ( i=0;i<17;i++) {
 103   2              //if (ExGamma==NULL)
 104   2              //    wTemp = GetTab(wTabOffset+i);
 105   2              //else
 106   2                  wTemp = ((GetTab(wTabOffset+i) * bExGamma[i])>>7);
 107   2              
 108   2              
 109   2              if (i>0) {
 110   3                  if (wTemp < (Reg[REG_ISP_GAMMA+i-1]))
 111   3                      wTemp = (Reg[REG_ISP_GAMMA+i-1]);
 112   3                  else if (wTemp>0xFF)
 113   3                      wTemp = 0xFF;
 114   3              }
 115   2              
 116   2              Reg[REG_ISP_GAMMA+i] = wTemp;
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 3   

 117   2              
 118   2          }
 119   1          
 120   1      }
 121          
 122          INT8 code sin[91] = {
 123          0,  2,  4,  7,  9, 11, 13, 16, 18, 20, 22, 
 124          24, 27, 29, 31, 33, 35, 37, 40, 42, 44, 
 125          46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 
 126          66, 68, 70, 72, 73, 75, 77, 79, 81, 82, 
 127          84, 86, 87, 89, 91, 92, 94, 95, 97, 98, 
 128          99,101,102,104,105,106,107,109,110,111, 
 129          112,113,114,115,116,117,118,119,119,120, 
 130          121,122,122,123,124,124,125,125,126,126, 
 131          126,127,127,127,127,127,127,127,127,127 };
 132          INT8 IspGetSin (INT16 Int16Theta) //theta : -180~180
 133          {
 134   1          if (Int16Theta<=(-90))
 135   1          {
 136   2              Int16Theta = (180+Int16Theta);
 137   2              return -sin[Int16Theta];
 138   2          }
 139   1          else
 140   1          if (Int16Theta<=(0))
 141   1          {
 142   2              Int16Theta = (-Int16Theta);
 143   2              return -sin[Int16Theta];
 144   2          }
 145   1          else
 146   1          if (Int16Theta<=(90))
 147   1          {
 148   2              Int16Theta = (Int16Theta);
 149   2              return sin[Int16Theta];
 150   2          }
 151   1          else
 152   1          if (Int16Theta<=(180))
 153   1          {
 154   2              Int16Theta = (180-Int16Theta);
 155   2              return sin[Int16Theta];
 156   2          }
 157   1      
 158   1          return 0;
 159   1      }
 160          INT8 IspGetCos (INT16 Int16Theta) //theta : -180~180
 161          {
 162   1      
 163   1          if (Int16Theta<=(-90)) 
 164   1          {
 165   2              Int16Theta = (-90-Int16Theta);
 166   2              return -sin[Int16Theta];
 167   2          } 
 168   1          else
 169   1          if (Int16Theta<=(0)) {
 170   2              Int16Theta = (90+Int16Theta);
 171   2              return sin[Int16Theta];
 172   2          }
 173   1          else
 174   1          if (Int16Theta<=(90)) 
 175   1          {
 176   2              Int16Theta = (90-Int16Theta);
 177   2              return  sin[Int16Theta];
 178   2          }
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 4   

 179   1          else
 180   1          if (Int16Theta<=(180))
 181   1          {
 182   2              Int16Theta = (Int16Theta-90);
 183   2              return -sin[Int16Theta];
 184   2          }
 185   1          
 186   1          return 0;
 187   1      }
 188          /*
 189          INT16 IspGetInterpolate(FN_ISPGETINTERPOLATE * pData)//(BYTE PosX,BYTE BoundaryL,BYTE BoundaryR,INT16 Valu
             -eL,INT16 ValueR)
 190          {
 191          
 192              INT32 data valtmp;
 193              INT16 data ratiotmp;
 194              
 195              ratiotmp = (INT16)(pData->PosX - pData->BoundaryL)*128;
 196              ratiotmp /= (INT16)(pData->BoundaryL - pData->BoundaryR);
 197              valtmp = pData->ValueL + (((pData->ValueL - pData->ValueR)*ratiotmp )>>7);
 198              valtmp = CLIP(valtmp,-32768,32767);
 199              return ((INT16)valtmp);
 200          
 201          }
 202          
 203          BYTE IspGetDataSum(WORD wMask)//(WORD * wImgSum, WORD * wCenterSum)
 204          {
 205          
 206              BYTE data bCounter;
 207              BYTE data bValid;
 208              WORD data wDataSum;
 209          
 210              bValid=0;
 211              wDataSum = 0;
 212              for (bCounter=0 ; bCounter<48 ; bCounter+=3) {
 213                  if (wMask&0x0001) {
 214                      wDataSum+=(Reg[REG_ISP_DATASUMWINDOW+bCounter]+(Reg[REG_ISP_DATASUMWINDOW+bCounter+1]<<1)+Reg[
             -REG_ISP_DATASUMWINDOW+bCounter+2]);
 215                      bValid++;
 216                  }
 217                  (wMask>>=1);
 218              }
 219              
 220              wDataSum/=bValid;
 221              wDataSum>>=2;
 222          
 223              return ((BYTE)wDataSum);
 224          
 225          }
 226          
 227          BYTE IspGetCT(FN_ISPGETCT * pData)//(BYTE bCurAWB,BYTE bBase,BYTE bLowLimit,BYTE bUpLimit)
 228          {
 229              WORD data wCnt,wOCnt;
 230              BYTE data bLux;
 231              BYTE data i,bLCT,bHCT;
 232              WORD data wTemp;
 233              BYTE data bRData,bGData,bBData;
 234              
 235              bHCT = 0xFF;
 236              bLCT = 0x00;
 237              wCnt = 0x8000;
 238              wOCnt= 0x0000;
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 5   

 239              
 240              for (i=0;i<48;i+=3) {
 241                  bRData = Reg[REG_ISP_AWBWINDOW+i];
 242                  bGData = Reg[REG_ISP_AWBWINDOW+i+1];
 243                  bBData = Reg[REG_ISP_AWBWINDOW+i+2];
 244                  
 245                  if ((bRData==0)||(bGData==0)||(bBData==0))
 246                      continue;
 247                  if ( 
 248                      ((Reg[REG_ISP_DATASUMWINDOW+i+1]>>2) > bGData) ||
 249                      ((Reg[REG_ISP_DATASUMWINDOW+i]>Reg[REG_ISP_AWBWINDOW+i+2])&&(bRData<bBData)) ||
 250                      ((Reg[REG_ISP_DATASUMWINDOW+i]<Reg[REG_ISP_AWBWINDOW+i+2])&&(bRData>bBData)) 
 251                     )
 252                      continue;
 253                  
 254                  wTemp = ((bRData+(bGData<<1)+bBData)>>2);
 255                  if ((wTemp<(pData->bLuxLowLimit)) || (wTemp>(pData->bLuxHighLimit)))
 256                      continue;
 257                  bLux = wTemp;
 258                  
 259                  wTemp = ( ((WORD)(bBData*(pData->bBase) ))/bRData);
 260                  if ((wTemp<(pData->bCTLowLimit)) || (wTemp>(pData->bCTHighLimit)))
 261                      continue;
 262                  //wTemp = CLIP(wTemp,0x01,0xff);
 263                  
 264                  
 265                  if (wTemp<(pData->bCurCT-pData->bCTStableRange)) {
 266                      wCnt-=bLux;
 267                      bLCT = MAX2(bLCT,wTemp);
 268                  } else if (wTemp>(pData->bCurCT+pData->bCTStableRange)) {
 269                      wCnt+=bLux;
 270                      bHCT = MIN2(bHCT,wTemp);
 271                  } else {
 272                      wOCnt+=bLux;
 273                      wAWBRSum += bRData;
 274                      wAWBGSum += bGData;
 275                      wAWBBSum += bBData;
 276                  }
 277              }
 278                  
 279              if ((wCnt+wOCnt)<0x8000) {
 280                  if (bLCT<(pData->bCurCT>>1)) {
 281                      wTemp = pData->bCurCT + bLCT;
 282                      pData->bCurCT = (wTemp>>1);
 283              } else {
 284                      wTemp = (pData->bCurCT*3)+ bLCT;
 285                      pData->bCurCT = (wTemp>>2);
 286                  }
 287              } else if ((wCnt-wOCnt)>0x8000) {
 288                  if (bHCT>(pData->bCurCT<<1)) {
 289                      wTemp = pData->bCurCT + bHCT + 1 ;
 290                      pData->bCurCT = (wTemp>>1);
 291                  } else {
 292                      wTemp = (pData->bCurCT*3) + bHCT + 3 ;
 293                      pData->bCurCT = (wTemp>>2);
 294              }
 295              }
 296              return pData->bCurCT;
 297          
 298          }
 299          
 300          
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 6   

 301          void IspMMult_3x3(FN_MMULT3X3 * pData)//(INT16* mtx1,INT16* mtx2,INT16* mtxresult)
 302          {
 303               BYTE data i;
 304               BYTE data j;
 305               INT32 data Int32Temp;
 306          
 307              for(i=0;i<9;i+=3) {
 308                  for (j=0;j<3;j++) {
 309                      Int32Temp = ((INT32)((pData->mtx1)[i]*(pData->mtx2)[j])+(INT32)((pData->mtx1)[i+1]*(pData->mtx
             -2)[j+3])+(INT32)((pData->mtx1)[i+2]*(pData->mtx2)[j+6]));
 310                      (pData->mtxresult)[i+j] = (Int32Temp>>6);
 311                  }
 312              }
 313          }
 314          
 315          void IspAutoContrast(FN_ISPAUTOCONTRAST * pData)
 316          {
 317              BYTE data i;
 318              WORD data Block[6]={0,0,0,0,0,0};
 319              BYTE data bNone;
 320              BYTE idata Gain1,Gain2,Gain3;
 321              FN_ISPGETINTERPOLATE idata Da_interpolate;
 322              
 323              for (i=0;i<16;i++) {
 324                  if ( i< (pData->A1>>1) ) 
 325                  {
 326                      Block[0]+=Reg[REG_ISP_HISTOGRAM+i];
 327                  } 
 328                  else if ( i< (pData->A1) ) 
 329                  {
 330                      Block[1]+=Reg[REG_ISP_HISTOGRAM+i];
 331                  }
 332                  else if ( i< ((pData->A1+pData->A2)>>1) ) 
 333                  {
 334                      Block[2]+=Reg[REG_ISP_HISTOGRAM+i];
 335                  } 
 336                  else if ( i< (pData->A2) )
 337                  {
 338                      Block[3]+=Reg[REG_ISP_HISTOGRAM+i];
 339                  } 
 340                  else if ( i< ((pData->A2+16)>>1) )
 341                  {
 342                      Block[4]+=Reg[REG_ISP_HISTOGRAM+i];
 343                  } 
 344                  else 
 345                  {
 346                      Block[5]+=Reg[REG_ISP_HISTOGRAM+i];
 347                  }
 348              }
 349              
 350              bNone=0;
 351              i=0;
 352              while( !(Reg[REG_ISP_HISTOGRAM+i]) ) {
 353                  bNone++;
 354                  i++;
 355              }
 356              
 357              Gain1 = Gain2 = Gain3= 0x80;
 358              if (Block[0]>Block[1])
 359                  Gain1 = 0x80 + ((Block[0]-Block[1])*(pData->PosG1))/Block[0];
 360              else if ( (Block[0]<Block[1]) && bNone)
 361                  Gain1 = 0x80 - ((Block[1]-Block[0])*(pData->NegG1))/Block[1];
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 7   

 362              
 363              if ( Block[2]>Block[3] )
 364                  Gain2 = 0x80 + ((Block[2]-Block[3])*(pData->PosG2))/Block[2];
 365              else if ( Block[2]<Block[3] )
 366                  Gain2 = 0x80 - ((Block[3]-Block[2])*(pData->NegG2))/Block[3];
 367              
 368              bNone=0;
 369              i=15;
 370              while( !(Reg[REG_ISP_HISTOGRAM+i]) ) {
 371                  bNone++;
 372                  i--;
 373              }
 374              if ((Block[4]>Block[5])&& (bNone>1))
 375                  Gain3 = 0x80 + ((Block[4]-Block[5])*(pData->PosG3))/Block[4];
 376              else if (Block[4]<Block[5]) 
 377                  Gain3 = 0x80 - ((Block[5]-Block[4])*(pData->NegG3))/Block[5];
 378              
 379              for (i=0;i<=16;i++) {
 380                  if ( i< (pData->A1>>1) ) 
 381                  {
 382                      Da_interpolate.BoundaryL = 0;
 383                          Da_interpolate.BoundaryR = (pData->A1>>1);
 384                          Da_interpolate.ValueL    = 0x80;
 385                          Da_interpolate.ValueR    = Gain1;
 386                  } 
 387                  else if ( i< (pData->A1) ) 
 388                  {
 389                      Da_interpolate.BoundaryL = (pData->A1>>1);
 390                          Da_interpolate.BoundaryR = (pData->A1);
 391                          Da_interpolate.ValueL    = Gain1;
 392                          Da_interpolate.ValueR    = 0x80;
 393                  }
 394                  else if ( i< ((pData->A1+pData->A2)>>1) ) 
 395                  {
 396                      Da_interpolate.BoundaryL = (pData->A1);
 397                          Da_interpolate.BoundaryR = ((pData->A1+pData->A2)>>1);
 398                          Da_interpolate.ValueL    = 0x80;
 399                          Da_interpolate.ValueR    = Gain2;
 400                  } 
 401                  else if ( i< (pData->A2) )
 402                  {
 403                      Da_interpolate.BoundaryL = ((pData->A1+pData->A2)>>1);
 404                          Da_interpolate.BoundaryR = (pData->A2);
 405                          Da_interpolate.ValueL    = Gain2;
 406                          Da_interpolate.ValueR    = 0x80;
 407                  } 
 408                  else if ( i< ((pData->A2+16)>>1) )
 409                  {
 410                      Da_interpolate.BoundaryL = (pData->A2);
 411                          Da_interpolate.BoundaryR = ((pData->A2+16)>>1);
 412                          Da_interpolate.ValueL    = 0x80;
 413                          Da_interpolate.ValueR    = Gain3;
 414                  } 
 415                  else 
 416                  {
 417                      Da_interpolate.BoundaryL = ((pData->A2+16)>>1);
 418                          Da_interpolate.BoundaryR = 16;
 419                          Da_interpolate.ValueL    = Gain3;
 420                          Da_interpolate.ValueR    = 0x80;
 421                  }
 422                  Da_interpolate.PosX = i;
 423                  //(pData->gammaout)[i] = IspGetInterpolate(&Da_interpolate);
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 8   

 424                  bExGamma[i] = IspGetInterpolate(&Da_interpolate);
 425              }
 426          }
 427          */
 428          #endif //#ifndef __isp_c__
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 9   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION IspSetPropertyBrightness (BEGIN)
                                           ; SOURCE LINE # 45
                                           ; SOURCE LINE # 46
                                           ; SOURCE LINE # 47
0000 D3                SETB    C
0001 900000      E     MOV     DPTR,#n16Brightness+01H
0004 E0                MOVX    A,@DPTR
0005 9400              SUBB    A,#00H
0007 900000      E     MOV     DPTR,#n16Brightness
000A E0                MOVX    A,@DPTR
000B 6480              XRL     A,#080H
000D 9480              SUBB    A,#080H
000F 9002B0            MOV     DPTR,#02B0H
0012 4008              JC      ?C0001
                                           ; SOURCE LINE # 48
0014 E4                CLR     A
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 49
0016 900000      E     MOV     DPTR,#n16Brightness+01H
0019 E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 50
001A 8009              SJMP    ?C0036
001C         ?C0001:
                                           ; SOURCE LINE # 51
001C 7402              MOV     A,#02H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 52
001F 900000      E     MOV     DPTR,#n16Brightness+01H
0022 E0                MOVX    A,@DPTR
0023 F4                CPL     A
0024 04                INC     A
0025         ?C0036:
0025 9002B1            MOV     DPTR,#02B1H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 53
                                           ; SOURCE LINE # 55
0029         ?C0003:
0029 22                RET     
             ; FUNCTION IspSetPropertyBrightness (END)

             ; FUNCTION IspSetPropertyContrast (BEGIN)
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 58
0000 D3                SETB    C
0001 900000      E     MOV     DPTR,#wContrast+01H
0004 E0                MOVX    A,@DPTR
0005 940F              SUBB    A,#0FH
0007 900000      E     MOV     DPTR,#wContrast
000A E0                MOVX    A,@DPTR
000B 9400              SUBB    A,#00H
000D 4009              JC      ?C0004
                                           ; SOURCE LINE # 59
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
0011 24F1              ADD     A,#0F1H
0013 9002B2            MOV     DPTR,#02B2H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 60
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 10  

0017 22                RET     
0018         ?C0004:
                                           ; SOURCE LINE # 61
0018 900000      E     MOV     DPTR,#wContrast+01H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D C3                CLR     C
001E 740F              MOV     A,#0FH
0020 9F                SUBB    A,R7
0021 9002B2            MOV     DPTR,#02B2H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 62
0025 E0                MOVX    A,@DPTR
0026 4480              ORL     A,#080H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
                                           ; SOURCE LINE # 65
0029         ?C0006:
0029 22                RET     
             ; FUNCTION IspSetPropertyContrast (END)

             ; FUNCTION IspSetPropertyHue (BEGIN)
                                           ; SOURCE LINE # 67
                                           ; SOURCE LINE # 68
                                           ; SOURCE LINE # 69
0000 900000      E     MOV     DPTR,#n16Hue
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 4E                ORL     A,R6
0009 9002A0            MOV     DPTR,#02A0H
000C 7005              JNZ     ?C0007
                                           ; SOURCE LINE # 71
000E E0                MOVX    A,@DPTR
000F 54FB              ANL     A,#0FBH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 72
0012 22                RET     
0013         ?C0007:
                                           ; SOURCE LINE # 73
0013 E0                MOVX    A,@DPTR
0014 4404              ORL     A,#04H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 74
0017 7C00              MOV     R4,#00H
0019 7D64              MOV     R5,#064H
001B 120000      E     LCALL   ?C?SIDIV
001E 120000      R     LCALL   _IspGetCos
0021 9002AB            MOV     DPTR,#02ABH
0024 EF                MOV     A,R7
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
0026 900000      E     MOV     DPTR,#n16Hue
0029 E0                MOVX    A,@DPTR
002A FE                MOV     R6,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 7C00              MOV     R4,#00H
0030 7D64              MOV     R5,#064H
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 11  

0032 120000      E     LCALL   ?C?SIDIV
0035 120000      R     LCALL   _IspGetSin
0038 EF                MOV     A,R7
0039 F4                CPL     A
003A 04                INC     A
003B 9002AC            MOV     DPTR,#02ACH
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
003F E0                MOVX    A,@DPTR
0040 F4                CPL     A
0041 04                INC     A
0042 A3                INC     DPTR
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 78
0044 9002AB            MOV     DPTR,#02ABH
0047 E0                MOVX    A,@DPTR
0048 9002AE            MOV     DPTR,#02AEH
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 80
004C         ?C0009:
004C 22                RET     
             ; FUNCTION IspSetPropertyHue (END)

             ; FUNCTION IspSetPropertySaturation (BEGIN)
                                           ; SOURCE LINE # 81
                                           ; SOURCE LINE # 82
                                           ; SOURCE LINE # 83
0000 900000      E     MOV     DPTR,#wSaturation+01H
0003 E0                MOVX    A,@DPTR
0004 547F              ANL     A,#07FH
0006 9002B3            MOV     DPTR,#02B3H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 84
000A 22                RET     
             ; FUNCTION IspSetPropertySaturation (END)

             ; FUNCTION IspSetPropertyGamma (BEGIN)
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 96
0000 900230            MOV     DPTR,#0230H
0003 E0                MOVX    A,@DPTR
0004 4403              ORL     A,#03H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 98
0007 7F44              MOV     R7,#044H
0009 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 100
000C 900000      E     MOV     DPTR,#wGamma
000F E0                MOVX    A,@DPTR
0010 FE                MOV     R6,A
0011 A3                INC     DPTR
0012 E0                MOVX    A,@DPTR
0013 FF                MOV     R7,A
0014 7C00              MOV     R4,#00H
0016 7D0A              MOV     R5,#0AH
0018 120000      E     LCALL   ?C?UIDIV
001B EF                MOV     A,R7
001C 24FE              ADD     A,#0FEH
001E FF                MOV     R7,A
001F EE                MOV     A,R6
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 12  

0020 34FF              ADDC    A,#0FFH
0022 FE                MOV     R6,A
0023 7C00              MOV     R4,#00H
0025 7D11              MOV     R5,#011H
0027 120000      E     LCALL   ?C?IMUL
002A 8E00        R     MOV     wTabOffset,R6
002C 8F00        R     MOV     wTabOffset+01H,R7
                                           ; SOURCE LINE # 102
002E E4                CLR     A
002F F500        R     MOV     i,A
0031         ?C0011:
                                           ; SOURCE LINE # 106
0031 7E00              MOV     R6,#00H
0033 E500        R     MOV     A,wTabOffset+01H
0035 2500        R     ADD     A,i
0037 FF                MOV     R7,A
0038 EE                MOV     A,R6
0039 3500        R     ADDC    A,wTabOffset
003B FE                MOV     R6,A
003C 120000      E     LCALL   _GetTab
003F 7400        E     MOV     A,#LOW bExGamma
0041 2500        R     ADD     A,i
0043 F582              MOV     DPL,A
0045 E4                CLR     A
0046 3400        E     ADDC    A,#HIGH bExGamma
0048 F583              MOV     DPH,A
004A E0                MOVX    A,@DPTR
004B FE                MOV     R6,A
004C EF                MOV     A,R7
004D 8EF0              MOV     B,R6
004F A4                MUL     AB
0050 AEF0              MOV     R6,B
0052 7807              MOV     R0,#07H
0054         ?C0035:
0054 CE                XCH     A,R6
0055 A2E7              MOV     C,ACC.7
0057 13                RRC     A
0058 CE                XCH     A,R6
0059 13                RRC     A
005A D8F8              DJNZ    R0,?C0035
005C F500        R     MOV     wTemp+01H,A
005E 8E00        R     MOV     wTemp,R6
                                           ; SOURCE LINE # 109
0060 E500        R     MOV     A,i
0062 D3                SETB    C
0063 9400              SUBB    A,#00H
0065 403B              JC      ?C0014
                                           ; SOURCE LINE # 110
0067 7430              MOV     A,#030H
0069 2500        R     ADD     A,i
006B F582              MOV     DPL,A
006D E4                CLR     A
006E 3402              ADDC    A,#02H
0070 F583              MOV     DPH,A
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 C3                CLR     C
0075 E500        R     MOV     A,wTemp+01H
0077 9F                SUBB    A,R7
0078 E500        R     MOV     A,wTemp
007A 9400              SUBB    A,#00H
007C 5013              JNC     ?C0015
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 13  

                                           ; SOURCE LINE # 111
007E 7430              MOV     A,#030H
0080 2500        R     ADD     A,i
0082 F582              MOV     DPL,A
0084 E4                CLR     A
0085 3402              ADDC    A,#02H
0087 F583              MOV     DPH,A
0089 E0                MOVX    A,@DPTR
008A 750000      R     MOV     wTemp,#00H
008D F500        R     MOV     wTemp+01H,A
008F 8011              SJMP    ?C0014
0091         ?C0015:
                                           ; SOURCE LINE # 112
0091 D3                SETB    C
0092 E500        R     MOV     A,wTemp+01H
0094 94FF              SUBB    A,#0FFH
0096 E500        R     MOV     A,wTemp
0098 9400              SUBB    A,#00H
009A 4006              JC      ?C0014
                                           ; SOURCE LINE # 113
009C 750000      R     MOV     wTemp,#00H
009F 7500FF      R     MOV     wTemp+01H,#0FFH
                                           ; SOURCE LINE # 114
00A2         ?C0014:
                                           ; SOURCE LINE # 116
00A2 7431              MOV     A,#031H
00A4 2500        R     ADD     A,i
00A6 F582              MOV     DPL,A
00A8 E4                CLR     A
00A9 3402              ADDC    A,#02H
00AB F583              MOV     DPH,A
00AD E500        R     MOV     A,wTemp+01H
00AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
00B0 0500        R     INC     i
00B2 E500        R     MOV     A,i
00B4 C3                CLR     C
00B5 9411              SUBB    A,#011H
00B7 5003              JNC     $ + 5H
00B9 020000      R     LJMP    ?C0011
                                           ; SOURCE LINE # 120
00BC         ?C0018:
00BC 22                RET     
             ; FUNCTION IspSetPropertyGamma (END)

             ; FUNCTION _IspGetSin (BEGIN)
                                           ; SOURCE LINE # 132
;---- Variable 'Int16Theta' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 133
                                           ; SOURCE LINE # 134
0000 D3                SETB    C
0001 EF                MOV     A,R7
0002 94A6              SUBB    A,#0A6H
0004 EE                MOV     A,R6
0005 6480              XRL     A,#080H
0007 947F              SUBB    A,#07FH
0009 5005              JNC     ?C0019
                                           ; SOURCE LINE # 135
                                           ; SOURCE LINE # 136
000B EF                MOV     A,R7
000C 24B4              ADD     A,#0B4H
                                           ; SOURCE LINE # 137
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 14  

000E 800E              SJMP    ?C0037
                                           ; SOURCE LINE # 138
0010         ?C0019:
                                           ; SOURCE LINE # 140
0010 D3                SETB    C
0011 EF                MOV     A,R7
0012 9400              SUBB    A,#00H
0014 EE                MOV     A,R6
0015 6480              XRL     A,#080H
0017 9480              SUBB    A,#080H
0019 500D              JNC     ?C0022
                                           ; SOURCE LINE # 141
                                           ; SOURCE LINE # 142
001B C3                CLR     C
001C E4                CLR     A
001D 9F                SUBB    A,R7
001E         ?C0037:
001E FF                MOV     R7,A
                                           ; SOURCE LINE # 143
001F EF                MOV     A,R7
0020 900000      R     MOV     DPTR,#sin
0023 93                MOVC    A,@A+DPTR
0024 F4                CPL     A
0025 04                INC     A
0026 FF                MOV     R7,A
0027 22                RET     
                                           ; SOURCE LINE # 144
0028         ?C0022:
                                           ; SOURCE LINE # 146
0028 D3                SETB    C
0029 EF                MOV     A,R7
002A 945A              SUBB    A,#05AH
002C EE                MOV     A,R6
002D 6480              XRL     A,#080H
002F 9480              SUBB    A,#080H
0031 5002              JNC     ?C0024
                                           ; SOURCE LINE # 147
                                           ; SOURCE LINE # 148
                                           ; SOURCE LINE # 149
0033 8010              SJMP    ?C0038
                                           ; SOURCE LINE # 150
0035         ?C0024:
                                           ; SOURCE LINE # 152
0035 D3                SETB    C
0036 EF                MOV     A,R7
0037 94B4              SUBB    A,#0B4H
0039 EE                MOV     A,R6
003A 6480              XRL     A,#080H
003C 9480              SUBB    A,#080H
003E 500C              JNC     ?C0021
                                           ; SOURCE LINE # 153
                                           ; SOURCE LINE # 154
0040 C3                CLR     C
0041 74B4              MOV     A,#0B4H
0043 9F                SUBB    A,R7
0044 FF                MOV     R7,A
                                           ; SOURCE LINE # 155
0045         ?C0038:
0045 EF                MOV     A,R7
0046 900000      R     MOV     DPTR,#sin
0049 93                MOVC    A,@A+DPTR
004A FF                MOV     R7,A
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 15  

004B 22                RET     
                                           ; SOURCE LINE # 156
004C         ?C0021:
                                           ; SOURCE LINE # 158
004C 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 159
004E         ?C0020:
004E 22                RET     
             ; FUNCTION _IspGetSin (END)

             ; FUNCTION _IspGetCos (BEGIN)
                                           ; SOURCE LINE # 160
;---- Variable 'Int16Theta' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 163
0000 D3                SETB    C
0001 EF                MOV     A,R7
0002 94A6              SUBB    A,#0A6H
0004 EE                MOV     A,R6
0005 6480              XRL     A,#080H
0007 947F              SUBB    A,#07FH
0009 5006              JNC     ?C0027
                                           ; SOURCE LINE # 164
                                           ; SOURCE LINE # 165
000B C3                CLR     C
000C 74A6              MOV     A,#0A6H
000E 9F                SUBB    A,R7
                                           ; SOURCE LINE # 166
000F 8035              SJMP    ?C0039
                                           ; SOURCE LINE # 167
0011         ?C0027:
                                           ; SOURCE LINE # 169
0011 D3                SETB    C
0012 EF                MOV     A,R7
0013 9400              SUBB    A,#00H
0015 EE                MOV     A,R6
0016 6480              XRL     A,#080H
0018 9480              SUBB    A,#080H
001A 5005              JNC     ?C0030
                                           ; SOURCE LINE # 170
001C EF                MOV     A,R7
001D 245A              ADD     A,#05AH
                                           ; SOURCE LINE # 171
001F 800F              SJMP    ?C0040
                                           ; SOURCE LINE # 172
0021         ?C0030:
                                           ; SOURCE LINE # 174
0021 D3                SETB    C
0022 EF                MOV     A,R7
0023 945A              SUBB    A,#05AH
0025 EE                MOV     A,R6
0026 6480              XRL     A,#080H
0028 9480              SUBB    A,#080H
002A 500C              JNC     ?C0032
                                           ; SOURCE LINE # 175
                                           ; SOURCE LINE # 176
002C C3                CLR     C
002D 745A              MOV     A,#05AH
002F 9F                SUBB    A,R7
0030         ?C0040:
0030 FF                MOV     R7,A
                                           ; SOURCE LINE # 177
C51 COMPILER V7.06   ISP                                                                   07/22/2020 17:08:20 PAGE 16  

0031 EF                MOV     A,R7
0032 900000      R     MOV     DPTR,#sin
0035 93                MOVC    A,@A+DPTR
0036 FF                MOV     R7,A
0037 22                RET     
                                           ; SOURCE LINE # 178
0038         ?C0032:
                                           ; SOURCE LINE # 180
0038 D3                SETB    C
0039 EF                MOV     A,R7
003A 94B4              SUBB    A,#0B4H
003C EE                MOV     A,R6
003D 6480              XRL     A,#080H
003F 9480              SUBB    A,#080H
0041 500D              JNC     ?C0029
                                           ; SOURCE LINE # 181
                                           ; SOURCE LINE # 182
0043 74A6              MOV     A,#0A6H
0045 2F                ADD     A,R7
0046         ?C0039:
0046 FF                MOV     R7,A
                                           ; SOURCE LINE # 183
0047 EF                MOV     A,R7
0048 900000      R     MOV     DPTR,#sin
004B 93                MOVC    A,@A+DPTR
004C F4                CPL     A
004D 04                INC     A
004E FF                MOV     R7,A
004F 22                RET     
                                           ; SOURCE LINE # 184
0050         ?C0029:
                                           ; SOURCE LINE # 186
0050 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 187
0052         ?C0028:
0052 22                RET     
             ; FUNCTION _IspGetCos (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    523    ----
   CONSTANT SIZE    =     91    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
