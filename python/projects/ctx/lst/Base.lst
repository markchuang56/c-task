C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE BASE
OBJECT MODULE PLACED IN .\output\Base.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Base.c OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND CODE PRINT(.\lst\Base.lst) 
                    -OBJECT(.\output\Base.obj)

stmt level    source

   1          /************************************************************************|
   2          |                  A L C O R   M I C R O,  C O R P.                      |
   3          |                                                                        |
   4          |         This source code is classified as confidential and             |
   5          |         contains trade secrets owned by Alcor Micro, Corp.             |
   6          |                                                                        |
   7          |                         (C)Copyright 2008                              |
   8          |                         Alcor Micro, Corp.                             |
   9          |                        All rights reserved.                            |
  10          |************************************************************************/
  11          
  12          #ifndef __base_c__
  13          #define __base_c__
  14          
  15          #include "globaldef.h"
  16          #include "base.h"
  17          #include "InFirmDef.h"
  18          #include "regmap.h"
  19          #include "globalvar.h"
  20          #include "usbif.h"
  21          #include "xsensor.h"
  22          
  23          #include "SettingDef.h"
  24          #include "setintf.h"
  25          #include "util.h"
  26          #include "USBIST.h"
  27          #include "Dummy.h"
  28          #include "InTable.h"
  29          #include <string.h>
  30          
  31          // #define DISABLE_EEPROM
  32          #include "AudioDef.h"
  33          #include "AudioHandle.h"
  34          
  35          #define DebugPrpSaveFlash__
  36          #define DEBUG_CRC_CALCUL__
  37          
  38          void DeviceReset(void)
  39          {
  40   1              bRequestErrorCode = EC_NO_ERROR;
  41   1              // Remove property value save request
  42   1              RemovePrpSaveReq();
  43   1              if(bPrpSaveMethod == 0){
  44   2                  GetVCControlDef();
  45   2          }else{
  46   2              if(PrpLoadFromEEPROM() == FALSE){
  47   3                  GetVCControlDef();
  48   3              }
  49   2          }    
  50   1      
  51   1          // bFrameCount for temperary usage
  52   1          for(bFrameCount = 0;bFrameCount<17; bFrameCount++){
  53   2              bExGamma[bFrameCount] = 0x80;
  54   2          }
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 2   

  55   1              bFrameCount = 0;
  56   1              bSusPrivTrigCnt = 0;
  57   1              bVideoCtrlField = 0x00;
  58   1              bStillImgField = 0x00;
  59   1              SetPtrTabEx(path_SnapActive);
  60   1              if(GetTab(0x0) != 0x00){
  61   2                      xSnapActive = HIGH;
  62   2                      xBtnState   = LOW;
  63   2              }else{
  64   2                      xSnapActive = LOW;
  65   2                      xBtnState   = HIGH;
  66   2              }
  67   1              // Initial variables of Privacy control
  68   1              SetPtrTabEx(path_PrivacyActive);
  69   1              if(GetTab(0x0) != 0x00){
  70   2                      xPrivActive = HIGH;
  71   2                      xPrivBtnState = LOW;
  72   2              }else{
  73   2                      xPrivActive = LOW;
  74   2                      xPrivBtnState = HIGH;
  75   2              }
  76   1              xSupportPrivacy = FALSE;
  77   1              xPrivBtnToggle = FALSE;
  78   1              
  79   1              bFrameFlag = 0x00;
  80   1              bSetProperty1 = 0x00;
  81   1              bSetProperty2 = 0x00;
  82   1              bInt0State = 0;
  83   1              bRequestType = 0x00;
  84   1              bRequest = 0x00;
  85   1              wValue = wIndex = wLength = 0x0000;
  86   1              bDeviceStatus = 0x00;  // not self-powered, do not support remote wakeup
  87   1              bEndpoint1Status = 0x00;  // not halt
  88   1              bEndpoint5Status =0x00; //not halt
  89   1              bConfigValue = 0x00;
  90   1              bAltSetting = 0;
  91   1              bSucsTrigCnt = 0;
  92   1      //#ifndef DISABLE_SPI   
  93   1              xExtendTabMap = FALSE;  // Extended Table Mapping Mode disable
  94   1      //#endif        
  95   1              xAsyncTimeOut = FALSE;
  96   1              wCacheAddr = 0;
  97   1              bCacheLen = 0;
  98   1          bCtrlFlowState=0;
  99   1          bNextFlowState=0;
 100   1      
 101   1              xEnableScaleUp=FALSE;
 102   1              bClkForScaleUp=PCLK_BASE_12M;
 103   1          
 104   1              /* Eric add for Audio start*/   
 105   1                  bDMICAltSetting=0;
 106   1                  //DMICCurSetting.bSampFreq=0x08;
 107   1                  DMICCurSetting.bMuteCur_L=0;
 108   1                  DMICCurSetting.bMuteCur_R=0;
 109   1                  //DMICCurSetting.wVolumedB_L=0x0350;  //
 110   1                  //DMICCurSetting.wVolumedB_R=0x0350;
 111   1      
 112   1              //close buf, if to close clock , need to set to zero
 113   1                  WriteReg(REG_AUDIO_CTL, bDMICInput);        
 114   1              /* Eric add for Audio end*/
 115   1          
 116   1          // set event "Close", to make all related settings back.
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 3   

 117   1              SetNextEvent(Event_Close);
 118   1              
 119   1          // always enable EP2
 120   1          Reg[REG_END_P2_EN] = ACTIVE;
 121   1          // set input size to zero before stream openning
 122   1          Reg[REG_ISP_INSIZEWIDTHL]  = 0x00;
 123   1          Reg[REG_ISP_INSIZEWIDTHH]  = 0x00;
 124   1          Reg[REG_ISP_INSIZEHEIGHTL] = 0x00;
 125   1          Reg[REG_ISP_INSIZEHEIGHTH] = 0x00;
 126   1      
 127   1              bExGetLen = 0;
 128   1              bExWrIdx = 0;
 129   1              //Mask for Conf Desc bug,2009/06/11
 130   1              // This shouldn't be clear, because the conf desc should be the same after reset
 131   1              //xExResTable = FALSE;
 132   1              
 133   1      #ifndef DISABLE_BD_OPTION
                              GetBDOption();
              #endif
 136   1      
 137   1              xSavePrp = FALSE;
 138   1              xAsyncSavePrp = FALSE;
 139   1              bAsynPrpSaveCnt = 0;
 140   1              xGPIO5BtnTriger = FALSE;
 141   1      
 142   1          wDumpTrigger = 0;   
 143   1        
 144   1              // USB BIST status default value, 
 145   1              // Start command never called
 146   1              // Refer to Dell USB BIST Implemenation Guide
 147   1              // Ver 0.08, April 6, 2009
 148   1              wUSBISTStatus = UBIST_RC_NO_START;
 149   1              // Reset AE Priority Current Value
 150   1              // External firmware can modify the value, UVC spec assume the
 151   1              // default value of AE Priority is 0
 152   1              SetPtrTabEx(path_AETime);
 153   1              bAEMode=GetTab(1);
 154   1              bAEPriority = GetTab(2);
 155   1              //dwETAbs=((GetTabW(16)<<16)|GetTabW(18));
 156   1              HiWordOfDWord(dwETAbs)=GetTabW(16);
 157   1              LoWordOfDWord(dwETAbs)=GetTabW(18);
 158   1      }
 159          
 160          void FWInit(void)
 161          {
 162   1              WORD data i;  //__
 163   1              // clear xdata memory
 164   1              for (i=0x800; i<FUNCTION_BASE; i++) {
 165   2                      Reg[i]=0;
 166   2              }
 167   1              bSysModelField = 0x00;
 168   1              SysModelField2 = 0x0;
 169   1              bPrpSaveMethod = 0;
 170   1              wEEPROMSize = 0x0;
 171   1              xStillIssue=0;//xDumpStack = 0x0;
 172   1              
 173   1              //add for WatchDog function
 174   1              xWatchDogEnable=0x0;
 175   1              // Reset xFrameRateV2 flag
 176   1              //xFrameRateV2 = FALSE;
 177   1              // Caupture method 1
 178   1              bCaptureMethod1 = 0x0;
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 4   

 179   1              // check product protect GPIO status
 180   1              CheckProtection();
 181   1              pCustomizeDesc = 0x00;
 182   1      
 183   1              //__ for CRC8 check
 184   1              wCacheAddr = 0;
 185   1              bCacheLen = 0;
 186   1      
 187   1              //for OTP Set
 188   1      #ifdef OTPFUNENABLE     
 189   1              OTP_ROMEnable(FALSE);   //OTP used as ram in Init
 190   1      #endif
 191   1              //xOTPSettingExist=FALSE;  //do it in bSysModelField
 192   1      
 193   1              //used for new FW Structure
 194   1              xFWPartialLoad=FALSE;     
 195   1              bPartialSeg=SEG_COMMON;
 196   1              bInSegCount=0;
 197   1              bFWLoadState=FWS_NORM;
 198   1          bIICClock=I2C_CLK_100K;//I2C_CLK_400K; //default clk value
 199   1          bErrCountSEGFW=0;       //Initial Err count
 200   1      
 201   1              //if no external code, this must be NULL in initial
 202   1              bPrivacyCtrlGPIO = GPIO_NULL;
 203   1               bWriteProtectGPIO = GPIO_NULL;
 204   1            bSnapShotGPIO = GPIO_NULL;
 205   1      
 206   1              //for value change interrupt of Auto Exposture Time Abs   
 207   1              //default value is 30
 208   1              //VideoProbeCommitCtrls.CurFPS=i;//29; //30 frame rate  
 209   1      
 210   1              // For HID Touch Control
 211   1              xAfterUSBEnum=FALSE;
 212   1              xEnableHID=FALSE;
 213   1      
 214   1      
 215   1      }
 216          
 217          /*
 218          static BOOLEAN CheckEEPROMType()
 219          {
 220              BOOLEAN data bRet;   //__
 221          
 222              //dummy read for avoiding EEPROM read error
 223              I2CEEPROMReadData(0, 8, pbIICBuf);  
 224                  
 225              for(bRet=0; bRet<8; bRet++){
 226                  pbIICBuf[bRet] = 0xff;
 227              }
 228              // EEPROM_SAFE_MARGIN, to prevent EEPROM unexpected write operation in power down/up sequences
 229              bRet = I2CEEPROMReadData(EEPROM_SAFE_MARGIN, HEADER_INFOR_FIELD_SIZE, pbIICBuf);
 230              if(bRet== TRUE){
 231                  if((pbIICBuf[0] == SIGNATURE_MASK_1) && (pbIICBuf[1] == SIGNATURE_MASK_2) &&
 232                      (pbIICBuf[HEADER_INFOR_FIELD_SIZE-1]&0xF0) == 0x0){
 233                          return TRUE;
 234                  }else{
 235                      // debug purpose
 236                      pbXFWCode[0x0] = 0x1;
 237                      return FALSE;
 238                  }                
 239              }else{
 240                  // debug purpose
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 5   

 241                  pbXFWCode[0x0] = 0x2;
 242                  return FALSE;
 243              }
 244          }
 245          
 246          BYTE FWCheckEEPROM(void)
 247          {
 248              // Check EEPROM device ID
 249              CheckEEPROMI2CDevID();
 250              xSPIEnable = FALSE;
 251          #ifndef DISABLE_EEPROM    
 252              bEEPromKBits = 16;  // 4k, 8 byte/I2C
 253              if(CheckEEPROMType() == TRUE){
 254                  bEEPROMID = 0xA0;
 255                  return TRUE;
 256              }
 257              bEEPromKBits = 64;
 258              if(CheckEEPROMType() == TRUE){
 259                  return TRUE;
 260              }
 261              // Check SPI flash
 262          #endif    
 263          #ifndef DISABLE_SPI
 264              xSPIEnable = TRUE;
 265              bEEPromKBits = 0xff;
 266              // SPIRDID();
 267              if(CheckEEPROMType() == TRUE){
 268                   SPIRDID();     //for prp saving method
 269                  return TRUE;
 270              }
 271              bEEPromKBits = 128;           // indicate no external EEPROM/Flash
 272              xSPIEnable = FALSE;
 273          #endif // DISABLE_SPI    
 274                  return FALSE;
 275          }
 276          */
 277          #define FW_RETRY_CNT    (0x3)
 278          BYTE FWLoadXFirmware(void)
 279          {
 280   1              code BYTE DETECT_CAST[5][2] = {
 281   1                      {16, 0xA0},
 282   1                      {64, 0xA0},
 283   1                      {16, 0xA8},
 284   1                      {64, 0xA8},
 285   1                      {0xff,0xA0}};//for SPI flash
 286   1      
 287   1              BYTE    data DetectCase;
 288   1      
 289   1              bRequest = 0;  // for retry counter
 290   1              DetectCase = 0;
 291   1          
 292   1      FWLoadROMSTART:
 293   1          bEEPromKBits = DETECT_CAST[DetectCase][0];
 294   1              bEEPROMID = DETECT_CAST[DetectCase][1];
 295   1              if(DetectCase == 4){ 
 296   2                      bRequest++;  //retry
 297   2                      if(bRequest>FW_RETRY_CNT){
 298   3                              return FALSE;
 299   3                      }else{
 300   3                              DetectCase = 0;
 301   3                      }
 302   2              }else{
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 6   

 303   2                      DetectCase++;
 304   2              }
 305   1          
 306   1             // Check EEPROM I2C Device ID
 307   1              if(CheckEEPROMI2CDevID() == FALSE){
 308   2                  xSPIEnable = FALSE;
 309   2                      goto FWLoadROMSTART;
 310   2              }
 311   1              // Dummy Read
 312   1              I2CEEPROMReadData(0x05, 0x8, pbIICBuf);
 313   1      
 314   1            //===== Read CRC8 value in Safe Margin =====//    
 315   1            if(!I2CEEPROMReadData(0x3F, 1, pbIICBuf))
 316   1           {  goto FWLoadROMSTART;
 317   2           }  
 318   1           bRequestType=pbIICBuf[0]; //store headinfo crc value, temporally  
 319   1      
 320   1          //===== Enable CRC8 calculate =====//
 321   1           WriteReg(REG_CRC8LEN_L, HEADER_INFOR_FIELD_SIZE);  //head info length      
 322   1           WriteReg(REG_CRC8LEN_H, 0x00);
 323   1           WriteReg(REG_CRC8CTRL,EN_CRC8 );
 324   1      
 325   1           //===== Read Head Info =====//     
 326   1           if(!I2CEEPROMReadData(EEPROM_SAFE_MARGIN, HEADER_INFOR_FIELD_SIZE, pbIICBuf)){
 327   2                          goto FWLoadROMSTART;
 328   2              }
 329   1      
 330   1         // Check module head signature mark first
 331   1             if((pbIICBuf[0] == SIGNATURE_MASK_1) && (pbIICBuf[1] == SIGNATURE_MASK_2)){
 332   2                 bLwValue=pbIICBuf[22]&0xBF; //patch selective IIC clock, bLwValue is temporally ussed  
 333   2                 if(bEEPromKBits<=16){
 334   3                     if((bLwValue != 0x4)&&(bLwValue != 0x02)&&(bLwValue != 0x01)){
 335   4                         goto FWLoadROMSTART;
 336   4                     }
 337   3                 }else if(bEEPromKBits >= 64){
 338   3                     if((bLwValue != 0x8)&&(bLwValue != 0x10)&&(bLwValue != 0x20)
 339   3                         &&(bLwValue != 0x80)){
 340   4                         goto FWLoadROMSTART;
 341   4                     }
 342   3                 }
 343   2                 //===== Check Head info CRC8 value =====//
 344   2                  if(bRequestType !=0xFF)
 345   2                  {   //need check CRC8 value 
 346   3                      if(ReadReg(REG_CRC8DATAOUT)!=bRequestType)
 347   3                      {  
 348   4                       #ifdef DEBUG_CRC_CALCUL
                                  UARTString("HeadCRC");
                                  UARTByte2Hex(ReadReg(REG_CRC8DATAOUT));
                                  UARTByte2Hex(bRequestType);
                               #endif   
 353   4                      goto FWLoadROMSTART;
 354   4                      }
 355   3                  }  
 356   2         
 357   2             }else{
 358   2                  //Signature Failed
 359   2                 goto FWLoadROMSTART;
 360   2             }
 361   1      
 362   1      //--------------------------------------------------------------------
 363   1              //Address in EEPROM, from 0x0000
 364   1              PartialMemSet.ExSeg[0].wSegAddr=EEPROM_SAFE_MARGIN+HEADER_INFOR_FIELD_SIZE;     
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 7   

 365   1              PartialMemSet.ExSeg[0].wSegLen=pXDataW(&pbIICBuf[2]);
 366   1              PartialMemSet.ExSeg[1].wSegAddr=pXDataW(&pbIICBuf[4]);
 367   1              PartialMemSet.ExSeg[1].wSegLen=pXDataW(&pbIICBuf[6]);
 368   1              PartialMemSet.ExSeg[2].wSegAddr=pXDataW(&pbIICBuf[8]);
 369   1              PartialMemSet.ExSeg[2].wSegLen=pXDataW(&pbIICBuf[10]);
 370   1              PartialMemSet.ExSeg[3].wSegAddr=pXDataW(&pbIICBuf[12]);
 371   1              PartialMemSet.ExSeg[3].wSegLen=pXDataW(&pbIICBuf[14]);
 372   1      
 373   1          if(PartialMemSet.ExSeg[0].wSegLen==0xFFFF)
 374   1              PartialMemSet.ExSeg[0].wSegLen=0x0000;    
 375   1      
 376   1                //ID Map table addr in Upgrade Ram, from 0x0000
 377   1                wSetStartAddr=PartialMemSet.ExSeg[0].wSegLen;
 378   1                
 379   1                wIndex=pXDataW(&pbIICBuf[16]); //IDmap table addr in EEPROM, temporally stored in wIndex
 380   1                wValue=pXDataW(&pbIICBuf[18]); //offset table addr in EEPROM
 381   1      
 382   1                //offset table addr in Upgrade Ram    
 383   1                wIdxTabAddrOffset=wSetStartAddr+wValue-wIndex;
 384   1      
 385   1                wValue=pXDataW(&pbIICBuf[20]);//ID+Offset Table Len, temporally stored in wValue
 386   1      
 387   1               //Setting File Data start Addr in EEPROM       
 388   1                wSetFileDataAddr=wIndex+wValue;       
 389   1      
 390   1                  // Get EEPROM size
 391   1              //bit6 for EEPROM Clk selection=> 1:100k, 0:400k
 392   1              bIICClock=(pbIICBuf[22]&I2C100KSELECT)?(I2C_CLK_100K):(I2C_CLK_400K);
 393   1              pbIICBuf[22]=pbIICBuf[22]&0xBF;
 394   1              
 395   1                  if(pbIICBuf[22] < 0x80){
 396   2                      wEEPROMSize = pbIICBuf[22]*512;
 397   2              }else if(pbIICBuf[22] == 0x80){
 398   2                  wEEPROMSize = (64*1024 - 32);  // prevent overflow
 399   2              }
 400   1                  // Check external firmware state
 401   1                  if(pbIICBuf[23] & SETFILEEXIST){
 402   2                      xSetFileExist = TRUE;   // Set File exist, load IdMap, offset table from external rom
 403   2                  }else{
 404   2                      xSetFileExist = FALSE;
 405   2                  }
 406   1                  if(pbIICBuf[23] & EXFWEXIST){
 407   2                      xExFWExist = TRUE;
 408   2                  }else{
 409   2                      xExFWExist = FALSE; // there is no external firmware, load setting table from XRAM
 410   2                  }
 411   1              
 412   1                  bPrpSaveMethod = 0;
 413   1                      // Check Property Page saving method
 414   1                    if(pbIICBuf[23] & PROPERTY_WRITE_METHOD_1){
 415   2                          // Save propertypage before device suspend ,after timeout or interace alt 0
 416   2                          bPrpSaveMethod = PROPERTY_WRITE_METHOD_1;
 417   2                  }else if(pbIICBuf[23] & PROPERTY_WRITE_METHOD_2){
 418   2                      // Save propertypage before device suspend or after set inteface alt 0
 419   2                      bPrpSaveMethod = PROPERTY_WRITE_METHOD_2;
 420   2                  }
 421   1         
 422   1      #ifdef DEBUG_FW_LOAD       
                      UartString("LoadFW");
                      UartWord2Hex(wSetStartAddr);
                      UartWord2Hex(wIdxTabAddrOffset);
                      UartWord2Hex(wEEPROMSize);
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 8   

                      UartByte2Hex(xSetFileExist);
              #endif      
 429   1      
 430   1               //===== Load data from EEPROM to upgrade RAM space =====//
 431   1               // just load common segment and setting file table
 432   1               if(xExFWExist)
 433   1               {      if(!LoadToUpgradedRAM(PartialMemSet.ExSeg[0].wSegAddr,
 434   2                                                                   0,  //addr in upgraded RAM                                 
 435   2                                                                PartialMemSet.ExSeg[0].wSegLen)
 436   2                        )
 437   2                      {  //ExFW crc8 fail
 438   3                                      goto FWLoadROMSTART;
 439   3                      }
 440   2               }
 441   1                      //load Setting File Table
 442   1              if(xSetFileExist)
 443   1              {       if(xExFWExist==FALSE)
 444   2                      {       //load Setting after recognizing whether OTP FW exist or not
 445   3                              //UARTString("ExSet of no ExFW");
 446   3                              wIdxTabAddrOffset=wIdxTabAddrOffset-wSetStartAddr; //length of ID map table
 447   3                              //wSetStartAddr=PartialMemSet.ExSeg[0].wSegAddr;            //real addr of idmap table in EEPROM        
 448   3                              #ifdef OTPFUNENABLE
 449   3                                  return TRUE;    //to load setting after OTP FW 
 450   3                              #else
                                      //for AX
                                      //PartialMemSet.ExSeg[0].wSegLen=wSetStartAddr;
                                      wIdxTabAddrOffset=wSetStartAddr+wIdxTabAddrOffset;
                                      #endif
 455   3                      }
 456   2              
 457   2                      if(!LoadToUpgradedRAM(wIndex,           //ID Map Table Start Addr in EEPROM
 458   2                                                                wSetStartAddr,//PartialMemSet.ExSeg[0].wSegLen,
 459   2                                                                  wValue)             //ID +Offset Table Length
 460   2                         )
 461   2                      {  //Setting File Table CRC8 fail
 462   3                              goto FWLoadROMSTART;
 463   3                      }
 464   2              }
 465   1      
 466   1              //Descide shift Addr in Upgraded RAM,from 0x00 
 467   1              PartialMemSet.wPartialShiftAddr= PartialMemSet.ExSeg[0].wSegLen+wValue;
 468   1      
 469   1              return TRUE;
 470   1      }
 471          
 472          
 473          #ifdef OTPFUNENABLE
 474          
 475          void OTP_ROMEnable(BYTE bEnable)
 476          {       //descide OTP mode : R/W mode or ROM mode
 477   1          if(bEnable==TRUE)
 478   1          {   //ROM mode
 479   2              ClrRegBits(REG_OTP_CTRL,(DISEN_OTPCHIP|EN_OUTPUT));
 480   2              SetRegBits(REG_OTP_CTRL,EN_OTPROM);
 481   2          }else
 482   1          {   //Read/Write Mode
 483   2              ClrRegBits(REG_OTP_CTRL,EN_OTPROM);
 484   2              SetRegBits(REG_OTP_CTRL,(DISEN_OTPCHIP|EN_OUTPUT));
 485   2          }
 486   1              //Reg[REG_OTP_CTRL]=(Reg[REG_OTP_CTRL]&0xF8)|bEnable;
 487   1      }
 488          
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 9   

 489          void OTPROMAddrUpdate(WORD wAddr)  
 490          {
 491   1              static WORD xdata Addr; 
 492   1              Addr=wAddr;
 493   1              OTP_ROMEnable(FALSE);
 494   1              //Address: code start from this addr in OTP
 495   1              WriteReg(REG_OTP_ROMShitL, LoByteOfWord(Addr));
 496   1              WriteReg(REG_OTP_ROMShitH, HiByteOfWord(Addr));
 497   1              OTP_ROMEnable(TRUE);
 498   1      }
 499          
 500          BYTE LoadOTP_CRC8(WORD AddrStart,WORD Len,BYTE* pbData ,BOOLEAN xCRC_MIN1)
 501          {
 502   1               static WORD xdata Addr;        
 503   1               static WORD xdata length;
 504   1                Addr=AddrStart;               // address in OTP ROM
 505   1                length=Len;                   //length include CRC
 506   1      
 507   1              //===== Enable CRC8 calculate =====//
 508   1               WriteReg(REG_CRC8LEN_L, LoByteOfWord(length)); //head info length      
 509   1               WriteReg(REG_CRC8LEN_H, HiByteOfWord(length));         
 510   1      
 511   1          if(xCRC_MIN1==TRUE)
 512   1                  WriteReg(REG_CRC8CTRL,EN_CRC8|EN_CRC8MINLEN|EN_OTPCRC); //length include CRC
 513   1          else
 514   1              WriteReg(REG_CRC8CTRL,EN_CRC8|EN_CRC8MINLEN2|EN_OTPCRC); //length include CRC
 515   1      
 516   1          memcpy(pbData,&pCode(Addr),length); 
 517   1      
 518   1              ClrRegBits(REG_CRC8CTRL, (EN_OTPCRC|EN_CRC8MINLEN|EN_CRC8MINLEN2));
 519   1              
 520   1              //return CRC8 value
 521   1              return ReadReg(REG_CRC8DATAOUT);
 522   1      }
 523          
 524          BYTE CheckOTPIndex(void)
 525          {
 526   1              WORD data i;
 527   1      
 528   1              for(i=0;i<OTP_IndexLen;i++)
 529   1              {
 530   2                      if( pCode(OTP_IndexAddr+i)==0xFF)
 531   2                      {
 532   3                              break;
 533   3                      }
 534   2              }
 535   1              bOTPCodeIndex=i;   //0~12; 0:no info exist 
 536   1      
 537   1              if(bOTPCodeIndex==0)
 538   1              {       //no code or setting in OTP                             
 539   2                      if( pCode(OTP_IndexCRCAddr)==0xFF)      //CRC value don't be set
 540   2                              return TRUE;
 541   2                      else
 542   2                              return FALSE;
 543   2              }
 544   1      
 545   1              //check OTP Index crc
 546   1              if( pCode(OTP_IndexCRCAddr+bOTPCodeIndex-1) !=
 547   1              LoadOTP_CRC8(OTP_IndexAddr,OTP_IndexLen+1,pbIICBuf,TRUE) )
 548   1              {
 549   2                      #ifdef OTP_TEST_PRINT
                              UARTString("OTP Index CRC Failed");
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 10  

                              UARTByte2Hex(pCode(OTP_IndexCRCAddr+bOTPCodeIndex-1));
                              UARTByte2Hex(LoadOTP_CRC8(OTP_IndexAddr,OTP_IndexLen+1,pbIICBuf,TRUE) );
                              #endif
 554   2                      return FALSE; 
 555   2              }
 556   1      
 557   1              //check OTP Info crc
 558   1              i=OTP_InfoStartAddr+(OTP_InfoLen*(bOTPCodeIndex-1));
 559   1              if( pCode(i+OTP_InfoLen-1) !=
 560   1              LoadOTP_CRC8(i,OTP_InfoLen,pbIICBuf,TRUE) )
 561   1              {
 562   2                      #ifdef OTP_TEST_PRINT
                              UARTString("OTP Info CRC Failed");
                              #endif
 565   2              
 566   2                      return FALSE; 
 567   2              }       
 568   1      
 569   1         #ifdef OTP_TEST      
                      UARTString("FailCRC:");
                      UartByte2Hex(ReadReg(REG_CRC8DATAOUT));
                      UartByte2Hex(pbIICBuf[bOTPCodeIndex-1]);
                      UartWord2Hex(OTP_CRCAboveLen+bOTPCodeIndex);
                 #endif       
 575   1      
 576   1              return TRUE;
 577   1      }
 578          
 579          BYTE FWLoadOTP(void)
 580          {
 581   1              BYTE  xdata crc=0; 
 582   1              WORD xdata tmp1=0, tmp2=0; 
 583   1              WORD xdata length,length2;
 584   1              BOOLEAN xdata OTPCodeExit=TRUE;
 585   1      
 586   1              //Upgraded RAM is always be RAM in RUN Time
 587   1              OTPROMAddrUpdate(0x0000);  //OTP to be Code from 0x8000
 588   1      
 589   1              //===== Check OTP Index Head =====//
 590   1              length=0;
 591   1              while((length<3)&&(CheckOTPIndex()==FALSE))
 592   1              {       //load OTP fail         
 593   2                      length++;       
 594   2              }
 595   1      
 596   1              if(length>=3)
 597   1              {       //OTP load failed
 598   2                      #ifdef OTP_TEST_PRINT
                              UARTString("Check OTP Index Failed");
                              #endif
 601   2              
 602   2                      //use last available index
 603   2                      if(bOTPCodeIndex>1)
 604   2                      {       bOTPCodeIndex--;
 605   3                      
 606   3                              length=OTP_InfoStartAddr+(OTP_InfoLen*(bOTPCodeIndex-1));
 607   3                              if( pCode(length+OTP_InfoLen-1) !=
 608   3                              LoadOTP_CRC8(length,OTP_InfoLen,pbIICBuf,TRUE) )
 609   3                              {//check info again
 610   4                                      OTP_ROMEnable(FALSE);  //Transf OTP to be RAM
 611   4                                      return  FALSE;
 612   4                              }
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 11  

 613   3                      }else
 614   2                      {
 615   3                              OTP_ROMEnable(FALSE);  //Transf OTP to be RAM
 616   3                                      return  FALSE;
 617   3                      }               
 618   2              }
 619   1      
 620   1              if(bOTPCodeIndex==0)
 621   1              {       //no code or setting in OTP
 622   2                      
 623   2                      #ifdef OTP_TEST_PRINT
                              UARTString("no OTP exist");
                              #endif
 626   2                      OTP_ROMEnable(FALSE);  //Transf OTP to be RAM
 627   2                      return FALSE;
 628   2              }
 629   1              
 630   1      #ifdef OTP_TEST_PRINT           
                      UARTString("Index");
                      UARTByte2Hex(bOTPCodeIndex);
              #endif
 634   1      
 635   1      
 636   1      OTPCodeIndexSet:
 637   1      
 638   1              //Get OTP Info address
 639   1              tmp2=OTP_InfoStartAddr+(OTP_InfoLen*(bOTPCodeIndex-1));
 640   1      
 641   1              //===== Check Code =====//
 642   1              if(xExFWExist==FALSE) //no externl FW exist in EEPROM
 643   1              {       //read OTP Info
 644   2                      //addr in OTP
 645   2                      PartialMemSet.ExSeg[0].wSegAddr=pCodeW(tmp2);
 646   2      
 647   2                      if(PartialMemSet.ExSeg[0].wSegAddr !=0xFFFF )
 648   2                      {       //The OTP code exist    
 649   3                              PartialMemSet.ExSeg[0].wSegLen=pCodeW((tmp2+2));
 650   3                              PartialMemSet.ExSeg[1].wSegAddr=pCodeW((tmp2+4));
 651   3                              PartialMemSet.ExSeg[1].wSegLen=pCodeW((tmp2+6));
 652   3                              PartialMemSet.ExSeg[2].wSegAddr=pCodeW((tmp2+8));
 653   3                              PartialMemSet.ExSeg[2].wSegLen=pCodeW((tmp2+10));
 654   3                              PartialMemSet.ExSeg[3].wSegAddr=pCodeW((tmp2+12));
 655   3                              PartialMemSet.ExSeg[3].wSegLen=pCodeW((tmp2+14));
 656   3      
 657   3                              //check  Load OTP ExFW crc
 658   3                              length=0;
 659   3                              do{
 660   4                                      crc=LoadOTP_CRC8(PartialMemSet.ExSeg[0].wSegAddr+UPGRADE_RAM_START_ADDR,PartialMemSet.ExSeg[0].wSegLen
             -,
 661   4                                       pbXFWCode,FALSE);
 662   4      
 663   4                      if((crc != pbXFWCode[PartialMemSet.ExSeg[0].wSegLen-1])
 664   4                          ||(ReadReg(REG_CRC8DATAOUT_H)!= pbXFWCode[PartialMemSet.ExSeg[0].wSegLen-2])
 665   4                        )
 666   4                      {
 667   5                          crc=TRUE;
 668   5                      }else
 669   4                      {
 670   5                          crc=FALSE;
 671   5                      }
 672   4      
 673   4                                      length++;               
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 12  

 674   4                              }while((crc==TRUE)&& (length<4));       
 675   3      
 676   3                  tmp1=PartialMemSet.ExSeg[0].wSegLen; //store last address in Common Segment of Upgraded RAM
 677   3      
 678   3                              if(length>3)
 679   3                              {       //load OTP FW Failed
 680   4                                      if(bOTPCodeIndex > 1)
 681   4                                      {
 682   5                                              bOTPCodeIndex--;
 683   5                                              goto OTPCodeIndexSet;
 684   5                                      }
 685   4      
 686   4                                      OTPCodeExit=FALSE;
 687   4                                      tmp1=0; //store last address in Common Segment
 688   4      
 689   4                                      #ifdef OTP_TEST_PRINT           
                                              UARTString("Load OTP common failed");
                                              UARTByte2Hex(ReadReg(REG_CRC8DATAOUT));
                                              UARTByte2Hex( pbXFWCode[PartialMemSet.ExSeg[0].wSegLen-1]);
                                              #endif                          
 694   4                              }
 695   3      
 696   3                      }else
 697   2                      {
 698   3                              OTPCodeExit=FALSE;
 699   3                              tmp1=0;
 700   3                      }
 701   2                      
 702   2              }else
 703   1              {       OTPCodeExit=FALSE;
 704   2                      tmp1=PartialMemSet.ExSeg[0].wSegLen;  //variable from External FW
 705   2              }
 706   1      
 707   1              //Descide shift Addr in Upgraded RAM    
 708   1              PartialMemSet.wPartialShiftAddr=tmp1;
 709   1      
 710   1      
 711   1              //===== Check Setting File =====//
 712   1              if(xSetFileExist==FALSE) //no externl setting file exist
 713   1              {       
 714   2                      //ID Map table addr in Upgrade Ram, from 0x0000
 715   2                        wSetStartAddr=tmp1;  
 716   2                        
 717   2                        wIndex=pCodeW((tmp2+16));; //IDmap table addr in OTP, temporally stored in wIndex
 718   2                        wValue=pCodeW((tmp2+20)); //offset table addr in OTP, temporally stored in wValue
 719   2      
 720   2                        if(wIndex!=0xFFFF) //OTP have setting file
 721   2                        {
 722   3                              length=pCodeW((tmp2+18));       //ID MAP Length         
 723   3      
 724   3                              //offset table addr in Upgrade Ram      
 725   3                              wIdxTabAddrOffset=wSetStartAddr+length;
 726   3      
 727   3                                length2=pCodeW((tmp2+22));    //Offset Table Len
 728   3      
 729   3                               //Setting File Data start Addr in OTP
 730   3                                wSetFileDataAddr=wValue+length2;      
 731   3      
 732   3                               //===== Load ID Map Table to Upgraded RAM =====//       
 733   3                              tmp2=0;
 734   3                              do{
 735   4                              crc=LoadOTP_CRC8(wIndex+UPGRADE_RAM_START_ADDR,length,&pbXFWCode[wSetStartAddr],TRUE);
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 13  

 736   4      
 737   4                              tmp2++;         
 738   4                              }while((crc !=pbXFWCode[wSetStartAddr+length-1])
 739   3                                  && (tmp2<4));       
 740   3      
 741   3                              if(tmp2>3)
 742   3                              {   //load OTP ID Map Table failed
 743   4                                      OTP_ROMEnable(FALSE);  //Transf OTP to be RAM
 744   4                                      return OTPCodeExit;
 745   4                              }
 746   3      
 747   3                              PartialMemSet.wPartialShiftAddr+=(length2+length);
 748   3      
 749   3                               //load Offset Table, don't use crc 
 750   3                              //tmp2=0;
 751   3                              //do{
 752   3                              crc=LoadOTP_CRC8(wValue+UPGRADE_RAM_START_ADDR,length2,&pbXFWCode[wIdxTabAddrOffset],TRUE);
 753   3                              //tmp2++;               
 754   3                              //}while((crc !=pbXFWCode[wIdxTabAddrOffset+length2-1])
 755   3                               //   && (tmp2<4));     
 756   3                              //if(tmp2>4)
 757   3                              //{
 758   3                              //      OTP_ROMEnable(FALSE);  //Transf OTP to be RAM
 759   3                              //      return OTPCodeExit;
 760   3                              //}
 761   3                              
 762   3                              xSetFileExist=TRUE;
 763   3                              xOTPSettingExist=TRUE;
 764   3                      }
 765   2              }else
 766   1              {       //only OTP FW exist, load EEPROM Setting file   
 767   2                      length=0;
 768   2                      while((!LoadToUpgradedRAM(wIndex,       //ID Map Table Start Addr in EEPROM
 769   2                                                                  tmp1,               // addr to upgraded RAM
 770   2                                                                  wValue))     //ID +Offset Table Length
 771   2                                   && (length < 3)
 772   2                              )
 773   2                      {
 774   3                                      length++;
 775   3                      }
 776   2      
 777   2                      if(length < 3 )
 778   2                      {       //load EEPROM Setting File success                      
 779   3                              PartialMemSet.wPartialShiftAddr += wValue;
 780   3                              wSetStartAddr=tmp1;  
 781   3                              wIdxTabAddrOffset=wSetStartAddr+wIdxTabAddrOffset;                      
 782   3                      }else
 783   2                      {       //load setting file failed
 784   3                              xSetFileExist=FALSE;
 785   3                      }
 786   2              }
 787   1      
 788   1              OTP_ROMEnable(FALSE);  //Transf OTP to be RAM
 789   1              return OTPCodeExit;
 790   1      }
 791          
 792          void OTPModeEnter(void)         //for extension unit to enter
 793          {
 794   1              //initialize External function point
 795   1              /*pfExternalReset=inExternalReset;
 796   1            pfControlInterruptRoutine=inControlInterruptRoutine;
 797   1              pfSensorExtenUnitCtrl=inSensorExtenUnitCtrl;
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 14  

 798   1              pfExStateFunction=inExStateFunction;    
 799   1              */MainFP2Dummy();
 800   1              
 801   1      
 802   1              //used for new FW Structure
 803   1              xFWPartialLoad=FALSE;      
 804   1      
 805   1              //OTP_ROMEnable(FALSE);
 806   1              #ifdef OTP_TEST
                      UARTString("Enter OTP RW");
                      #endif
 809   1      }
 810          
 811          void OTPModeLeave(void) //for extension unit to leave
 812          {
 813   1              #ifndef OTP_TEST
 814   1              //OTP_ROMEnable(TRUE);
 815   1      
 816   1              //do nothing
 817   1              
 818   1              //xCheckState04=FALSE;
 819   1              //cpfExternalInit(); 
 820   1      
 821   1              //DeviceReset();
 822   1              //pfExternalReset();  
 823   1              #else
                      UARTString("Leave OTP RW");     
                      #endif
 826   1      }
 827          
 828          
 829                  
 830          #endif
 831          
 832          void HWInit(void)
 833          {
 834   1              Reg[REG_EP0_FIFO_CTRL]=0x00; // MUST keep it for starting USB
 835   1      
 836   1              //Iso In Regs initial
 837   1              //IsoIn1
 838   1              Reg[REG_ISO_IN1_PL_LO]=0xFE;
 839   1              Reg[REG_ISO_IN1_PL_HI]=0x03;
 840   1              // Isochronous in (endpoint 2) pipe settings
 841   1              Reg[REG_END_P2_EN]=INACTIVE;
 842   1              Reg[REG_ISO_IN1_DPNMF]=EP2_1TRANS;
 843   1              Reg[REG_ISO_IN1_HEADER]=(PL_HD_SCR|PL_HD_PTS);
 844   1      
 845   1              // enable USB interrupt, use 8051 INT0
 846   1              Reg[REG_USB_INT_SW]=(USB_RESET_EN_BIT | USB_SETUP_PKT_EN_BIT);
 847   1              Reg[REG_USB_INT_FLAG]=(USB_RESET_BIT | USB_SETUP_PKT_BIT);  //  clear interrupt state
 848   1      
 849   1              // enable video frame interrupt, use 8051 INT1
 850   1              Reg[REG_VIDEOFLAG_MASK] = 0x00;
 851   1              Reg[REG_VIDEOFLAG] = 0xFF;
 852   1      
 853   1              // IIC basic setting
 854   1              Reg[REG_I2C_SET] = (I2C_CLK_400K); // I2C clock run at 400K Hz
 855   1              Reg[REG_CODE_SPACE] &= ~(APPENDANT_RAM);
 856   1      
 857   1              //Enable HW frame rate ctrl   //__
 858   1              //Reg[REG_FRMCTRL]= EN_FRMCTRL|VSYNC_FRMCTRL; 
 859   1              Reg[REG_FRMCTRL]= 0x00;  //enable by sensor module code
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 15  

 860   1      
 861   1              //Don't reconnect after reset
 862   1              SetRegBits(REG_MCU_CLK, NORECONNECT_RESET);
 863   1      }
 864          
 865          void EnableConnection(void)
 866          {
 867   1              Reg[REG_XCVR_ST]|=USB_CONNECT_BIT;  //  enable USB connection
 868   1              while( !(Reg[REG_XCVR_ST] & MASK_SPEED_HANDSHAKE) )
 869   1              {   //Add PowerON Suspend Function Check.
 870   2             if( Reg[REG_RP_SUSP_CTRL] & HW_SUSPEND ) //suspend
 871   2             {  Reg[REG_SRW_CTRL]|=CHIP_SUSPEND_MODE;          
 872   3             }  
 873   2          }
 874   1      }
 875          
 876          void Int0Enable(void)
 877          {
 878   1              IE |= 0x81; /*EA = 1, EX0 = 1*/
 879   1              IT0 = 0; /* IT0 = 0 negative level trigger, = 1 negative edge trigger */
 880   1      //      Note:
 881   1      //      It's possible happening sequential events during interrupt service routine.
 882   1      //      It may cause second and consequent events lose, if negative edge trigger is enabled.
 883   1      
 884   1              Reg[REG_USB_INT_FLAG]=(USB_RESET_BIT | USB_SETUP_PKT_BIT);  //  clear interrupt state
 885   1      }
 886          
 887          void Int0Disable(void)
 888          {
 889   1              IE &= 0xFE; /*EX0 = 0*/
 890   1      }
 891          
 892          void Int0ISR(void) interrupt 0 using 1
 893          {
 894   1              bInt0State = Reg[REG_USB_INT_FLAG];
 895   1              Reg[REG_USB_INT_FLAG]=bInt0State;  //  clear interrupt state
 896   1      }
 897          
 898          void Int1Enable(void)
 899          {
 900   1              IE |= 0x84; /*EA = 1, EX1 = 1*/
 901   1              IT1 = 0; /* IT1 = 0 negative level trigger, = 1 negative edge trigger */
 902   1      //      Note:
 903   1      //      It's possible happening sequential events during interrupt service routine.
 904   1      //      It may cause second and consequent events lose, if negative edge trigger is enabled.
 905   1      }
 906          
 907          void Int1Disable(void)
 908          {
 909   1              IE &= 0xFB; /*EX1 = 0*/
 910   1      }
 911          
 912          void Int1ISR(void) interrupt 2 using 1
 913          {
 914   1              bFrameFlag |= (Reg[REG_VIDEOFLAG]&Reg[REG_VIDEOFLAG_MASK]);
 915   1      
 916   1              Reg[REG_VIDEOFLAG] = bFrameFlag;  //  clear interrupt state
 917   1      
 918   1      }
 919          
 920          
 921          ///////////////////////////////////////////////////////////////////////
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 16  

 922          // SPI flash related functions
 923          ///////////////////////////////////////////////////////////////////////
 924          #ifndef DISABLE_SPI
 925          void SPIWriteCMD(BYTE cmd)      //write one byte cmd
 926          {
 927   1              // Check device status Ready
 928   1              CheckSPIRdyStatus();
 929   1              // SET commdan instruction
 930   1              Reg[REG_SPI_CTL] = SPI_5MHZ|SPI_ENABLE; // clock 5MHz, enable SPI
 931   1              Reg[REG_SPI_PAGE] = 0x1;
 932   1              pbIICBuf[0x0] = cmd;
 933   1              Reg[REG_SPI_WLEN] = 0x1;
 934   1              Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_ENABLE|SPI_TRIGGER;// Set read instruction and address
 935   1              while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
 936   1              ClrRegBits(REG_SPI_CTL, SPI_ENABLE);    // enable I2C again
 937   1      }
 938          
 939          void SPIWriteEnable(void)
 940          {
 941   1              SPIWriteCMD(WREN);
 942   1      }    
 943          // Set RDSR insturction to SPI flash, (Read Status Register)
 944          BYTE CheckSPIRdyStatus(void)
 945          {
 946   1          static BYTE xdata nCnt;
 947   1          nCnt = 10;
 948   1          do{
 949   2              Reg[REG_SPI_CTL] = SPI_5MHZ|SPI_ENABLE; // clock 5MHz, enable SPI, 0x14 to Reg49
 950   2              Reg[REG_SPI_PAGE] = 0x1;    // page number 1
 951   2              pbIICBuf[0x0] = RDSR;       // RDSR instrcution to write data buffer
 952   2              Reg[REG_SPI_WLEN] = 0x1;    // 0x1 to Reg4a
 953   2              Reg[REG_I2C_LENG_L] = 0x1;    // 0x1 to Reg46
 954   2              Reg[REG_I2C_LENG_H] = 0x0;
 955   2              Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_ENABLE|SPI_READ|SPI_TRIGGER;    // 0x37 to Reg49
 956   2              while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
 957   2              //  Switch to I2C function
 958   2              ClrRegBits(REG_SPI_CTL, SPI_ENABLE);    // enable I2C again
 959   2              if((pbIICBuf[0x0] & RDY_BIT0) == 0x0){
 960   3                  break;
 961   3              }    
 962   2      #ifdef DEBUG_SPI    
                  UartString("rdStsloop");
                  UartByte2Hex(pbIICBuf[0x0]);
              #endif            
 966   2              nCnt--;
 967   2              Delay10US(240); // 75us/Bytes, 32 bytes should be 75*32 = 2400us
 968   2          }while(nCnt>0);
 969   1      #ifdef DEBUG_SPI    
                  UartString("rdSts");
                  UartByte2Hex(pbIICBuf[0x0]);
              #endif            
 973   1          return (pbIICBuf[0x0]);
 974   1      }    
 975          
 976          #ifdef SSTFlashSuport
 977          void SPIWriteDisable(void)
 978          {
 979   1              SPIWriteCMD(WRDI);
 980   1      }       
 981          
 982          void SST_EnableWriteStatus(void)
 983          {
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 17  

 984   1              SPIWriteCMD(SST_EWSR);
 985   1      }       
 986          
 987          void SPIWriteStatus(BYTE statusvalue)
 988          {
 989   1              //EWSR, only for SST Flash. OtherFlash use WREN
 990   1              SST_EnableWriteStatus();  // 3.3v, SST 1.8v could use WRDI
 991   1      
 992   1              // SET WRSR instruction
 993   1              Reg[REG_SPI_CTL] = SPI_5MHZ|SPI_ENABLE; // clock 5MHz, enable SPI
 994   1              Reg[REG_SPI_PAGE] = 0x1;
 995   1              pbIICBuf[0x0] = WRSR;
 996   1              pbIICBuf[0x1] = statusvalue;
 997   1              Reg[REG_SPI_WLEN] = 0x2;
 998   1              Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_ENABLE|SPI_TRIGGER;// Set read instruction and address
 999   1              while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
1000   1              ClrRegBits(REG_SPI_CTL, SPI_ENABLE);    // enable I2C again
1001   1      }       
1002           
1003          #endif
1004          
1005          // MX, PMC, ATMel, ST
1006          SPI_CMD_SET code SPI_Cmd_Set[TOTAL_SPI_CNT] = 
1007          {
1008              {MX_VID,    MX_RDID,    MX_CHIP_ERASE,      MX_SECTOR_ERASE},
1009              {PMC_VID,   PMC_RDID,   PMC_CHIP_ERASE,  PMC_BLOCK_ERASE},
1010              {ATMEL_VID, ATMEL_RDID, ATMEL_CHIP_ERASE, ATMEL_BLOCK_ERASE},
1011              {STM_VID,   STM_RDID,   STM_CHIP_ERASE,   STM_BLOCK_ERASE}
1012          #ifdef SSTFlashSuport
1013              ,{SST_VID,   SST_RDID,   SST_CHIP_ERASE,   SST_BLOCK_ERASE}
1014          #endif  
1015          };    
1016          
1017          #define PrpIndex1Addr   (0x8001)
1018          //#define PrpIndex1Len          (2)//(31)
1019          #define PrpIndex2Addr   (0x8020)
1020          #define PrpIndex2Len            (32)    //original:32 , debug:8
1021          //#define PrpDataStartAddr      (0x8400)
1022          #define PrpTag1Addr             (0x8000)
1023          //#define PrpTag2Addr           (0xFFE0)
1024          
1025          BYTE SPIRDID(void)
1026          {
1027   1          BYTE data i;  //__
1028   1          // Check order, MXIC, PMC, ATMel and ST
1029   1          // Default is MXIC
1030   1          bSPIManufacturer = MXIC;
1031   1          for(i=0; i<TOTAL_SPI_CNT;i++){
1032   2              Reg[REG_SPI_CTL] = SPI_5MHZ|SPI_ENABLE; // clock 5MHz, enable SPI, 0x14 to Reg49
1033   2              Reg[REG_SPI_PAGE] = 0x1;    // page number 1
1034   2              pbIICBuf[0x0] = SPI_Cmd_Set[i].RDIDCmd;   // RDSR instrcution to write data buffer
1035   2              if(pbIICBuf[0x0] != PMC_RDID){
1036   3                  Reg[REG_SPI_WLEN] = 0x1;    // 0x1 to Reg4a
1037   3              }else{
1038   3                  // PMC should send 3 bytes dummy bytes following RDID instruction
1039   3                  pbIICBuf[0x1] = pbIICBuf[0x2] = pbIICBuf[0x3] = 0x0;
1040   3                  Reg[REG_SPI_WLEN] = 0x4;    // 0x1 to Reg4a
1041   3              }
1042   2              Reg[REG_I2C_LENG_L] = 0x1;    // 0x1 to Reg46
1043   2              Reg[REG_I2C_LENG_H] = 0x0;
1044   2              Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_ENABLE|SPI_READ|SPI_TRIGGER;    // 0x37 to Reg49
1045   2              while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 18  

1046   2              //  Switch to I2C function
1047   2              ClrRegBits(REG_SPI_CTL, SPI_ENABLE);    // enable I2C again
1048   2              
1049   2              if(pbIICBuf[0x0] == SPI_Cmd_Set[i].DevVid){
1050   3      #ifdef DEBUG_SPI                
                          UartString("RDID");
                          UartByte2Hex(SPI_Cmd_Set[i].DevVid);
              #endif            
1054   3                  bSPIManufacturer = i;
1055   3                  // SPI flash VID match
1056   3      
1057   3                      //add for flash prp saving method
1058   3                      if(bSPIManufacturer==MXIC)
1059   3                      {       //only write one sector
1060   4                              #ifdef DebugPrpSaveFlash
                                              UARTString("MXIC");
                                      #endif
1063   4                              bPrpIndex1Len=4;                 //original:4, debug:2  
1064   4                              bPrpIndex2Dif=6;
1065   4                              wPrpDataStartAddr=0x80A0;
1066   4                              wPrpTag2Addr=0x8FE0;
1067   4                      }else
1068   3                      {
1069   4                              #ifdef DebugPrpSaveFlash
                                              UARTString("OtherFlash");
                                      #endif
1072   4                              #ifdef SSTFlashSuport
1073   4                              if(bSPIManufacturer==SST)
1074   4                              {       //Default SST is in protection condition
1075   5                                      //UARTString("SSTClrPro");
1076   5                                      SPIWriteStatus(0x00);       //clear protection
1077   5                              }
1078   4                              #endif
1079   4                              bPrpIndex1Len=31;       //original:31, debug:2
1080   4                              bPrpIndex2Dif=1;
1081   4                              wPrpDataStartAddr=0x8400;
1082   4                              wPrpTag2Addr=0xFFE0;    
1083   4                      }
1084   3                              
1085   3                  break;
1086   3              }
1087   2          }
1088   1      
1089   1           if(i==TOTAL_SPI_CNT)       //no support SPI
1090   1                      return FALSE;   
1091   1               
1092   1           return TRUE;
1093   1      }
1094          
1095          
1096          // Erase SPI flash
1097          // Erase 2 sectors should spend 2 seconds to complete
1098          void EraseSPIFlash(void)
1099          {
1100   1          // SPIWriteEnable(); // Write enable
1101   1          // Erase SPI flash chip
1102   1          Reg[REG_SPI_CTL] = SPI_5MHZ|SPI_ENABLE; // clock 5MHz, enable SPI
1103   1          Reg[REG_SPI_PAGE] = 0x1;
1104   1          pbIICBuf[0x0] = SPI_Cmd_Set[bSPIManufacturer].ERASECmd;
1105   1          Reg[REG_SPI_WLEN] = 0x1;
1106   1          Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_ENABLE|SPI_TRIGGER;// Set read instruction and address
1107   1          while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 19  

1108   1          ClrRegBits(REG_SPI_CTL, SPI_ENABLE);    // enable I2C again
1109   1      }    
1110          
1111          //Block Erase SPI flash
1112          // Erase should spend 1 seconds to complete
1113          void EraseBlockSPIFlash(void)   //just for prp setting, MXIC is to erase one sector
1114          {
1115   1              // Write enable
1116   1               SPIWriteEnable();
1117   1              
1118   1              // Erase SPI flash block
1119   1              Reg[REG_SPI_CTL] = SPI_5MHZ|SPI_ENABLE; // clock 5MHz, enable SPI
1120   1              Reg[REG_SPI_PAGE] = 0x1;
1121   1              pbIICBuf[0x0] = SPI_Cmd_Set[bSPIManufacturer].BECmd;
1122   1              pbIICBuf[0x1] = 0x0;
1123   1          pbIICBuf[0x2] = 0x81;       //just erase prp block
1124   1          pbIICBuf[0x3] = 0x00;
1125   1              Reg[REG_SPI_WLEN] = 0x4;
1126   1              Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_ENABLE|SPI_TRIGGER;// Set read instruction and address
1127   1              while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);   
1128   1              ClrRegBits(REG_SPI_CTL, SPI_ENABLE);    // enable I2C again
1129   1      }       
1130          
1131          BOOLEAN CheckErraseTag_Cal(WORD wAddr)
1132          {
1133   1              BYTE idata i=0;
1134   1              while(I2CEEPROMReadData(wAddr,1,pbIICBuf))
1135   1              {//read success
1136   2                      if(pbIICBuf[0]==0xFF)
1137   2                      {       //Tag is right. The EEPROM is errased successfully.
1138   3                              return TRUE;
1139   3                      }
1140   2                      i++;
1141   2                      if(i > 3)  // error value of read tag  3 times
1142   2                      {       
1143   3                              EraseBlockSPIFlash();// tag failed, the value
1144   3                              
1145   3                              #ifdef DebugPrpSaveFlash
                                      UARTString("CheckTagFail");
                                      #endif
1148   3                              
1149   3                              return FALSE;
1150   3                      }
1151   2              }
1152   1              return FALSE;
1153   1      }
1154          
1155          BOOLEAN CheckErraseTag(void)  //check whether Flash is erased successfully
1156          {       
1157   1              if(CheckErraseTag_Cal(wPrpTag2Addr))
1158   1              {
1159   2                      if(CheckErraseTag_Cal(PrpTag1Addr))
1160   2                      {       return TRUE;
1161   3                      }
1162   2              }       
1163   1              return FALSE;
1164   1      }
1165          
1166          BOOLEAN ReadBackCheck(WORD wAddr)
1167          {
1168   1              I2CEEPROMReadData(wAddr,1,pbIICBuf);
1169   1              if(pbIICBuf[0]!=0x00)
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 20  

1170   1                      return FALSE;
1171   1              else
1172   1                      return TRUE;
1173   1      }
1174          
1175          #endif  // DISABLE_SPI
1176          // Get GPIO  16, for bounding option
1177          #ifndef DISABLE_BD_OPTION
              void GetBDOption(void)
              {
                      // 1. Pull down GP16PD first
                      // 2. Check GP16 status
                      // 3. If status is high, DO NOT pull down
                      // else pull down
                      xBDGP16 = 0;
                      Reg[OPTION_GP] = GP16PD;
              
                      Delay10US(10);
              
                      if(Reg[OPTION_GP] & GP16DAT){
                              // GP17 pull high
                              ClrRegBits(OPTION_GP, GP16PD);
                              xBDGP16 = 1;
                      }
              }
              #endif // DISABLE_BD_OPTION
1196          
1197          
1198          // Property Set saving functions
1199          // When dump stack debug function enable, property value saving will be disable forcely
1200          void Timer2ISR(void) interrupt 5 using 1
1201          {
1202   1      
1203   1      
1204   1          if(bAsynPrpSaveCnt == 100){
1205   2              // Stop Timer2
1206   2              T2CON = 0x0;
1207   2              IE &= 0xDF;
1208   2              bAsynPrpSaveCnt = 0;
1209   2              // Set Property value asynchronous saving flag
1210   2              xAsyncSavePrp = TRUE;
1211   2          }else{
1212   2              bAsynPrpSaveCnt++;
1213   2          }
1214   1          TF2 = 0;
1215   1      }
1216          
1217          void EanbleTimer2(void)
1218          {
1219   1          // Use Timer2 for Property page value asynchronous saving
1220   1          // Mask Timer2 Interrupt
1221   1          if(TR2 == 0){
1222   2              IE &= 0xDF;
1223   2              xAsyncSavePrp = FALSE;
1224   2              bAsynPrpSaveCnt = 0;
1225   2              // Stop Timer2
1226   2              T2CON = 0x0;    // interval timer, TR2 = 0, clear TF2, EXEN2 = 0, auto-reload mode
1227   2              // Set clock counter
1228   2              TH2 = 0x3C;    // 50000 us
1229   2              TL2 = 0xB0;   
1230   2              RCAP2H = 0x3C;
1231   2              RCAP2L = 0xB0;
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 21  

1232   2              // UnMask Timer2 interrupt
1233   2              IE |= 0x20;
1234   2              // Run Timer 2
1235   2              TR2 = 1;
1236   2          
1237   2      
1238   2      
1239   2          }        
1240   1      }
1241          
1242          static void DisableTimer2(void)
1243          {
1244   1          // Mask Timer2 Interrupt
1245   1          IE &= 0xDF;
1246   1          xAsyncSavePrp = FALSE;
1247   1          // Stop Timer 2
1248   1          T2CON = 0x0;    // interval timer, TR2 = 0, clear TF2, EXEN2 = 0, auto-reload mode
1249   1      }
1250          
1251          // Queue Property Value save request when SET_CUR control of PU is arrival
1252          void QueuePrpSaveReq(void)
1253          {
1254   1          // Check whether already has work item queuing
1255   1          if((bPrpSaveMethod == 0)||(wEEPROMSize == 0)){
1256   2              return;
1257   2          }
1258   1          if(xSavePrp == TRUE){
1259   2              // If yes, remove it and queue current new one
1260   2              if(bPrpSaveMethod == PROPERTY_WRITE_METHOD_1){
1261   3                  DisableTimer2();
1262   3                  EanbleTimer2();
1263   3              }
1264   2          }else{
1265   2              // If method 2, just only set work item queue flag
1266   2              xSavePrp = TRUE;
1267   2              if(bPrpSaveMethod == PROPERTY_WRITE_METHOD_1){
1268   3                  xAsyncSavePrp = FALSE;
1269   3                  EanbleTimer2();
1270   3              }
1271   2          }
1272   1      }
1273          
1274          // Remove Property Value save request when device is reset
1275          void RemovePrpSaveReq(void)
1276          {
1277   1          // Check saving method
1278   1          if(xSavePrp == TRUE){
1279   2              if(bPrpSaveMethod == PROPERTY_WRITE_METHOD_1){
1280   3                  DisableTimer2();
1281   3              }
1282   2              xSavePrp = FALSE;
1283   2          }
1284   1      }
1285          
1286          // Do PrpSave work item
1287          void CompletePrpSaveReq(void)
1288          {
1289   1          // Complete work item request, and clear request flag
1290   1          if(xSavePrp == TRUE){
1291   2              if(bPrpSaveMethod == PROPERTY_WRITE_METHOD_1){
1292   3                  if(xAsyncSavePrp == FALSE){
1293   4                      DisableTimer2();
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 22  

1294   4                  }
1295   3      #ifdef  DEBUG_PRPSAVE                            
                          else{
              
                              UartString("SaveAsynPrp");
                          }
              #endif            
1301   3              }
1302   2      #ifdef  DEBUG_PRPSAVE
                      UartString("SavePrp");
              #endif       
1305   2      
1306   2              WaitPartialFWLoad();  //avoid the FW in loading
1307   2              
1308   2              PrpSaveEEPROM();
1309   2              xSavePrp = FALSE;
1310   2          }
1311   1      }
1312          // Load Property value from EEPROM
1313          BOOLEAN PrpLoadFromEEPROM(void)
1314          {
1315   1          WORD data wAddr;
1316   1          WORD data wCheckSum;
1317   1          BYTE data i;
1318   1          BYTE xdata * data ValuePtr;
1319   1      
1320   1      #ifndef DISABLE_SPI
1321   1         if(xSPIEnable == TRUE)
1322   1         {//to load SPI flash
1323   2            #ifdef DebugPrpSaveFlash
                      UartString("loadprp");
                      #endif  
1326   2              if(CheckErraseTag())
1327   2              {
1328   3                      if(I2CEEPROMReadData(PrpIndex1Addr,bPrpIndex1Len,pbIICBuf))
1329   3                      {       //read index 1 is success
1330   4                              for(i=0;i<bPrpIndex1Len;i++)
1331   4                              {
1332   5                                      if(pbIICBuf[i]==0xff)
1333   5                                      {       break; }
1334   5                              }  //i=index1  : 0~30
1335   4      
1336   4                              #ifdef DebugPrpSaveFlash
                                      UartByte2Hex(i);
                                      #endif
1339   4                              
1340   4                              if(I2CEEPROMReadData((PrpIndex2Addr+(i*PrpIndex2Len)),PrpIndex2Len,pbIICBuf)) //read 32 byte in Index2 
             -area        
1341   4                              {       
1342   5                                      wAddr=i*PrpIndex2Len*32;//store index1 correspond to the Prpdata addr, 32*32
1343   5      
1344   5                                      for(i=0;i<PrpIndex2Len;i++)
1345   5                                      {
1346   6                                              if(pbIICBuf[i]==0xff)
1347   6                                              {       break;  }
1348   6                                      }// i=index2, 0~31
1349   5                                      
1350   5                                      #ifdef DebugPrpSaveFlash
                                              UartByte2Hex(i);
                                              #endif
1353   5      
1354   5                                      if(i==0)
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 23  

1355   5                                      {
1356   6                                              if(wAddr==0)  //no prp setting exist
1357   6                                                      return FALSE;
1358   6                                              else
1359   6                                                 wAddr=wAddr-32;      // prp setting numbers
1360   6                                      }else
1361   5                                      {
1362   6                                              wAddr=wAddr+((i-1)<<5); //*32   , 32 is prp numbers
1363   6                                      }
1364   5                                      
1365   5                                      wAddr=wAddr+wPrpDataStartAddr;          
1366   5                                      #ifdef DebugPrpSaveFlash
                                              UARTWord2Hex(wAddr);
                                              #endif
1369   5                                      goto  NormalPrpLoad;
1370   5                              }
1371   4                      }
1372   3              }
1373   2              return FALSE;
1374   2         }else
1375   1         {
1376   2      #endif          
1377   2          wAddr = wEEPROMSize - 32;
1378   2      #ifndef DISABLE_SPI
1379   2         }
1380   1      
1381   1       NormalPrpLoad: 
1382   1      #endif  
1383   1          for(i=25; i<32; i++){
1384   2              pbTmpBuf[i] = 0x0;
1385   2          }
1386   1          I2CEEPROMReadData(wAddr ,32, pbTmpBuf);
1387   1          wCheckSum = *((WORD*)&pbTmpBuf[30]);
1388   1          wCheckSum=wCheckSum-1;//Avoid all property is 0
1389   1          for(i=0; i<25; i++){
1390   2              wCheckSum = wCheckSum - pbTmpBuf[i];
1391   2          }
1392   1          if(wCheckSum == 0){
1393   2              ValuePtr = (BYTE xdata *)&bPwrLine;
1394   2      /*              
1395   2              for(i=0; i<25; i++){
1396   2                  ValuePtr[i] = pbTmpBuf[i];
1397   2              }
1398   2      */
1399   2                      memcpy(ValuePtr, pbTmpBuf, 25);
1400   2              // UartString("LoadEEPok");
1401   2              return TRUE;
1402   2          }else{
1403   2              // UartString("LoadEEPfailed");
1404   2              return FALSE;
1405   2          }
1406   1      }
1407          // Save Property value into EEPROM
1408          // This function is assign to exported function pointer, can be replaced by 
1409          // external firmware code
1410          void PrpSaveEEPROM(void)
1411          {
1412   1          // Save Property Value into EEPROM
1413   1          // Write to the tail of EEPROM
1414   1          // occupied 32 bytes space includes checksum
1415   1          // The byte order is Big-endian
1416   1          WORD idata wAddr;
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 24  

1417   1          WORD idata wCheckSum;
1418   1          BYTE idata i, j;
1419   1          BYTE xdata * idata ValuePtr;
1420   1      
1421   1      #ifndef DISABLE_SPI
1422   1        if(xSPIEnable == TRUE)
1423   1        {//to load SPI flash  
1424   2            #ifdef DebugPrpSaveFlash
                      UartString("writeprp");
                      #endif
1427   2              
1428   2              if(CheckErraseTag())
1429   2              {
1430   3                      if(I2CEEPROMReadData(PrpIndex1Addr,bPrpIndex1Len,pbIICBuf))
1431   3                      {
1432   4                              for(i=0;i<bPrpIndex1Len;i++)
1433   4                              {
1434   5                                      if(pbIICBuf[i]==0xff)
1435   5                                      {       break;  }
1436   5                              }  //i=index1  : 0~30
1437   4                              #ifdef DebugPrpSaveFlash
                                      UartByte2Hex(i);
                                      #endif
1440   4                      
1441   4                              if(I2CEEPROMReadData((PrpIndex2Addr+(i*PrpIndex2Len)),PrpIndex2Len,pbIICBuf)) //read 32 byte in Index2 
             -area        
1442   4                              {       
1443   5                                      wAddr=i*PrpIndex2Len*32;//store index1 correspond into data addr, 32*32
1444   5      
1445   5                                      for(j=0;j<PrpIndex2Len;j++)
1446   5                                      {
1447   6                                              if(pbIICBuf[j]==0xff)
1448   6                                              {       break;  }
1449   6                                      }// j=index2, 0~31
1450   5                                      #ifdef DebugPrpSaveFlash
                                              UartByte2Hex(j);
                                              #endif
1453   5      
1454   5                                      pbTmpBuf[0]=0x00;
1455   5                                      if((i==(bPrpIndex1Len-1)) && (j==(PrpIndex2Len-bPrpIndex2Dif)) )  
1456   5                                      {  //all addr is full, block erase
1457   6                                              wCheckSum=0;
1458   6                                              //=====  write checkTag value =====//
1459   6                                              do
1460   6                                              {                                               
1461   7                                                      //pbTmpBuf[0]=0x44; //Debug when checkTag is wrong
1462   7                                                      SPIWriteEnable();                                               
1463   7                                                      I2CEEPROMWriteData(wPrpTag2Addr,1,pbTmpBuf);
1464   7                                                      SPIWriteEnable();
1465   7                                                      I2CEEPROMWriteData(PrpTag1Addr,1,pbTmpBuf);
1466   7                                                      wCheckSum++;
1467   7                                              }while((!ReadBackCheck(wPrpTag2Addr)) && (wCheckSum<4));
1468   6      
1469   6                                              //===== erase block =====//
1470   6                                              EraseBlockSPIFlash();
1471   6                                              return;
1472   6                                      }
1473   5                                      
1474   5                                      wAddr=wAddr+(j<<5);//j*32;      
1475   5                                      
1476   5                                      wAddr=wAddr+wPrpDataStartAddr;  
1477   5                                      #ifdef DebugPrpSaveFlash
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 25  

                                              UARTWord2Hex(wAddr);
                                              #endif
1480   5                                      
1481   5                                      if(j==(PrpIndex2Len-1))  //&& (i != bPrpIndex1Len))  
1482   5                                      {       //update index1 
1483   6                                              //pbTmpBuf[0]=0xa5; //Debug when index1 is failed
1484   6                                              SPIWriteEnable();
1485   6                                              I2CEEPROMWriteData(PrpIndex1Addr+i,1,pbTmpBuf);
1486   6                                              if(!ReadBackCheck(PrpIndex1Addr+i))
1487   6                                                      return;
1488   6                                      }
1489   5                                      
1490   5                                      //pbTmpBuf[0]=0x5a; //Debug when index2 is failed
1491   5                                      SPIWriteEnable();
1492   5                                      I2CEEPROMWriteData(PrpIndex2Addr+j+(i*PrpIndex2Len),1,pbTmpBuf);
1493   5                                      if(ReadBackCheck(PrpIndex2Addr+j+(i*PrpIndex2Len)))
1494   5                                      {
1495   6                                              goto  NormalPrpSave;
1496   6                                      }
1497   5                              }
1498   4                      }                       
1499   3                      return;
1500   3              }
1501   2              return;
1502   2          }else
1503   1          {
1504   2      #endif  
1505   2                 wAddr = wEEPROMSize - 32;
1506   2      #ifndef DISABLE_SPI
1507   2           }
1508   1              
1509   1      NormalPrpSave:
1510   1      #endif
1511   1      
1512   1          // NOTE!NOTE!NOTE!
1513   1          // DO NOT split property set value defintion in XRAM, it will
1514   1          // break continue saving mechanism
1515   1          ValuePtr = (BYTE xdata *)&bPwrLine;
1516   1              memcpy(pbTmpBuf, ValuePtr, 25);
1517   1          for(i=25;i<30; i++){
1518   2              pbTmpBuf[i] = 0x0;
1519   2          }
1520   1          wCheckSum = 1;  //Avoid all property is 0
1521   1          for(i=0; i<25; i++){
1522   2              wCheckSum = pbTmpBuf[i] + wCheckSum;
1523   2          }
1524   1          *((WORD *)&pbTmpBuf[30]) = wCheckSum;       // CheckSum
1525   1      
1526   1      
1527   1      #ifndef DISABLE_SPI
1528   1          if(xSPIEnable == TRUE)
1529   1          {//to load SPI flash        
1530   2                      #ifdef DebugPrpSaveFlash
                              UartString("saveprp");
                              #endif  
1533   2                        SPIWriteEnable();     
1534   2                        //return; // write prp setting falied   
1535   2                        I2CEEPROMWriteData(wAddr, 32, pbTmpBuf);
1536   2          }else
1537   1          {
1538   2      #endif          
1539   2          // Write 8 bytes, because 4K bits EEPROM is 8 bytes page write
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 26  

1540   2          // Disable write protect
1541   2          // 1. DIR->OUT, 2 GPIO0->Low
1542   2          SetRegBits(REG_WAKEUP_CH, DIS_PROTECT_GP0);  //Disable Protect GPIO0
1543   2              SetRegBits(REG_GPIO1_DIR, GPIO0_BIT);
1544   2          GPIOGroup1Low(bWriteProtectGPIO);
1545   2              Delay10US(5);
1546   2          if(bEEPromKBits > 16){
1547   3              I2CEEPROMWriteData(wAddr, 32, pbTmpBuf);
1548   3              Delay1MS(4);
1549   3          }else{
1550   3              for(j=0; j<32; j+=8){
1551   4                  I2CEEPROMWriteData(wAddr+j, 8, &pbTmpBuf[j]);
1552   4                  Delay1MS(4);
1553   4              }
1554   3          }        
1555   2          GPIOGroup1High(bWriteProtectGPIO);
1556   2          ClrRegBits(REG_WAKEUP_CH, DIS_PROTECT_GP0);  //Protect GPIO0
1557   2      #ifndef DISABLE_SPI
1558   2           }
1559   1      #endif
1560   1      
1561   1      }
1562          
1563          // I2C functions variable definition
1564          // SensorI2CReadData, SensorI2CWriteData and I2CEEPROMReadData are exported function and are not root func
             -tions 
1565          // in call tree, the local variable of these two functions should be defined as module global variables
1566          static WORD data I2CwAddr;
1567          static BYTE data I2CLen;
1568          static BYTE* data I2CpData;
1569          //static BYTE data I2CComplete;
1570          static BYTE data I2CRetry;
1571          static BYTE data I2CTemp;
1572          
1573          static BYTE idata bI2CMode;
1574          static BYTE idata bI2CID;
1575          static BOOLEAN idata bI2CRead;
1576          static BOOLEAN idata bEEPROMI2C;
1577          
1578          
1579          static BYTE I2CAccess(void)
1580          {
1581   1          if((!I2CLen) || (I2CLen > 32) || (bFWLoadState!=FWS_NORM)){ //in loading
1582   2                  return FALSE;
1583   2          }
1584   1      
1585   1          if(bEEPROMI2C == TRUE){
1586   2              bI2CMode = (bIICClock|I2C_SEQ_MODE);//(I2C_CLK_400K|I2C_SEQ_MODE);
1587   2              if ( bEEPromKBits<=16 ) {
1588   3                  bI2CID = (I2C_EEPROM_DEVICE_ID|(((I2CwAddr>>8)&0x07)<<1));
1589   3              }else {
1590   3                  bI2CMode |= I2C_ADDR_WORD_WIDE;
1591   3                  bI2CID = bEEPROMID;
1592   3              }
1593   2          }else{
1594   2              bI2CMode = (bSensorIICMode|I2C_SEQ_MODE);
1595   2              bI2CID = bSensorIICID;
1596   2          }
1597   1          if(!bI2CRead){
1598   2              memcpy(pbIICBuf, I2CpData, I2CLen);
1599   2          }
1600   1          for (I2CRetry=0; I2CRetry<8; I2CRetry++) {
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 27  

1601   2              Reg[REG_I2C_SET] = bI2CMode;
1602   2              Reg[REG_I2C_DEV_ID] = bI2CID;
1603   2              Reg[REG_I2C_ADDRL ] = LoByteOfWord(I2CwAddr);
1604   2              Reg[REG_I2C_ADDRH ] = HiByteOfWord(I2CwAddr);
1605   2              Reg[REG_I2C_LENG_L  ] = I2CLen;
1606   2              Reg[REG_I2C_LENG_H  ] = 0x00;
1607   2              //clear I2C status register
1608   2              Reg[REG_I2C_STATUS] = 0xFF;
1609   2              if(bI2CRead){
1610   3                  Reg[REG_I2C_CTRL] = READ_TRANSFER;
1611   3              }else{
1612   3                  Reg[REG_I2C_CTRL] = WRITE_TRANSFER;
1613   3              }
1614   2              for (I2CTemp=0;I2CTemp<0xFF ;I2CTemp++) {
1615   3                  Delay10US(10);
1616   3                  if (!(Reg[REG_I2C_CTRL]&TRANSFER_BUSY))
1617   3                      break;
1618   3              }
1619   2              if(bI2CRead){
1620   3                  if( !(Reg[REG_I2C_STATUS] & READ_ST_MASK)) {
1621   4                      memcpy(I2CpData, pbIICBuf, I2CLen);
1622   4                      return I2CLen;
1623   4                  }
1624   3              }else{
1625   3                  if( !(Reg[REG_I2C_STATUS] & WRITE_ST_MASK)) {
1626   4                      return I2CLen;
1627   4                  }
1628   3              }
1629   2          }
1630   1          return 0;
1631   1      }
1632          
1633          
1634          BYTE I2CEEPROMWriteData(WORD wAddr,BYTE bXferLength,BYTE* pbData)
1635          {
1636   1      #ifndef DISABLE_SPI    
1637   1              BYTE idata i;//__
1638   1      #endif  
1639   1              I2CwAddr=wAddr;
1640   1              I2CLen=bXferLength;
1641   1              I2CpData=pbData;
1642   1              
1643   1      //      if((!I2CLen) || (I2CLen > 32)){
1644   1      //          return FALSE;
1645   1      //    }
1646   1              /*
1647   1              if(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY)
1648   1              {       UARTString("I2CWrite Busy");
1649   1                      UARTWord2Hex(I2CwAddr);
1650   1                      while(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY);
1651   1              }*/
1652   1      #ifndef DISABLE_SPI
1653   1          if(xSPIEnable == FALSE){
1654   2      #endif 
1655   2           bI2CRead = FALSE;
1656   2               bEEPROMI2C = TRUE;     
1657   2               return (I2CAccess());
1658   2      #if 0
                      // GPIOGroup1Low(bWriteProtectGPIO);   // Disable WP for EEPROM
                      I2CRetry = 0;
                      do{
                          Reg[REG_I2C_SET] = (I2C_CLK_400K|I2C_SEQ_MODE);
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 28  

                          if ( bEEPromKBits<=16 ) { //
                              ClrRegBits(REG_I2C_SET, I2C_ADDR_WORD_WIDE);
                              WriteReg(REG_I2C_DEV_ID, I2C_EEPROM_DEVICE_ID|(((I2CwAddr>>8)&0x07)<<1));
                              // wAddr = wAddr&0xFF;
                              // UartWord2Hex(wAddr);
                          }else{
                              SetRegBits(REG_I2C_SET, I2C_ADDR_WORD_WIDE);
                              WriteReg(REG_I2C_DEV_ID, bEEPROMID);
                          }
                          WriteReg(REG_I2C_ADDRL, (BYTE)I2CwAddr);
                          WriteReg(REG_I2C_ADDRH, (BYTE)(I2CwAddr >> 8));
                          for(i = 0; i < I2CLen; i++){
                              pbIICBuf[i] = I2CpData[i];
                          }
                          WriteReg(REG_I2C_LENG_L, I2CLen);
                            WriteReg(REG_I2C_LENG_H, 0x00);
                          SetRegBits(REG_I2C_STATUS, ID_PHASE_ST | ADDR_PHASE_ST | DATA_PHASE_ST);
                          WriteReg(REG_I2C_CTRL, WRITE_TRANSFER);
                          while(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY);
                          ClrRegBits(REG_I2C_SET, I2C_SEQ_MODE);
                         // GPIOGroup1High(bWriteProtectGPIO);   // Enable WP for EEPROM
                          if(ReadReg(REG_I2C_STATUS) & WRITE_ST_MASK){
                              if(I2CRetry>8){
                                  return FALSE;
                              }
                          }else{
                              break;
                          }
                          Delay10US(5);
                          I2CRetry++;
                      }while(1);
               #endif       
1695   2      #ifndef DISABLE_SPI            
1696   2          }
1697   1          else{
1698   2              // SPI Flash write
1699   2              if((!I2CLen) || (I2CLen > 32)|| (bFWLoadState!=FWS_NORM)){
1700   3                      return FALSE;
1701   3              }
1702   2      
1703   2              // Note should Erase chip first
1704   2              // SPIWriteEnable();
1705   2              Reg[REG_SPI_CTL] = SPI_5MHZ|SPI_ENABLE;// clock 5MHz, enable SPI
1706   2      
1707   2      EEPROMWriteStart:               
1708   2             #ifdef SSTFlashSuport
1709   2              if((bSPIManufacturer != SST)||(I2CLen==0x01))
1710   2              {
1711   3              #endif        
1712   3              Reg[REG_SPI_PAGE] = 0x2;
1713   3              pbIICBuf[0x0] = PROGRAM_CMD;
1714   3              pbIICBuf[0x1] =  0x0;
1715   3              pbIICBuf[0x2] = (BYTE)(I2CwAddr >> 8);
1716   3              pbIICBuf[0x3] = (BYTE)(I2CwAddr);
1717   3              Reg[REG_SPI_WLEN] = 0x4;
1718   3              Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_ENABLE|SPI_TRIGGER;
1719   3              while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
1720   3              for(i = 0; i < I2CLen; i++){
1721   4                  pbIICBuf[i] = I2CpData[i];
1722   4              }
1723   3              Reg[REG_SPI_WLEN] = I2CLen; // Set write length to 32 bytes
1724   3              Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_ENABLE|SPI_TRIGGER;
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 29  

1725   3              while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
1726   3      
1727   3              #ifdef SSTFlashSuport
1728   3               }else
1729   2              {     //SST Flash
1730   3                      Reg[REG_SPI_PAGE] = 0x1;
1731   3                      pbIICBuf[0x0] = SST_AAI_CMD;
1732   3                      pbIICBuf[0x1] =  0x0;
1733   3                      pbIICBuf[0x2] = (BYTE)(I2CwAddr >> 8);
1734   3                      pbIICBuf[0x3] = (BYTE)(I2CwAddr);
1735   3                      pbIICBuf[0x4] = I2CpData[0];    //SST 3.3v, only write one byte, 1.8v write 2 byte
1736   3      
1737   3                 #ifdef SST18V
1738   3                              pbIICBuf[0x5] = I2CpData[1];   
1739   3                              Reg[REG_SPI_WLEN] = 0x6;
1740   3                 #else
                              Reg[REG_SPI_WLEN] = 0x5;    
                         #endif
1743   3                 
1744   3                      Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_ENABLE|SPI_TRIGGER;
1745   3                      while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
1746   3                      
1747   3                 #ifdef SST18V
1748   3        
1749   3                      //I2CRetry is used for tempory
1750   3                      if(I2CLen&0x01)  
1751   3                      {       //odd length
1752   4                              I2CRetry=I2CLen-1;
1753   4                      }else
1754   3                      {   //even length
1755   4                              I2CRetry=I2CLen;
1756   4                      }
1757   3      
1758   3                      for(i = 2; i <I2CRetry ; i=i+2) 
1759   3                 #else
                              for(i = 1; i < I2CLen; i++)
                         #endif
1762   3                      {               
1763   4                              Delay10US(2);
1764   4                              Reg[REG_SPI_PAGE] = 0x1;
1765   4                              pbIICBuf[0x0] = SST_AAI_CMD;
1766   4                              pbIICBuf[0x1]=I2CpData[i];
1767   4      
1768   4                          #ifdef SST18V       
1769   4                              pbIICBuf[0x2]=I2CpData[i+1];
1770   4                              Reg[REG_SPI_WLEN] = 0x3;  //0x3
1771   4                          #else
                                      // support 3.3v 
                                      Reg[REG_SPI_WLEN] = 0x2;  
                                  #endif
1775   4                                      
1776   4                              Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_ENABLE|SPI_TRIGGER;
1777   4                      while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);                
1778   4                      }
1779   3      
1780   3                      //===== AAI cmd end =====//     
1781   3                      SPIWriteDisable();
1782   3                      // CheckSPIRdyStatus();
1783   3      
1784   3                      #ifdef SST18V
1785   3                      if(I2CLen&0x01)  
1786   3                      {       //odd length, write last byte           
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 30  

1787   4                              SPIWriteEnable();
1788   4                              I2CwAddr=I2CwAddr+I2CLen-1;  //update address
1789   4                      
1790   4                              I2CpData[0]=I2CpData[I2CLen-1];
1791   4                              I2CLen=0x01;
1792   4                            goto EEPROMWriteStart;
1793   4                      /*              
1794   4                              Reg[REG_SPI_PAGE] = 0x1;
1795   4                              pbIICBuf[0x0] = PROGRAM_CMD;
1796   4                              pbIICBuf[0x1] =  0x0;
1797   4                              pbIICBuf[0x2] = (BYTE)(wAddr >> 8);
1798   4                              pbIICBuf[0x3] = (BYTE)(wAddr);
1799   4                              pbIICBuf[0x4] = pbData[bXferLength-1];
1800   4                              Reg[REG_SPI_WLEN] = 0x5;
1801   4                              Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_ENABLE|SPI_TRIGGER;
1802   4                              while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
1803   4                         */
1804   4                      }
1805   3                      #endif
1806   3              
1807   3              }
1808   2              #endif
1809   2              ClrRegBits(REG_SPI_CTL, SPI_ENABLE);    // enable I2C again
1810   2                      
1811   2          }                    
1812   1      #endif // DISABLE_SPI    
1813   1              return TRUE;
1814   1      }
1815          
1816          BYTE I2CEEPROMReadData(WORD wAddr,BYTE bXferLength,BYTE* pbData)
1817          {
1818   1      
1819   1              I2CwAddr = wAddr;       //read from 
1820   1              I2CLen = bXferLength;
1821   1              I2CpData = pbData;
1822   1      
1823   1      #ifndef DISABLE_SPI    
1824   1            if(xSPIEnable == FALSE){
1825   2      #endif
1826   2                      bI2CRead = TRUE;
1827   2                      bEEPROMI2C = TRUE;
1828   2                      return (I2CAccess()); 
1829   2                  
1830   2      #ifndef DISABLE_SPI             
1831   2            }else{
1832   2                  if((!I2CLen) || (I2CLen > 32))
1833   2                              return FALSE;
1834   2      
1835   2               if(!I2CEEPROMDirRAM(I2CwAddr,(WORD)I2CLen,FALSE))
1836   2                   {  //read data failed
1837   3                          return FALSE;
1838   3                    }
1839   2      
1840   2                     memcpy(I2CpData, pbIICBuf, I2CLen); 
1841   2                  return TRUE;
1842   2            }
1843   1      #endif
1844   1      #if 0
                      if((!I2CLen) || (I2CLen > 32))
                                      return FALSE;
              
                      if(!I2CEEPROMDirRAM(I2CwAddr,(WORD)I2CLen,FALSE))
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 31  

                      {       //read data failed
                              return FALSE;
                      }
              
                      memcpy(I2CpData, pbIICBuf, I2CLen); 
                      
                  return TRUE;
              #endif
1857   1      }
1858          
1859          BYTE SensorI2CReadData(WORD wAddr,BYTE bReadLength,BYTE * pData)
1860          {
1861   1          I2CwAddr = wAddr;
1862   1          I2CLen = bReadLength;
1863   1          I2CpData = pData;
1864   1      
1865   1          bI2CRead = TRUE;
1866   1          bEEPROMI2C = FALSE;
1867   1          return (I2CAccess());
1868   1      #if 0
                      if ((!I2CLen)||(I2CLen>32))
                          return 0;
              
                      #if 0
                      if(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY)
                      {       UARTString("SensorRead Busy");
                              UARTWord2Hex(I2CwAddr);
                              while(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY);
                      }
                      #endif
              
                      Reg[REG_I2C_SET] = (bSensorIICMode|I2C_SEQ_MODE);
                      
                      //I2CComplete = 0;
                      for (I2CRetry=0;I2CRetry<8;I2CRetry++) {
                              Reg[REG_I2C_DEV_ID] = bSensorIICID;
                              Reg[REG_I2C_ADDRL ] = LoByteOfWord(I2CwAddr);
                              Reg[REG_I2C_ADDRH ] = HiByteOfWord(I2CwAddr);
                              Reg[REG_I2C_LENG_L  ] = I2CLen;
                               Reg[REG_I2C_LENG_H] = 0x00;    
                              
                              //clear I2C status register
                              Reg[REG_I2C_STATUS] = 0xFF;
                              
                              Reg[REG_I2C_CTRL] = READ_TRANSFER;
                              
                              for (I2CTemp=0;I2CTemp<0xFF ;I2CTemp++) {
                                      Delay10US(10);
                                      if (!(Reg[REG_I2C_CTRL]&TRANSFER_BUSY))
                                              break;
                              }
                              if( !(Reg[REG_I2C_STATUS] & READ_ST_MASK)) {
              /*
                                      for (I2CTemp=0; I2CTemp<I2CLen ;I2CTemp++) {
                                      I2CpData[I2CTemp] = pbIICBuf[I2CTemp];
                                  }
              */                  
                                      memcpy(I2CpData, pbIICBuf, I2CLen);
                                  return I2CLen;
                              }
                      }
                      return 0;
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 32  

              #endif    
1912   1      }
1913          // Exported function
1914          // Local variable should be defined as module global type to prevent data overlay
1915          // issue
1916          BYTE SensorI2CWriteData(WORD wAddr,BYTE bWriteLength,BYTE * pData)
1917          {
1918   1          I2CwAddr = wAddr;
1919   1          I2CLen = bWriteLength;
1920   1          I2CpData = pData;
1921   1      
1922   1          bI2CRead = FALSE;
1923   1          bEEPROMI2C = FALSE;
1924   1          return (I2CAccess());
1925   1      #if 0   
                      if ((!I2CLen)||(I2CLen>32))
                          return 0;
              
                      #if 0
                      if(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY)
                      {       UARTString("SensorWrite Busy");
                              UARTWord2Hex(I2CwAddr);
                              while(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY);
                      }
                      #endif
                      
                      Reg[REG_I2C_SET] = (bSensorIICMode|I2C_SEQ_MODE);
                      
                      //I2CComplete = 0;
                      for (I2CRetry=0;I2CRetry<8;I2CRetry++) {
                              Reg[REG_I2C_DEV_ID] = bSensorIICID;
                              Reg[REG_I2C_ADDRL ] = LoByteOfWord(I2CwAddr);
                              Reg[REG_I2C_ADDRH ] = HiByteOfWord(I2CwAddr);
                              Reg[REG_I2C_LENG_L  ] = I2CLen;
                               Reg[REG_I2C_LENG_H] = 0x00;    
              /*              
                              for (I2CTemp=0; I2CTemp<I2CLen ;I2CTemp++) {
                                  pbIICBuf[I2CTemp] = I2CpData[I2CTemp];
                              }
              */              
                              memcpy(pbIICBuf,  I2CpData, I2CLen);
                              
                              //clear I2C status register
                              Reg[REG_I2C_STATUS] = 0xFF;
                              
                              Reg[REG_I2C_CTRL] = WRITE_TRANSFER;
                              
                              for (I2CTemp=0;I2CTemp<0xFF ;I2CTemp++) {
                                      Delay10US(10);
                                      if (!(Reg[REG_I2C_CTRL]&TRANSFER_BUSY))
                                              break;
                              }
                              
                              if( !(Reg[REG_I2C_STATUS] & WRITE_ST_MASK)) {
                                  return I2CLen;
                              }
                      }
                      
                      return 0;
              #endif    
1971   1      }
1972          
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 33  

1973          BOOLEAN CheckEEPROMI2CDevID(void)
1974          {
1975   1          BYTE data i = 0;
1976   1          Reg[REG_I2C_SET] = (I2C_CLK_100K);//(I2C_CLK_400K);
1977   1          I2CwAddr = 0x101;
1978   1          if ( bEEPromKBits<=16 ) {
1979   2              ClrRegBits(REG_I2C_SET, I2C_ADDR_WORD_WIDE);
1980   2              // Don't care about bEEROMID
1981   2      //      WriteReg(REG_I2C_DEV_ID, I2C_EEPROM_DEVICE_ID|(((I2CwAddr>>8)&0x07)<<1));
1982   2              WriteReg(REG_I2C_DEV_ID, bEEPROMID|(((I2CwAddr>>8)&0x07)<<1));
1983   2              }else if( bEEPromKBits==0xFF ){
1984   2                      //SPI flash
1985   2                 #ifndef DISABLE_SPI
1986   2                      xSPIEnable = TRUE;
1987   2                      return SPIRDID();  //TRUE;
1988   2                 #else 
                           return FALSE;
                        #endif
1991   2          }else {
1992   2              SetRegBits(REG_I2C_SET, I2C_ADDR_WORD_WIDE);
1993   2              WriteReg(REG_I2C_DEV_ID, bEEPROMID);
1994   2          }
1995   1          // Dummy read 0x101
1996   1          WriteReg(REG_I2C_ADDRL, 0x1);
1997   1          WriteReg(REG_I2C_ADDRH, 0x1);
1998   1          WriteReg(REG_I2C_LENG_L, 0x1);
1999   1          WriteReg(REG_I2C_LENG_H, 0x0);
2000   1          SetRegBits(REG_I2C_STATUS, ID_PHASE_ST);
2001   1          WriteReg(REG_I2C_CTRL, READ_TRANSFER);
2002   1          do{
2003   2              if(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY){
2004   3                  i++;
2005   3                  Delay10US(1);
2006   3              }else{
2007   3                  break;
2008   3              }
2009   2          }while(i<3);
2010   1          if((ReadReg(REG_I2C_STATUS) & READ_ST_MASK)){  //I2C NACK status
2011   2              return FALSE;
2012   2          }
2013   1          return TRUE;
2014   1      }
2015          /*
2016          void CheckEEPROMI2CDevID(void)
2017          {
2018              // check A2 first
2019              BYTE data i;   //__
2020              WriteReg(REG_I2C_DEV_ID, 0xA2);
2021              // issue current read and check status
2022              WriteReg(REG_I2C_LENG_L, 0x1);
2023               WriteReg(REG_I2C_LENG_H, 0x0);             
2024              // clear status
2025              SetRegBits(REG_I2C_STATUS, ID_PHASE_ST | ADDR_PHASE_ST | DATA_PHASE_ST);
2026              WriteReg(REG_I2C_CTRL, READ_TRANSFER);
2027              i = 20;
2028              
2029              while(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY){
2030                  i--;
2031                  Delay10US(1);
2032                  if(i==0){
2033                      break;
2034                  }
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 34  

2035              }
2036              if(ReadReg(REG_I2C_STATUS) & 0x3){  //I2C ID NACK status
2037                  // A2 ID nak, device ID is A0
2038                  bEEPROMID = 0xA0;
2039                      
2040              }else{
2041                  // A2 ID is not nak, device is A2
2042                  // UartString("a2 not nak");
2043                  // A2 ID will not be nak when EEPROM is 2K, 1K, 512 bytes
2044                  // However ap or header information field will identify correct EEPROM type
2045                  bEEPROMID = 0xA2;
2046              }
2047          }
2048          */
2049          #ifdef OTPFUNENABLE
2050          //must be in the OTP R/W mode
2051          BYTE OTPWriteData(WORD wAddr,BYTE bXferLength,BYTE* pbData)
2052          {
2053   1              BYTE data i;//__
2054   1      
2055   1              I2CwAddr = wAddr;       //used to reduce data utility
2056   1              I2CLen = bXferLength;
2057   1              I2CpData = pbData;
2058   1              
2059   1              if((!I2CLen) || (I2CLen > 32)){
2060   2                      return FALSE;
2061   2              }
2062   1      #if 0    
                      OTP_ROMEnable(FALSE);  //enter OTP Read Write mode
                      //Set Write Control bit
                      ClrRegBits(REG_OTP_CTRL, (POWER_W|SET_PTM|DISEN_OTPCHIP));
                  ClrRegBits(REG_GPIO1_DATA,GPIO7_BIT);        //__ debug otp power
                      SetRegBits(REG_OTP_CTRL,EN_OUTPUT|OTPPTM_Standby);
                      //ClrRegBits(REG_OTP_CTRL, DISEN_OTPCHIP);
                      SetRegBits(REG_OTP_CTRL, POWER_W);
                  SetRegBits(REG_GPIO1_DATA,GPIO7_BIT);        //__ debug otp power
                      //holding 10ns
              
                      Delay1MS(1);
                      
                      SetRegBits(REG_OTP_CTRL, OTPPTM_Write);
              
                      Delay1MS(1);
                      //holding 20ns
              #endif
2080   1              //set Addr
2081   1              WriteReg(REG_OTP_ADDRL, LoByteOfWord(I2CwAddr));
2082   1              WriteReg(REG_OTP_ADDRH, HiByteOfWord(I2CwAddr));
2083   1      
2084   1              //Set Data
2085   1              for(i=0; i< I2CLen; i++)
2086   1              {
2087   2                       ReadReg(REG_OTP_DATA)=I2CpData[i];
2088   2                       while((ReadReg(REG_OTP_WSTATUS)&ON_programing));
2089   2              }
2090   1      #if 0   
                      SetRegBits(REG_OTP_CTRL, DISEN_OTPCHIP);
                      
                      //holding 10us
                      Delay10US(1);
                      ClrRegBits(REG_OTP_CTRL, POWER_W);
                  ClrRegBits(REG_GPIO1_DATA,GPIO7_BIT);        //__ debug otp power
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 35  

                      Delay1MS(1);
              
                      //holding 10ns
                      ClrRegBits(REG_OTP_CTRL, SET_PTM);
              
                      ClrRegBits(REG_OTP_CTRL,DISEN_OTPCHIP);
              
                      ClrRegBits(REG_OTP_CTRL,EN_OUTPUT);
              
                      
              
                      if((!xExFWExist)&&(!xFWPartialLoad))
                              OTP_ROMEnable(TRUE);  //Transf OTP to code
              #endif
2111   1              return TRUE;
2112   1      }
2113          
2114          void OTPWriteEnable()
2115          {
2116   1              OTP_ROMEnable(FALSE);  //enter OTP Read Write mode
2117   1      
2118   1          //Initial State
2119   1          SetRegBits(REG_OTP_CTRL, DISEN_OTPCHIP|EN_OUTPUT);
2120   1          
2121   1              ClrRegBits(REG_OTP_CTRL, (POWER_W|SET_PTM|DISEN_OTPCHIP));
2122   1              SetRegBits(REG_OTP_CTRL,(EN_OUTPUT|OTPPTM_Standby));
2123   1              //ClrRegBits(REG_OTP_CTRL, DISEN_OTPCHIP);
2124   1              SetRegBits(REG_OTP_CTRL, POWER_W);
2125   1              //holding 10ns
2126   1      
2127   1              Delay1MS(1);
2128   1              
2129   1              SetRegBits(REG_OTP_CTRL, OTPPTM_Write);
2130   1      
2131   1              Delay1MS(1);
2132   1      }
2133          
2134          void OTPWriteDisable()
2135          {
2136   1          SetRegBits(REG_OTP_CTRL, DISEN_OTPCHIP);
2137   1              
2138   1              //holding 10us
2139   1              Delay10US(1);
2140   1              ClrRegBits(REG_OTP_CTRL, POWER_W);
2141   1              Delay1MS(1);
2142   1      
2143   1              //holding 10ns
2144   1              ClrRegBits(REG_OTP_CTRL, SET_PTM);
2145   1      
2146   1              //ClrRegBits(REG_OTP_CTRL,DISEN_OTPCHIP);
2147   1      
2148   1              //ClrRegBits(REG_OTP_CTRL,EN_OUTPUT);
2149   1      
2150   1              
2151   1         // OTP_ROMEnable(FALSE);  
2152   1              //if((!xExFWExist)&&(!xFWPartialLoad))
2153   1              //      OTP_ROMEnable(TRUE);  //Transf OTP to code
2154   1      
2155   1      }
2156          
2157          BYTE OTPReadData(WORD wAddr,BYTE bXferLength,BYTE* pbData)
2158          {
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 36  

2159   1              BYTE data i;//__
2160   1              
2161   1              I2CwAddr = wAddr;       //used to reduce data utility
2162   1          I2CLen = bXferLength;
2163   1              I2CpData = pbData;
2164   1              
2165   1              if((!I2CLen) || (I2CLen > 32)){
2166   2                      return FALSE;
2167   2              }
2168   1              OTP_ROMEnable(FALSE);   //Transf OTP to be RAM
2169   1      
2170   1              //Initial State
2171   1              ClrRegBits(REG_OTP_CTRL, (POWER_W|SET_PTM|DISEN_OTPCHIP|EN_OUTPUT));
2172   1          //Set Read Control bit
2173   1              SetRegBits(REG_OTP_CTRL,OTPPTM_Read);
2174   1              //ClrRegBits(REG_OTP_CTRL,EN_OUTPUT);
2175   1              //ClrRegBits(REG_OTP_CTRL,DISEN_OTPCHIP);
2176   1      
2177   1              //Delay 300ns
2178   1              _nop_();        //0.083us
2179   1              _nop_(); _nop_();        _nop_(); _nop_();      
2180   1              //set Addr
2181   1      
2182   1              //read data
2183   1              for(i=0; i< I2CLen; i++){
2184   2                      WriteReg(REG_OTP_ADDRL, LoByteOfWord(I2CwAddr));
2185   2                      WriteReg(REG_OTP_ADDRH, HiByteOfWord(I2CwAddr));
2186   2      
2187   2                       //I2CpData[i] = ReadReg(REG_OTP_DATA);   //pbIICBuf[i];
2188   2                       pbIICBuf[i] = ReadReg(REG_OTP_DATA);
2189   2                       
2190   2                       I2CwAddr++;
2191   2              }               
2192   1      
2193   1          //Set OTPCE and OTPOE
2194   1          SetRegBits(REG_OTP_CTRL,DISEN_OTPCHIP|EN_OUTPUT);
2195   1      
2196   1              if(I2CpData!=pbIICBuf)
2197   1                      memcpy(I2CpData, pbIICBuf, I2CLen);
2198   1      
2199   1              //SetRegBits(REG_OTP_CTRL, DISEN_OTPCHIP);
2200   1      
2201   1              //if((!xExFWExist)&& (!xFWPartialLoad))
2202   1              //      OTP_ROMEnable(TRUE);  //Transf OTP to code
2203   1      
2204   1              return TRUE;
2205   1      }
2206          
2207          #endif
2208          
2209          // Prodcut protection mechanism
2210          // 2008,12,09 Lear Hsieh
2211          void CheckProtection(void)
2212          {
2213   1          // clear check state variable, for protection concern, just give them meanless variable name
2214   1          //xCheckState01 = FALSE;
2215   1          xBDGP13 = 0;
2216   1          xBDGP16 = 0;
2217   1         // xCheckState03 = FALSE;
2218   1          // Check GPIO 14:  0: for Taiwan, AU3831, 1: for China, AU3881
2219   1          // Program GPIO 13 to input mode
2220   1          Reg[REG_GPIO2_DIR] &=0xDF; // Set GPIO 13 to input mode  
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 37  

2221   1          // pull down GPIO 13,
2222   1          Reg[REG_GPIO2_PD] |= 0x20;
2223   1          // read status, if low, keep pull down
2224   1      
2225   1          Reg[OPTION_GP] = GP16PD;  //dir to be input 
2226   1        
2227   1              Delay10US(10);  
2228   1      
2229   1          if(Reg[REG_GPIO2_DATA] & GPIO13_BIT){
2230   2              xBDGP13 = 1;                    
2231   2              Reg[REG_GPIO2_PD] &= 0xDF;
2232   2          }
2233   1      
2234   1          if(Reg[OPTION_GP] & GP16DAT){
2235   2              xBDGP16 = 1;
2236   2              // GP16 pull high
2237   2              ClrRegBits(OPTION_GP, GP16PD);    
2238   2          }
2239   1      }
2240          
2241          //=========================================================//
2242          //===== For New FW =====//
2243          //=========================================================//
2244          BYTE I2CEEPROMDirRAM(WORD wAddr,WORD wXferLength,BYTE bDirFlag)
2245          {
2246   1              I2CwAddr=wXferLength;
2247   1              I2CLen = LoByteOfWord(I2CwAddr);
2248   1              I2CTemp = HiByteOfWord(I2CwAddr);
2249   1              I2CwAddr = wAddr;  //address in EEPROM
2250   1              bI2CID = bDirFlag;      //check whether to load to Upgraded RAM directly
2251   1      
2252   1              //__ For Debug          
2253   1              /*if(Reg[USB_CLK_CTL]&ENABLE_USB_CLK_OFF)
2254   1              {       
2255   1                      //ClrRegBits(USB_CLK_CTL, ENABLE_USB_CLK_OFF);
2256   1                      //UARTString("The Clk is closed");
2257   1                      UARTString("=====");
2258   1              }
2259   1              
2260   1              if(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY)
2261   1              {       UARTString("I2CRead Dir Busy");
2262   1                      //UARTWord2Hex(I2CwAddr);
2263   1                      //UARTByte2Hex(I2CLen);
2264   1                      //UARTByte2Hex(I2CTemp);
2265   1                      //UARTByte2Hex(I2CComplete);
2266   1              }*/
2267   1              
2268   1      #ifndef DISABLE_SPI    
2269   1              if(xSPIEnable == FALSE){
2270   2      #endif
2271   2              //      I2CRetry = 0;
2272   2              //      do{
2273   2                               Reg[REG_I2C_SET] = (bIICClock|I2C_SEQ_MODE);//(I2C_CLK_400K|I2C_SEQ_MODE);
2274   2      
2275   2              //              if(I2CComplete)
2276   2                              {       SetRegBits(REG_I2C_SET, I2C_DIR2RAM); //enable to up ram
2277   3                              }
2278   2                      
2279   2                              if ( bEEPromKBits<=16 ) {
2280   3                                      ClrRegBits(REG_I2C_SET, I2C_ADDR_WORD_WIDE);
2281   3                                      // Don't care about bEEROMID
2282   3                                      WriteReg(REG_I2C_DEV_ID, I2C_EEPROM_DEVICE_ID|(((I2CwAddr>>8)&0x07)<<1));
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 38  

2283   3                              }else {
2284   3                                      SetRegBits(REG_I2C_SET, I2C_ADDR_WORD_WIDE);
2285   3                                      WriteReg(REG_I2C_DEV_ID, bEEPROMID);
2286   3                              }
2287   2                              WriteReg(REG_I2C_ADDRL, (BYTE)I2CwAddr);
2288   2                              WriteReg(REG_I2C_ADDRH, (BYTE)(I2CwAddr >> 8));
2289   2                              WriteReg(REG_I2C_LENG_L, I2CLen);
2290   2                              WriteReg(REG_I2C_LENG_H, I2CTemp);
2291   2                              SetRegBits(REG_I2C_STATUS, ID_PHASE_ST | ADDR_PHASE_ST | DATA_PHASE_ST);
2292   2                              WriteReg(REG_I2C_CTRL, READ_TRANSFER);
2293   2      
2294   2                      //      if(I2CComplete)
2295   2                              {       //Asychronous Read FW
2296   3                                      return TRUE; 
2297   3                              }
2298   2                      //      while(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY);
2299   2                      //      ClrRegBits(REG_I2C_SET, I2C_DIR2RAM|I2C_SEQ_MODE);
2300   2                      //      if((ReadReg(REG_I2C_STATUS) & READ_ST_MASK)){  //I2C NACK status
2301   2                      //              if(I2CRetry>8){
2302   2                      //                      return FALSE;
2303   2                      //              }                                        
2304   2                      //      }else{
2305   2                      //              break;
2306   2                      //      }
2307   2                      //      Delay10US(5);
2308   2                      //      I2CRetry++;
2309   2              //      }while(1);                
2310   2      #ifndef DISABLE_SPI             
2311   2              }
2312   1              else{
2313   2                      // SPI flash
2314   2                    SetRegBits(REG_CRC8CTRL,EN_CRCPENDING );//pending CRC calculate
2315   2      
2316   2                    if((CheckSPIRdyStatus() & RDY_BIT0) != 0){
2317   3                              return FALSE;
2318   3                      }
2319   2      
2320   2                  ClrRegBits(REG_CRC8CTRL, EN_CRCPENDING);  //continue CRC calculate
2321   2      
2322   2                      if(bI2CID)  //when replace fw
2323   2                      {       SetRegBits(REG_I2C_SET, I2C_DIR2RAM); //enable to up ram
2324   3                      }
2325   2                      Reg[REG_SPI_CTL] = SPI_5MHZ|SPI_ENABLE;// clock 5MHz, enable SPI
2326   2                      Reg[REG_SPI_PAGE] = 0x2; // Set 2 page
2327   2                      // Write instrcution and address to buffer
2328   2                      pbIICBuf[0x0] = READ_CMD;
2329   2                      pbIICBuf[0x1] =  0x0;
2330   2                      pbIICBuf[0x2] = (BYTE)(I2CwAddr >> 8);
2331   2                      pbIICBuf[0x3] = (BYTE)(I2CwAddr);
2332   2                      Reg[REG_SPI_WLEN] = 0x4; // Set write length to 4 bytes
2333   2                      Reg[REG_SPI_CTL] = (SPI_3MHZ|SPI_ENABLE|SPI_TRIGGER);
2334   2                      while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
2335   2                      Reg[REG_I2C_LENG_L] = I2CLen;
2336   2                      Reg[REG_I2C_LENG_H] = I2CTemp;  
2337   2                      Reg[REG_SPI_CTL] = SPI_3MHZ|SPI_READONLY|SPI_ENABLE|SPI_READ|SPI_TRIGGER;// Set SPI read mode, read only
             - and trigger
2338   2      
2339   2                      if(bI2CID)
2340   2                      {       //Asychronous Read FW
2341   3                                      return TRUE; 
2342   3                      }
2343   2      
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 39  

2344   2                      while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
2345   2                      ClrRegBits(REG_SPI_CTL, SPI_ENABLE);    // enable I2C again
2346   2                      ClrRegBits(REG_I2C_SET, I2C_DIR2RAM);  //disable direct to up ram
2347   2              }
2348   1      #endif  // DISABLE_SPI    
2349   1              
2350   1              return TRUE;
2351   1      }
2352          
2353          
2354          
2355          //Common Segment or Setting File in EEPROM
2356          BOOLEAN  LoadToUpgradedRAM( WORD data wAddrFrom,  //addr in EEPROM
2357                                                                                  WORD  data wAddrTo,     //addr in Upgraded RAM
2358                                                                                  WORD  data wLen)        
2359          {
2360   1              static WORD data wADDRtoRAM;
2361   1              static WORD data wTransLen;
2362   1      
2363   1              wADDRtoRAM=wAddrTo;
2364   1              wTransLen=wLen;
2365   1              I2CwAddr = wAddrFrom;
2366   1        
2367   1              //===== Enable CRC calculate =====//
2368   1              WriteReg(REG_CRC8LEN_L, LoByteOfWord(wTransLen));
2369   1          WriteReg(REG_CRC8LEN_H, HiByteOfWord(wTransLen));
2370   1          WriteReg(REG_CRC8CTRL,EN_CRC8|EN_CRC8MINLEN2 );     
2371   1      
2372   1              //===== Read Data =====//
2373   1              Reg[REG_ROMSEG_SHIFTTO_L]=LoByteOfWord(wADDRtoRAM);  //Address in Upgraded RAM
2374   1              Reg[REG_ROMSEG_SHIFTTO_H]=HiByteOfWord(wADDRtoRAM);
2375   1      
2376   1          bI2CMode=0;// Initial Error count, temporal used for error transfer counter
2377   1              do{
2378   2                      if((!I2CEEPROMDirRAM(I2CwAddr,wTransLen,TRUE))||(bI2CMode > 8))
2379   2                      {       return FALSE; }
2380   2              }while(!WaitPartialFWLoad());   //if error , bI2CMode++
2381   1              
2382   1              if(bRequestType !=0xFF)  
2383   1              {       //need to check CRC     
2384   2                      if((ReadReg(REG_CRC8DATAOUT)!=pbXFWCode[wADDRtoRAM+wTransLen-1])
2385   2                         ||(ReadReg(REG_CRC8DATAOUT_H)!=pbXFWCode[wADDRtoRAM+wTransLen-2])
2386   2                    ) 
2387   2              {  //CRC8 Failed
2388   3                     #ifdef DEBUG_CRC_CALCUL  
                                              UARTString("LoadEEPROM Failed");
                                              UARTByte2Hex(ReadReg(REG_CRC8DATAOUT));
                              UARTByte2Hex(pbXFWCode[wADDRtoRAM+wTransLen-1]);
                                              UARTWord2Hex(I2CwAddr);
                                              UARTWord2Hex(wADDRtoRAM);
                                              UARTWord2Hex(wTransLen);                
                                         #endif       
2396   3                         return FALSE;
2397   3                      }
2398   2              }
2399   1              return TRUE;
2400   1              
2401   1      
2402   1      }
2403          
2404          
2405          void MainFP2Dummy() //dummy main loop Ex function point
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 40  

2406          {
2407   1              pfExternalReset=inExternalReset;
2408   1            pfControlInterruptRoutine=inControlInterruptRoutine;
2409   1              pfSensorExtenUnitCtrl=inSensorExtenUnitCtrl;
2410   1              pfExStateFunction=inExStateFunction;
2411   1          //Note! the function point called in Internal FW must be dummy
2412   1          pfExMainHookFunc                    = ExMainHookFunc;
2413   1          pfISROfTime1                = ISROfTime1;
2414   1      }
2415          
2416          BYTE WaitPartialFWLoad(void)// used for loading partial FW
2417          {
2418   1              #ifndef DISABLE_SPI    
2419   1              if(xSPIEnable == FALSE){
2420   2              #endif
2421   2                      while(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY);
2422   2                      ClrRegBits(REG_I2C_SET, I2C_DIR2RAM|I2C_SEQ_MODE);
2423   2                      if((ReadReg(REG_I2C_STATUS) & READ_ST_MASK)&&(xExFWExist == TRUE ))
2424   2                      {  //I2C status Error, just for EEPROM
2425   3                        if(xFWPartialLoad)
2426   3                {  //When partial loading is enable
2427   4                              if(bInSegCount>0)
2428   4                              {       bInSegCount--;
2429   5                                  //clear I2C status register
2430   5                       Reg[REG_I2C_STATUS] = 0xFF;
2431   5                      }else
2432   4                      {
2433   5                         bFWLoadState=FWS_NORM; 
2434   5                  }
2435   4                  
2436   4                              if(bFWLoadState==FWS_END)
2437   4                                      bFWLoadState=FWS_LOADING;
2438   4                  
2439   4                        }  
2440   3                bI2CMode++; //for transf err count
2441   3                              return FALSE;
2442   3                      }
2443   2                      
2444   2              #ifndef DISABLE_SPI             
2445   2              }else{
2446   2                      while(ReadReg(REG_SPI_CTL)&SPI_TRIGGER);
2447   2                      ClrRegBits(REG_SPI_CTL, SPI_ENABLE);    // enable I2C again
2448   2                      ClrRegBits(REG_I2C_SET, I2C_DIR2RAM);
2449   2              }
2450   1              #endif
2451   1      
2452   1              return TRUE;
2453   1      }
2454          
2455          
2456          void ReplaceFW(BYTE bSeg)
2457          {
2458   1              WORD data wTransfLen;
2459   1              WORD data wAddrtmp;
2460   1      
2461   1              if(xFWPartialLoad  &&(bFWLoadState!=FWS_END))
2462   1              {//Partial FW enable    
2463   2                      if(bFWLoadState==FWS_NORM)      //Start to upgrade
2464   2                      {       
2465   3                              if(bPartialSeg==bSeg)   //skip when the same segment
2466   3                              {//UARTString("The same segment");
2467   4                                      bFWLoadState=FWS_END;
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 41  

2468   4                                      return;
2469   4                              }          
2470   3                  
2471   3                              MainFP2Dummy();          //dummy main loop Ex function point
2472   3                              FWAppendCodeDisable();  //Transf Upgraded ROM to Upgraded RAM           
2473   3                              _nop_();_nop_();_nop_();        
2474   3                              _nop_();_nop_();_nop_();
2475   3                              
2476   3                              bFWLoadState=FWS_LOADING;
2477   3                              bInSegCount=0;
2478   3                              Reg[REG_STORRE_CRC]=0xFF; // for normal crc calculate initial value
2479   3                              Reg[REG_STORRE_CRC_H]=0xFF; // for normal crc calculate
2480   3                              //WriteReg(REG_CRC8CTRL, 0x00);
2481   3      
2482   3                  //initialize transfer error count
2483   3                              bI2CMode=0;                         
2484   3                      }else if(xExFWExist == TRUE )
2485   2                      {       //need to check whether load end of this small seg              
2486   3                              #ifndef DISABLE_SPI    
2487   3                              if(xSPIEnable == FALSE){
2488   4                              #endif
2489   4                                      if(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY)
2490   4                                      {       return; //continue in load FW 
2491   5                                      }else
2492   4                                      {       if((ReadReg(REG_I2C_STATUS) & READ_ST_MASK))
2493   5                                              {  //I2C status Error
2494   6                                                      //UARTString("I2C status error");
2495   6                                                      bInSegCount--;
2496   6                                                      if(bInSegCount==0)
2497   6                                                      {       bFWLoadState=FWS_NORM;
2498   7                                                      }
2499   6                              //check error count of seg transfer
2500   6                              bI2CMode++;
2501   6                              if(bI2CMode >8)
2502   6                              {//for ErrHandle to reset device
2503   7                                //  UARTString("I2C Transf Err");
2504   7                                  bErrCountSEGFW=9;  
2505   7                                  return;
2506   7                              }                     
2507   6                                              }else
2508   5                                              {//transf success
2509   6                                                  bI2CMode=0;
2510   6                          }
2511   5                                      }
2512   4                              #ifndef DISABLE_SPI             
2513   4                              }else{
2514   4                                      if(ReadReg(REG_SPI_CTL)&SPI_TRIGGER)
2515   4                                              return;
2516   4                              }
2517   3                              #endif
2518   3                      }
2519   2                      
2520   2                      //===== The addr in Upgraded RAM =====//
2521   2                      wTransfLen= PLFWSize*bInSegCount; //temp used for calculate
2522   2      
2523   2                      // Address: memory code move to
2524   2                      wAddrtmp= PartialMemSet.wPartialShiftAddr+wTransfLen;
2525   2                      Reg[REG_ROMSEG_SHIFTTO_L]=LoByteOfWord( wAddrtmp);
2526   2                      Reg[REG_ROMSEG_SHIFTTO_H]=HiByteOfWord( wAddrtmp);
2527   2      
2528   2                      //===== The Addr in EEPROM/OTP  =====//
2529   2                      //Addr from EEPROM/OTP  
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 42  

2530   2                      I2CwAddr=PartialMemSet.ExSeg[bSeg].wSegAddr+wTransfLen;
2531   2      
2532   2                      
2533   2                      //===== The Transfer Length =====//                             
2534   2                      if(PartialMemSet.ExSeg[bSeg].wSegLen > (wTransfLen+PLFWSize+1))// PLFWSize*(bInSegCount+1)
2535   2                      {       
2536   3                              wTransfLen=PLFWSize;
2537   3                              //WriteReg(REG_CRC8CTRL, EN_LOADCRC|EN_STORECRC);
2538   3                      }else
2539   2                      {       //Last Transf   
2540   3                              wTransfLen=PartialMemSet.ExSeg[bSeg].wSegLen-wTransfLen; 
2541   3      
2542   3                              //WriteReg(REG_CRC8CTRL, EN_LOADCRC|EN_CRC8MINLEN);
2543   3                              //UARTString("Last Transfer");
2544   3                              bPartialSeg=bSeg;
2545   3                              bFWLoadState=FWS_END;
2546   3                              // Address: Shift from 
2547   3                              Reg[REG_ROMSEG_SHIFTFROM_L]=0x00;
2548   3                              Reg[REG_ROMSEG_SHIFTFROM_H]=0x80+(0x10*bSeg);                           
2549   3                      }
2550   2      
2551   2                      //===== Enable CRC calculate =====//
2552   2                      WriteReg(REG_CRC8LEN_L, LoByteOfWord(wTransfLen));
2553   2                      WriteReg(REG_CRC8LEN_H, HiByteOfWord(wTransfLen));
2554   2      
2555   2                      //===== Transfer Data =====//
2556   2                 if(bFWLoadState==FWS_END) //last transfer
2557   2                                I2CRetry=(EN_LOADCRC|EN_CRC8MINLEN2|EN_CRC8);
2558   2                         else
2559   2                                I2CRetry=(EN_LOADCRC|EN_STORECRC|EN_CRC8);
2560   2              //I2CRetry is temporally stored CRC set value
2561   2              
2562   2                      //===== Transfer Data =====//
2563   2                      if(xExFWExist)
2564   2                      {//Load from EEPROM
2565   3                          
2566   3                  WriteReg(REG_CRC8CTRL, I2CRetry); //Enable CRC
2567   3                      
2568   3                              if(I2CEEPROMDirRAM(I2CwAddr,wTransfLen,TRUE))
2569   3                              {       //transfer success
2570   4                                      //UARTWord2Hex(I2CwAddr);
2571   4                                      //UARTWord2Hex(ReadReg(REG_CRC8DATAOUT));
2572   4                                      bInSegCount++;
2573   4                              }
2574   3                      }
2575   2                      #ifdef OTPFUNENABLE
2576   2                      else
2577   2                      {//Load from OTP
2578   3                              OTPROMAddrUpdate(0x0000);  //OTP to be code from 0x8000
2579   3      
2580   3                  WriteReg(REG_CRC8CTRL, EN_OTPCRC|I2CRetry);
2581   3                              
2582   3                              //wAddrtmp=Reg[REG_ROMSEG_SHIFTTO_L]|(Reg[REG_ROMSEG_SHIFTTO_H]<<8);
2583   3      
2584   3                              memcpy(&pbXFWCode[wAddrtmp],
2585   3                                      &pCode((I2CwAddr+UPGRADE_RAM_START_ADDR)),
2586   3                                      wTransfLen);
2587   3      
2588   3                              bInSegCount++;
2589   3                              OTP_ROMEnable(FALSE);  //Transf OTP to be RAM   
2590   3                      }
2591   2                      #endif
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 43  

2592   2                      
2593   2                      //FWAppendCodeEnable(); //after replacing mem
2594   2                 
2595   2              }else
2596   1              {//Don't support  FW partial loading
2597   2                      bFWLoadState=FWS_END;
2598   2              }       
2599   1      }
2600          
2601          BOOLEAN isMEMReplacedEnd(void)
2602          {
2603   1              if(xFWPartialLoad)
2604   1              {//Partial FW enable, Load End  
2605   2                      if(bFWLoadState!=FWS_END) //wrong state
2606   2                              return FALSE;
2607   2      
2608   2                      if(Reg[REG_CODE_SPACE]&APPENDANT_RAM)//for the same bPartialSeg
2609   2                      {       bFWLoadState=FWS_NORM;
2610   3                              return TRUE;
2611   3                      }
2612   2      
2613   2                      //===== Check Load End =====//
2614   2                      #ifndef DISABLE_SPI    
2615   2                      if(xSPIEnable == FALSE){
2616   3                      #endif
2617   3                              if(ReadReg(REG_I2C_CTRL) & TRANSFER_BUSY)
2618   3                              {       //UARTString("Last send not end");
2619   4                                      return FALSE;   //not end in load FW 
2620   4                              }else
2621   3                              {       ClrRegBits(REG_I2C_SET, I2C_DIR2RAM|I2C_SEQ_MODE);
2622   4                                      if((ReadReg(REG_I2C_STATUS) & READ_ST_MASK)&&(xExFWExist == TRUE ))
2623   4                                      {  //I2C status Error
2624   5                                              //UARTString("I2C status error");                                                                               
2625   5                          bFWLoadState=FWS_LOADING; //to  enter ReplaceFW()
2626   5                          //Mask by Eric Lee, 20091009
2627   5                          // bInSegCount reduce in ReplaceFW() when check I2C status err
2628   5                          //bInSegCount--;  
2629   5                                              return FALSE;
2630   5                                      }       
2631   4                      //success
2632   4                      bI2CMode=0;
2633   4                              }
2634   3                      #ifndef DISABLE_SPI             
2635   3                      }else{
2636   3                              if(ReadReg(REG_SPI_CTL)&SPI_TRIGGER)
2637   3                              {       return FALSE;
2638   4                              }else
2639   3                              {       ClrRegBits(REG_SPI_CTL, SPI_ENABLE);    // enable I2C again
2640   4                                      ClrRegBits(REG_I2C_SET, I2C_DIR2RAM);
2641   4                              }
2642   3                      }
2643   2                      #endif
2644   2                      
2645   2                      //===== Transf RAM to ROM =====//
2646   2                      FWAppendCodeEnable();           
2647   2                       _nop_();_nop_();_nop_();
2648   2                       _nop_();_nop_();_nop_();
2649   2      
2650   2                      bFWLoadState=FWS_NORM;  
2651   2      
2652   2                      //Descide shift Addr of ROM
2653   2                      Reg[REG_ROMSEG_SHIFTTO_L]=LoByteOfWord(  PartialMemSet.wPartialShiftAddr);
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 44  

2654   2                      Reg[REG_ROMSEG_SHIFTTO_H]=HiByteOfWord(  PartialMemSet.wPartialShiftAddr);              
2655   2      
2656   2              //I2CwAddr is temporally used to reduce calculation
2657   2               I2CwAddr=UPGRADE_RAM_START_ADDR+(bPartialSeg*0x1000)+PartialMemSet.ExSeg[bPartialSeg].wSegLen;   
             -      
2658   2      
2659   2                  if((ReadReg(REG_CRC8DATAOUT)!=pCode(I2CwAddr-1))
2660   2                      ||(ReadReg(REG_CRC8DATAOUT_H)!=pCode(I2CwAddr-2))
2661   2                                )
2662   2                              {       //CRC failed
2663   3                                      #ifdef DEBUG_CRC_CALCUL    
                                                              UARTString("RP_FW Failed");
                                                              UARTByte2Hex(ReadReg(REG_CRC8DATAOUT));
                                      UARTByte2Hex(pCode(I2CwAddr-1));
                                                              UARTWord2Hex((bPartialSeg*0x1000)+
                                                                                       PartialMemSet.ExSeg[bPartialSeg].wSegLen-1);
                                                              UARTByte2Hex(pCode(  UPGRADE_RAM_START_ADDR+(bPartialSeg*0x1000)+
                                                                                       PartialMemSet.ExSeg[bPartialSeg].wSegLen-1));
                                                      #endif  
2672   3                                      bPartialSeg=SEG_COMMON;
2673   3                      bErrCountSEGFW++;    
2674   3                      //UARTString("SEG CRC Failed");
2675   3                      //UARTByte2Hex(bErrCountSEGFW);                
2676   3                                      return FALSE;   
2677   3                              }               
2678   2                  bErrCountSEGFW=0;   //Load SegFW successfully. Reset Error count
2679   2      
2680   2                      //UARTString("LoadEnd");                
2681   2                      //UARTByte2Hex(Reg[REG_ROMSEG_SHIFTTO_L]);
2682   2                      //UARTByte2Hex(Reg[REG_ROMSEG_SHIFTTO_H]);
2683   2                      //UARTByte2Hex(Reg[REG_ROMSEG_SHIFTFROM_L]);
2684   2                      //UARTByte2Hex(Reg[REG_ROMSEG_SHIFTFROM_H]);
2685   2                      //UARTWord2Hex(bPartialSeg);
2686   2                      //UARTWord2Hex(pCodeW(0x8000+0x1000*bPartialSeg));      
2687   2      
2688   2                      //===== initial each segment Init =====//
2689   2                      cpfExternalInit();              
2690   2              }else
2691   1              {       //Don't support  FW partial loading
2692   2                      bFWLoadState=FWS_NORM;
2693   2              }
2694   1              
2695   1              return TRUE;
2696   1      }
2697          
2698          void ErrHandleSEGFW(void)
2699          {
2700   1          if(bErrCountSEGFW >5 )
2701   1          {
2702   2              bErrCountSEGFW=0; //reset Err count
2703   2              
2704   2              //Set Partial FW Err Flag
2705   2              //EEPROM Partial Loading failed            
2706   2              SetRegBits(REG_MCU_CLK,ERR_EEPROM_SEGFW);
2707   2              if(!xExFWExist)
2708   2              {   //OTP Partial Loading failed
2709   3                   SetRegBits(REG_MCU_CLK,ERR_OTP_SEGFW);
2710   3              }
2711   2              //soft Reset
2712   2              SetRegBits(REG_MCU_CLK, SOFT_RESET);
2713   2          }
2714   1      }
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 45  

2715          
2716          //Patch for below functions called when segment FW is loading
2717          //Added Eric Lee,20100330
2718          BYTE EX_CallBackFunction(BYTE bFunSel)
2719          {
2720   1          BYTE data bRet=FALSE;
2721   1          
2722   1          ExCallBackFun_ToROM();
2723   1      
2724   1          switch(bFunSel)
2725   1          {
2726   2              case FUNSEL_SetUpHook:
2727   2                  bRet=pfExSetUpHookFunc();
2728   2                  break;
2729   2              case FUNSEL_DeepSetUpHook:
2730   2                  bRet=pfDeepSetupHook();
2731   2                  break;
2732   2              case FUNSEL_GetString:
2733   2                  bRet=pfHookGetStringDesc();
2734   2                  break;
2735   2              case FUNSEL_HIDConfig:
2736   2                  bRet=pfUSBHIDConfigDesc();
2737   2                  break;
2738   2              case FUNSEL_EnableDMIC:
2739   2                  bRet=pfAUEnableDMIC();
2740   2                  break;
2741   2              case FUNSEL_EnableDMIC2:
2742   2                  bRet=pfAUEnableDMIC2();
2743   2                  break;
2744   2              case FUNSEL_DisableDMIC:
2745   2                  bRet=pfAUDisableDMIC();
2746   2                  break;
2747   2              case FUNSEL_HIDExtenUnitCtrl:
2748   2                  pfHIDExtenUnitCtrl();
2749   2                  break;
2750   2              default:
2751   2                  break;    
2752   2          }
2753   1       
2754   1          ExCallBackFun_ToRAM();
2755   1      
2756   1          return bRet;
2757   1      }
2758          
2759          void ExCallBackFun_ToROM(void)
2760          {
2761   1          if(bFWLoadState!=FWS_NORM)
2762   1          {//Transfer RAM to be ROM
2763   2            WaitPartialFWLoad();
2764   2            FWAppendCodeEnable();             
2765   2                _nop_();_nop_();_nop_();
2766   2                _nop_();_nop_();_nop_(); 
2767   2      
2768   2            //To call Common Segment Patch Function
2769   2          }
2770   1      }
2771          void ExCallBackFun_ToRAM(void)
2772          {
2773   1          if(bFWLoadState!=FWS_NORM)
2774   1          {//Transfer ROM to be RAM
2775   2            FWAppendCodeDisable();  //Transf Upgraded ROM to Upgraded RAM             
2776   2                _nop_();_nop_();_nop_();      
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 46  

2777   2                _nop_();_nop_();_nop_();  
2778   2          }
2779   1      }
2780          
2781          #endif  //  #ifndef     __base_c__
2782          
2783          
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 47  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION DeviceReset (BEGIN)
                                           ; SOURCE LINE # 38
                                           ; SOURCE LINE # 39
                                           ; SOURCE LINE # 40
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#bRequestErrorCode
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 42
0005 120000      R     LCALL   RemovePrpSaveReq
                                           ; SOURCE LINE # 43
0008 900000      E     MOV     DPTR,#bPrpSaveMethod
000B E0                MOVX    A,@DPTR
000C 7002              JNZ     ?C0001
                                           ; SOURCE LINE # 44
                                           ; SOURCE LINE # 45
000E 8006              SJMP    ?C0431
0010         ?C0001:
                                           ; SOURCE LINE # 46
0010 120000      R     LCALL   PrpLoadFromEEPROM
0013 EF                MOV     A,R7
0014 7003              JNZ     ?C0002
                                           ; SOURCE LINE # 47
0016         ?C0431:
0016 120000      E     LCALL   GetVCControlDef
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
0019         ?C0002:
                                           ; SOURCE LINE # 52
0019 E4                CLR     A
001A F500        E     MOV     bFrameCount,A
001C         ?C0004:
                                           ; SOURCE LINE # 53
001C 7400        E     MOV     A,#LOW bExGamma
001E 2500        E     ADD     A,bFrameCount
0020 F582              MOV     DPL,A
0022 E4                CLR     A
0023 3400        E     ADDC    A,#HIGH bExGamma
0025 F583              MOV     DPH,A
0027 7480              MOV     A,#080H
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
002A 0500        E     INC     bFrameCount
002C E500        E     MOV     A,bFrameCount
002E B411EB            CJNE    A,#011H,?C0004
0031         ?C0005:
                                           ; SOURCE LINE # 55
0031 E4                CLR     A
0032 F500        E     MOV     bFrameCount,A
                                           ; SOURCE LINE # 56
0034 900000      E     MOV     DPTR,#bSusPrivTrigCnt
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 57
0038 F500        E     MOV     bVideoCtrlField,A
                                           ; SOURCE LINE # 58
003A F500        E     MOV     bStillImgField,A
                                           ; SOURCE LINE # 59
003C 7F45              MOV     R7,#045H
003E 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 60
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 48  

0041 E4                CLR     A
0042 FF                MOV     R7,A
0043 FE                MOV     R6,A
0044 120000      E     LCALL   _GetTab
0047 EF                MOV     A,R7
0048 6006              JZ      ?C0007
                                           ; SOURCE LINE # 61
004A D200        E     SETB    xSnapActive
                                           ; SOURCE LINE # 62
004C C200        E     CLR     xBtnState
                                           ; SOURCE LINE # 63
004E 8004              SJMP    ?C0008
0050         ?C0007:
                                           ; SOURCE LINE # 64
0050 C200        E     CLR     xSnapActive
                                           ; SOURCE LINE # 65
0052 D200        E     SETB    xBtnState
                                           ; SOURCE LINE # 66
0054         ?C0008:
                                           ; SOURCE LINE # 68
0054 7F4E              MOV     R7,#04EH
0056 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 69
0059 E4                CLR     A
005A FF                MOV     R7,A
005B FE                MOV     R6,A
005C 120000      E     LCALL   _GetTab
005F EF                MOV     A,R7
0060 6006              JZ      ?C0009
                                           ; SOURCE LINE # 70
0062 D200        E     SETB    xPrivActive
                                           ; SOURCE LINE # 71
0064 C200        E     CLR     xPrivBtnState
                                           ; SOURCE LINE # 72
0066 8004              SJMP    ?C0010
0068         ?C0009:
                                           ; SOURCE LINE # 73
0068 C200        E     CLR     xPrivActive
                                           ; SOURCE LINE # 74
006A D200        E     SETB    xPrivBtnState
                                           ; SOURCE LINE # 75
006C         ?C0010:
                                           ; SOURCE LINE # 76
006C C200        E     CLR     xSupportPrivacy
                                           ; SOURCE LINE # 77
006E C200        E     CLR     xPrivBtnToggle
                                           ; SOURCE LINE # 79
0070 E4                CLR     A
0071 F500        E     MOV     bFrameFlag,A
                                           ; SOURCE LINE # 80
0073 F500        E     MOV     bSetProperty1,A
                                           ; SOURCE LINE # 81
0075 F500        E     MOV     bSetProperty2,A
                                           ; SOURCE LINE # 82
0077 F500        E     MOV     bInt0State,A
                                           ; SOURCE LINE # 83
0079 F500        E     MOV     bRequestType,A
                                           ; SOURCE LINE # 84
007B F500        E     MOV     bRequest,A
                                           ; SOURCE LINE # 85
007D F500        E     MOV     wLength,A
007F F500        E     MOV     wLength+01H,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 49  

0081 F500        E     MOV     wIndex,A
0083 F500        E     MOV     wIndex+01H,A
0085 F500        E     MOV     wValue,A
0087 F500        E     MOV     wValue+01H,A
                                           ; SOURCE LINE # 86
0089 900000      E     MOV     DPTR,#bDeviceStatus
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 87
008D 900000      E     MOV     DPTR,#bEndpoint1Status
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 88
0091 900000      E     MOV     DPTR,#bEndpoint5Status
0094 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 89
0095 900000      E     MOV     DPTR,#bConfigValue
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 90
0099 900000      E     MOV     DPTR,#bAltSetting
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 91
009D 900000      E     MOV     DPTR,#bSucsTrigCnt
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 93
00A1 C200        E     CLR     xExtendTabMap
                                           ; SOURCE LINE # 95
00A3 C200        E     CLR     xAsyncTimeOut
                                           ; SOURCE LINE # 96
00A5 F500        E     MOV     wCacheAddr,A
00A7 F500        E     MOV     wCacheAddr+01H,A
                                           ; SOURCE LINE # 97
00A9 900000      E     MOV     DPTR,#bCacheLen
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 98
00AD F500        E     MOV     bCtrlFlowState,A
                                           ; SOURCE LINE # 99
00AF F500        E     MOV     bNextFlowState,A
                                           ; SOURCE LINE # 101
00B1 C200        E     CLR     xEnableScaleUp
                                           ; SOURCE LINE # 102
00B3 900000      E     MOV     DPTR,#bClkForScaleUp
00B6 7407              MOV     A,#07H
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
00B9 E4                CLR     A
00BA 900000      E     MOV     DPTR,#bDMICAltSetting
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
00BE 900000      E     MOV     DPTR,#DMICCurSetting+02H
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 108
00C2 A3                INC     DPTR
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 113
00C4 900000      E     MOV     DPTR,#bDMICInput
00C7 E0                MOVX    A,@DPTR
00C8 9004DC            MOV     DPTR,#04DCH
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 117
00CC E500        E     MOV     A,bCtrlFlowState
00CE 54E0              ANL     A,#0E0H
00D0 440C              ORL     A,#0CH
00D2 F500        E     MOV     bNextFlowState,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 50  

                                           ; SOURCE LINE # 120
00D4 900010            MOV     DPTR,#010H
00D7 7401              MOV     A,#01H
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
00DA 9002E0            MOV     DPTR,#02E0H
00DD E4                CLR     A
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 123
00DF A3                INC     DPTR
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 124
00E1 A3                INC     DPTR
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 125
00E3 A3                INC     DPTR
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
00E5 F500        E     MOV     bExGetLen,A
                                           ; SOURCE LINE # 128
00E7 F500        E     MOV     bExWrIdx,A
                                           ; SOURCE LINE # 137
00E9 C200        E     CLR     xSavePrp
                                           ; SOURCE LINE # 138
00EB C200        E     CLR     xAsyncSavePrp
                                           ; SOURCE LINE # 139
00ED F500        E     MOV     bAsynPrpSaveCnt,A
                                           ; SOURCE LINE # 140
00EF C200        E     CLR     xGPIO5BtnTriger
                                           ; SOURCE LINE # 142
00F1 900000      E     MOV     DPTR,#wDumpTrigger
00F4 F0                MOVX    @DPTR,A
00F5 A3                INC     DPTR
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 148
00F7 900000      E     MOV     DPTR,#wUSBISTStatus
00FA F0                MOVX    @DPTR,A
00FB A3                INC     DPTR
00FC 7404              MOV     A,#04H
00FE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
00FF 7F43              MOV     R7,#043H
0101 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 153
0104 7F01              MOV     R7,#01H
0106 7E00              MOV     R6,#00H
0108 120000      E     LCALL   _GetTab
010B 900000      E     MOV     DPTR,#bAEMode
010E EF                MOV     A,R7
010F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
0110 7F02              MOV     R7,#02H
0112 7E00              MOV     R6,#00H
0114 120000      E     LCALL   _GetTab
0117 900000      E     MOV     DPTR,#bAEPriority
011A EF                MOV     A,R7
011B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 156
011C 7F10              MOV     R7,#010H
011E 7E00              MOV     R6,#00H
0120 120000      E     LCALL   _GetTabW
0123 900000      E     MOV     DPTR,#dwETAbs
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 51  

0126 EE                MOV     A,R6
0127 F0                MOVX    @DPTR,A
0128 A3                INC     DPTR
0129 EF                MOV     A,R7
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 157
012B 7F12              MOV     R7,#012H
012D 7E00              MOV     R6,#00H
012F 120000      E     LCALL   _GetTabW
0132 900000      E     MOV     DPTR,#dwETAbs+02H
0135 EE                MOV     A,R6
0136 F0                MOVX    @DPTR,A
0137 A3                INC     DPTR
0138 EF                MOV     A,R7
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
013A 22                RET     
             ; FUNCTION DeviceReset (END)

             ; FUNCTION FWInit (BEGIN)
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
                                           ; SOURCE LINE # 164
;---- Variable 'i' assigned to Register 'R6/R7' ----
0000 7F00              MOV     R7,#00H
0002 7E08              MOV     R6,#08H
0004         ?C0012:
                                           ; SOURCE LINE # 165
0004 8F82              MOV     DPL,R7
0006 8E83              MOV     DPH,R6
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
000A 0F                INC     R7
000B BF0001            CJNE    R7,#00H,?C0420
000E 0E                INC     R6
000F         ?C0420:
000F BE0BF2            CJNE    R6,#0BH,?C0012
0012 BF14EF            CJNE    R7,#014H,?C0012
0015         ?C0013:
                                           ; SOURCE LINE # 167
0015 E4                CLR     A
0016 F500        E     MOV     bSysModelField,A
                                           ; SOURCE LINE # 168
0018 F500        E     MOV     SysModelField2,A
                                           ; SOURCE LINE # 169
001A 900000      E     MOV     DPTR,#bPrpSaveMethod
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
001E 900000      E     MOV     DPTR,#wEEPROMSize
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 171
0024 C200        E     CLR     xStillIssue
                                           ; SOURCE LINE # 174
0026 C200        E     CLR     xWatchDogEnable
                                           ; SOURCE LINE # 178
0028 900000      E     MOV     DPTR,#bCaptureMethod1
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 180
002C 120000      R     LCALL   CheckProtection
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 52  

                                           ; SOURCE LINE # 181
002F E4                CLR     A
0030 900000      E     MOV     DPTR,#pCustomizeDesc
0033 F0                MOVX    @DPTR,A
0034 A3                INC     DPTR
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
0036 F500        E     MOV     wCacheAddr,A
0038 F500        E     MOV     wCacheAddr+01H,A
                                           ; SOURCE LINE # 185
003A 900000      E     MOV     DPTR,#bCacheLen
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
003E FF                MOV     R7,A
003F 120000      R     LCALL   _OTP_ROMEnable
                                           ; SOURCE LINE # 194
0042 C200        E     CLR     xFWPartialLoad
                                           ; SOURCE LINE # 195
0044 E4                CLR     A
0045 900000      E     MOV     DPTR,#bPartialSeg
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 196
0049 F500        E     MOV     bInSegCount,A
                                           ; SOURCE LINE # 197
004B F500        E     MOV     bFWLoadState,A
                                           ; SOURCE LINE # 198
004D 900000      E     MOV     DPTR,#bIICClock
0050 04                INC     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0052 E4                CLR     A
0053 F500        E     MOV     bErrCountSEGFW,A
                                           ; SOURCE LINE # 202
0055 900000      E     MOV     DPTR,#bPrivacyCtrlGPIO
0058 74FF              MOV     A,#0FFH
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 203
005B 900000      E     MOV     DPTR,#bWriteProtectGPIO
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
005F 900000      E     MOV     DPTR,#bSnapShotGPIO
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
0063 C200        E     CLR     xAfterUSBEnum
                                           ; SOURCE LINE # 212
0065 C200        E     CLR     xEnableHID
                                           ; SOURCE LINE # 215
0067 22                RET     
             ; FUNCTION FWInit (END)

             ; FUNCTION FWLoadXFirmware (BEGIN)
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 279
                                           ; SOURCE LINE # 289
0000 E4                CLR     A
0001 F500        E     MOV     bRequest,A
                                           ; SOURCE LINE # 290
0003 F500        R     MOV     DetectCase,A
                                           ; SOURCE LINE # 292
0005         FWLoadROMSTART:
                                           ; SOURCE LINE # 293
0005 E500        R     MOV     A,DetectCase
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 53  

0007 25E0              ADD     A,ACC
0009 2400        R     ADD     A,#LOW DETECT_CAST
000B F582              MOV     DPL,A
000D E4                CLR     A
000E 3400        R     ADDC    A,#HIGH DETECT_CAST
0010 F583              MOV     DPH,A
0012 E4                CLR     A
0013 93                MOVC    A,@A+DPTR
0014 900000      E     MOV     DPTR,#bEEPromKBits
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 294
0018 E500        R     MOV     A,DetectCase
001A 25E0              ADD     A,ACC
001C 2400        R     ADD     A,#LOW DETECT_CAST+01H
001E F582              MOV     DPL,A
0020 E4                CLR     A
0021 3400        R     ADDC    A,#HIGH DETECT_CAST+01H
0023 F583              MOV     DPH,A
0025 E4                CLR     A
0026 93                MOVC    A,@A+DPTR
0027 900000      E     MOV     DPTR,#bEEPROMID
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 295
002B E500        R     MOV     A,DetectCase
002D B40411            CJNE    A,#04H,?C0017
                                           ; SOURCE LINE # 296
0030 0500        E     INC     bRequest
                                           ; SOURCE LINE # 297
0032 E500        E     MOV     A,bRequest
0034 D3                SETB    C
0035 9403              SUBB    A,#03H
0037 4003              JC      ?C0018
                                           ; SOURCE LINE # 298
0039 7F00              MOV     R7,#00H
003B 22                RET     
                                           ; SOURCE LINE # 299
003C         ?C0018:
                                           ; SOURCE LINE # 300
003C E4                CLR     A
003D F500        R     MOV     DetectCase,A
                                           ; SOURCE LINE # 301
                                           ; SOURCE LINE # 302
003F 8002              SJMP    ?C0021
0041         ?C0017:
                                           ; SOURCE LINE # 303
0041 0500        R     INC     DetectCase
                                           ; SOURCE LINE # 304
0043         ?C0021:
                                           ; SOURCE LINE # 307
0043 120000      R     LCALL   CheckEEPROMI2CDevID
0046 EF                MOV     A,R7
0047 7004              JNZ     ?C0022
                                           ; SOURCE LINE # 308
0049 C200        E     CLR     xSPIEnable
                                           ; SOURCE LINE # 309
004B 80B8              SJMP    FWLoadROMSTART
                                           ; SOURCE LINE # 310
004D         ?C0022:
                                           ; SOURCE LINE # 312
004D 7B01              MOV     R3,#01H
004F 7A00        E     MOV     R2,#HIGH pbIICBuf
0051 7900        E     MOV     R1,#LOW pbIICBuf
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 54  

0053 7D08              MOV     R5,#08H
0055 7F05              MOV     R7,#05H
0057 7E00              MOV     R6,#00H
0059 120000      R     LCALL   _I2CEEPROMReadData
                                           ; SOURCE LINE # 315
005C 7B01              MOV     R3,#01H
005E 7A00        E     MOV     R2,#HIGH pbIICBuf
0060 7900        E     MOV     R1,#LOW pbIICBuf
0062 7D01              MOV     R5,#01H
0064 7F3F              MOV     R7,#03FH
0066 7E00              MOV     R6,#00H
0068 120000      R     LCALL   _I2CEEPROMReadData
006B EF                MOV     A,R7
006C 6097              JZ      FWLoadROMSTART
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
006E         ?C0023:
                                           ; SOURCE LINE # 318
006E 900000      E     MOV     DPTR,#pbIICBuf
0071 E0                MOVX    A,@DPTR
0072 F500        E     MOV     bRequestType,A
                                           ; SOURCE LINE # 321
0074 900501            MOV     DPTR,#0501H
0077 7418              MOV     A,#018H
0079 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
007A A3                INC     DPTR
007B E4                CLR     A
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
007D 900500            MOV     DPTR,#0500H
0080 04                INC     A
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 326
0082 FB                MOV     R3,A
0083 7A00        E     MOV     R2,#HIGH pbIICBuf
0085 7900        E     MOV     R1,#LOW pbIICBuf
0087 7D18              MOV     R5,#018H
0089 7F40              MOV     R7,#040H
008B 7E00              MOV     R6,#00H
008D 120000      R     LCALL   _I2CEEPROMReadData
0090 EF                MOV     A,R7
0091 7003              JNZ     $ + 5H
0093 020000      R     LJMP    FWLoadROMSTART
                                           ; SOURCE LINE # 327
                                           ; SOURCE LINE # 328
0096         ?C0024:
                                           ; SOURCE LINE # 331
0096 900000      E     MOV     DPTR,#pbIICBuf
0099 E0                MOVX    A,@DPTR
009A 6445              XRL     A,#045H
009C 6003              JZ      $ + 5H
009E 020000      R     LJMP    FWLoadROMSTART
00A1 A3                INC     DPTR
00A2 E0                MOVX    A,@DPTR
00A3 6444              XRL     A,#044H
00A5 6003              JZ      $ + 5H
00A7 020000      R     LJMP    FWLoadROMSTART
                                           ; SOURCE LINE # 332
00AA 900000      E     MOV     DPTR,#pbIICBuf+016H
00AD E0                MOVX    A,@DPTR
00AE 54BF              ANL     A,#0BFH
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 55  

00B0 F500        E     MOV     wValue+01H,A
                                           ; SOURCE LINE # 333
00B2 900000      E     MOV     DPTR,#bEEPromKBits
00B5 E0                MOVX    A,@DPTR
00B6 FF                MOV     R7,A
00B7 D3                SETB    C
00B8 9410              SUBB    A,#010H
00BA 5015              JNC     ?C0026
                                           ; SOURCE LINE # 334
00BC E500        E     MOV     A,wValue+01H
00BE 6404              XRL     A,#04H
00C0 6030              JZ      ?C0028
00C2 E500        E     MOV     A,wValue+01H
00C4 6402              XRL     A,#02H
00C6 602A              JZ      ?C0028
00C8 E500        E     MOV     A,wValue+01H
00CA 6401              XRL     A,#01H
00CC 6024              JZ      ?C0028
                                           ; SOURCE LINE # 335
00CE 020000      R     LJMP    FWLoadROMSTART
                                           ; SOURCE LINE # 336
                                           ; SOURCE LINE # 337
00D1         ?C0026:
00D1 EF                MOV     A,R7
00D2 C3                CLR     C
00D3 9440              SUBB    A,#040H
00D5 401B              JC      ?C0028
                                           ; SOURCE LINE # 339
00D7 E500        E     MOV     A,wValue+01H
00D9 6408              XRL     A,#08H
00DB 6015              JZ      ?C0028
00DD E500        E     MOV     A,wValue+01H
00DF 6410              XRL     A,#010H
00E1 600F              JZ      ?C0028
00E3 E500        E     MOV     A,wValue+01H
00E5 6420              XRL     A,#020H
00E7 6009              JZ      ?C0028
00E9 E500        E     MOV     A,wValue+01H
00EB 6480              XRL     A,#080H
00ED 6003              JZ      $ + 5H
00EF 020000      R     LJMP    FWLoadROMSTART
                                           ; SOURCE LINE # 340
                                           ; SOURCE LINE # 341
                                           ; SOURCE LINE # 342
00F2         ?C0028:
                                           ; SOURCE LINE # 344
00F2 E500        E     MOV     A,bRequestType
00F4 F4                CPL     A
00F5 600B              JZ      ?C0033
                                           ; SOURCE LINE # 345
                                           ; SOURCE LINE # 346
00F7 900503            MOV     DPTR,#0503H
00FA E0                MOVX    A,@DPTR
00FB 6500        E     XRL     A,bRequestType
00FD 6003              JZ      $ + 5H
00FF 020000      R     LJMP    FWLoadROMSTART
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 353
                                           ; SOURCE LINE # 354
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 359
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 56  

                                           ; SOURCE LINE # 360
0102         ?C0033:
                                           ; SOURCE LINE # 364
0102 900000      E     MOV     DPTR,#PartialMemSet+02H
0105 E4                CLR     A
0106 F0                MOVX    @DPTR,A
0107 A3                INC     DPTR
0108 7458              MOV     A,#058H
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
010B 900000      E     MOV     DPTR,#pbIICBuf+02H
010E E0                MOVX    A,@DPTR
010F FF                MOV     R7,A
0110 A3                INC     DPTR
0111 E0                MOVX    A,@DPTR
0112 900000      E     MOV     DPTR,#PartialMemSet+04H
0115 CF                XCH     A,R7
0116 F0                MOVX    @DPTR,A
0117 A3                INC     DPTR
0118 EF                MOV     A,R7
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
011A 900000      E     MOV     DPTR,#pbIICBuf+04H
011D E0                MOVX    A,@DPTR
011E FF                MOV     R7,A
011F A3                INC     DPTR
0120 E0                MOVX    A,@DPTR
0121 900000      E     MOV     DPTR,#PartialMemSet+06H
0124 CF                XCH     A,R7
0125 F0                MOVX    @DPTR,A
0126 A3                INC     DPTR
0127 EF                MOV     A,R7
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
0129 900000      E     MOV     DPTR,#pbIICBuf+06H
012C E0                MOVX    A,@DPTR
012D FF                MOV     R7,A
012E A3                INC     DPTR
012F E0                MOVX    A,@DPTR
0130 900000      E     MOV     DPTR,#PartialMemSet+08H
0133 CF                XCH     A,R7
0134 F0                MOVX    @DPTR,A
0135 A3                INC     DPTR
0136 EF                MOV     A,R7
0137 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 368
0138 900000      E     MOV     DPTR,#pbIICBuf+08H
013B E0                MOVX    A,@DPTR
013C FF                MOV     R7,A
013D A3                INC     DPTR
013E E0                MOVX    A,@DPTR
013F 900000      E     MOV     DPTR,#PartialMemSet+0AH
0142 CF                XCH     A,R7
0143 F0                MOVX    @DPTR,A
0144 A3                INC     DPTR
0145 EF                MOV     A,R7
0146 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 369
0147 900000      E     MOV     DPTR,#pbIICBuf+0AH
014A E0                MOVX    A,@DPTR
014B FF                MOV     R7,A
014C A3                INC     DPTR
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 57  

014D E0                MOVX    A,@DPTR
014E 900000      E     MOV     DPTR,#PartialMemSet+0CH
0151 CF                XCH     A,R7
0152 F0                MOVX    @DPTR,A
0153 A3                INC     DPTR
0154 EF                MOV     A,R7
0155 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0156 900000      E     MOV     DPTR,#pbIICBuf+0CH
0159 E0                MOVX    A,@DPTR
015A FF                MOV     R7,A
015B A3                INC     DPTR
015C E0                MOVX    A,@DPTR
015D 900000      E     MOV     DPTR,#PartialMemSet+0EH
0160 CF                XCH     A,R7
0161 F0                MOVX    @DPTR,A
0162 A3                INC     DPTR
0163 EF                MOV     A,R7
0164 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 371
0165 900000      E     MOV     DPTR,#pbIICBuf+0EH
0168 E0                MOVX    A,@DPTR
0169 FF                MOV     R7,A
016A A3                INC     DPTR
016B E0                MOVX    A,@DPTR
016C 900000      E     MOV     DPTR,#PartialMemSet+010H
016F CF                XCH     A,R7
0170 F0                MOVX    @DPTR,A
0171 A3                INC     DPTR
0172 EF                MOV     A,R7
0173 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 373
0174 900000      E     MOV     DPTR,#PartialMemSet+04H
0177 E0                MOVX    A,@DPTR
0178 B4FF0C            CJNE    A,#0FFH,?C0034
017B A3                INC     DPTR
017C E0                MOVX    A,@DPTR
017D B4FF07            CJNE    A,#0FFH,?C0034
                                           ; SOURCE LINE # 374
0180 E4                CLR     A
0181 900000      E     MOV     DPTR,#PartialMemSet+04H
0184 F0                MOVX    @DPTR,A
0185 A3                INC     DPTR
0186 F0                MOVX    @DPTR,A
0187         ?C0034:
                                           ; SOURCE LINE # 377
0187 900000      E     MOV     DPTR,#PartialMemSet+04H
018A E0                MOVX    A,@DPTR
018B FA                MOV     R2,A
018C A3                INC     DPTR
018D E0                MOVX    A,@DPTR
018E FB                MOV     R3,A
018F 900000      E     MOV     DPTR,#wSetStartAddr
0192 EA                MOV     A,R2
0193 F0                MOVX    @DPTR,A
0194 A3                INC     DPTR
0195 EB                MOV     A,R3
0196 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
0197 900000      E     MOV     DPTR,#pbIICBuf+010H
019A E0                MOVX    A,@DPTR
019B F500        E     MOV     wIndex,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 58  

019D A3                INC     DPTR
019E E0                MOVX    A,@DPTR
019F F500        E     MOV     wIndex+01H,A
                                           ; SOURCE LINE # 380
01A1 900000      E     MOV     DPTR,#pbIICBuf+012H
01A4 E0                MOVX    A,@DPTR
01A5 F500        E     MOV     wValue,A
01A7 A3                INC     DPTR
01A8 E0                MOVX    A,@DPTR
01A9 F500        E     MOV     wValue+01H,A
                                           ; SOURCE LINE # 383
01AB 900000      E     MOV     DPTR,#wSetStartAddr+01H
01AE E0                MOVX    A,@DPTR
01AF 2500        E     ADD     A,wValue+01H
01B1 FF                MOV     R7,A
01B2 900000      E     MOV     DPTR,#wSetStartAddr
01B5 E0                MOVX    A,@DPTR
01B6 3500        E     ADDC    A,wValue
01B8 CF                XCH     A,R7
01B9 C3                CLR     C
01BA 9500        E     SUBB    A,wIndex+01H
01BC CF                XCH     A,R7
01BD 9500        E     SUBB    A,wIndex
01BF 900000      E     MOV     DPTR,#wIdxTabAddrOffset
01C2 F0                MOVX    @DPTR,A
01C3 A3                INC     DPTR
01C4 EF                MOV     A,R7
01C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 385
01C6 900000      E     MOV     DPTR,#pbIICBuf+014H
01C9 E0                MOVX    A,@DPTR
01CA F500        E     MOV     wValue,A
01CC A3                INC     DPTR
01CD E0                MOVX    A,@DPTR
01CE F500        E     MOV     wValue+01H,A
                                           ; SOURCE LINE # 388
01D0 2500        E     ADD     A,wIndex+01H
01D2 900000      E     MOV     DPTR,#wSetFileDataAddr+01H
01D5 F0                MOVX    @DPTR,A
01D6 E500        E     MOV     A,wIndex
01D8 3500        E     ADDC    A,wValue
01DA 900000      E     MOV     DPTR,#wSetFileDataAddr
01DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 392
01DE 900000      E     MOV     DPTR,#pbIICBuf+016H
01E1 E0                MOVX    A,@DPTR
01E2 30E604            JNB     ACC.6,?C0035
01E5 7F01              MOV     R7,#01H
01E7 8002              SJMP    ?C0036
01E9         ?C0035:
01E9 7F02              MOV     R7,#02H
01EB         ?C0036:
01EB 900000      E     MOV     DPTR,#bIICClock
01EE EF                MOV     A,R7
01EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 393
01F0 900000      E     MOV     DPTR,#pbIICBuf+016H
01F3 E0                MOVX    A,@DPTR
01F4 54BF              ANL     A,#0BFH
01F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
01F7 E0                MOVX    A,@DPTR
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 59  

01F8 C3                CLR     C
01F9 9480              SUBB    A,#080H
01FB 500C              JNC     ?C0037
                                           ; SOURCE LINE # 396
01FD E0                MOVX    A,@DPTR
01FE 25E0              ADD     A,ACC
0200 900000      E     MOV     DPTR,#wEEPROMSize
0203 F0                MOVX    @DPTR,A
0204 A3                INC     DPTR
0205 E4                CLR     A
0206 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
0207 8011              SJMP    ?C0038
0209         ?C0037:
0209 900000      E     MOV     DPTR,#pbIICBuf+016H
020C E0                MOVX    A,@DPTR
020D B4800A            CJNE    A,#080H,?C0038
                                           ; SOURCE LINE # 398
0210 900000      E     MOV     DPTR,#wEEPROMSize
0213 74FF              MOV     A,#0FFH
0215 F0                MOVX    @DPTR,A
0216 A3                INC     DPTR
0217 74E0              MOV     A,#0E0H
0219 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 399
021A         ?C0038:
                                           ; SOURCE LINE # 401
021A 900000      E     MOV     DPTR,#pbIICBuf+017H
021D E0                MOVX    A,@DPTR
021E 30E004            JNB     ACC.0,?C0040
                                           ; SOURCE LINE # 402
0221 D200        E     SETB    xSetFileExist
                                           ; SOURCE LINE # 403
0223 8002              SJMP    ?C0041
0225         ?C0040:
                                           ; SOURCE LINE # 404
0225 C200        E     CLR     xSetFileExist
                                           ; SOURCE LINE # 405
0227         ?C0041:
                                           ; SOURCE LINE # 406
0227 900000      E     MOV     DPTR,#pbIICBuf+017H
022A E0                MOVX    A,@DPTR
022B 30E104            JNB     ACC.1,?C0042
                                           ; SOURCE LINE # 407
022E D200        E     SETB    xExFWExist
                                           ; SOURCE LINE # 408
0230 8002              SJMP    ?C0043
0232         ?C0042:
                                           ; SOURCE LINE # 409
0232 C200        E     CLR     xExFWExist
                                           ; SOURCE LINE # 410
0234         ?C0043:
                                           ; SOURCE LINE # 412
0234 E4                CLR     A
0235 900000      E     MOV     DPTR,#bPrpSaveMethod
0238 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
0239 900000      E     MOV     DPTR,#pbIICBuf+017H
023C E0                MOVX    A,@DPTR
023D 30E208            JNB     ACC.2,?C0044
                                           ; SOURCE LINE # 416
0240 900000      E     MOV     DPTR,#bPrpSaveMethod
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 60  

0243 7404              MOV     A,#04H
0245 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
0246 800D              SJMP    ?C0045
0248         ?C0044:
0248 900000      E     MOV     DPTR,#pbIICBuf+017H
024B E0                MOVX    A,@DPTR
024C 30E306            JNB     ACC.3,?C0045
                                           ; SOURCE LINE # 419
024F 900000      E     MOV     DPTR,#bPrpSaveMethod
0252 7408              MOV     A,#08H
0254 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 420
0255         ?C0045:
                                           ; SOURCE LINE # 432
0255 300014      E     JNB     xExFWExist,?C0047
                                           ; SOURCE LINE # 433
0258 900000      E     MOV     DPTR,#PartialMemSet+02H
025B E0                MOVX    A,@DPTR
025C FE                MOV     R6,A
025D A3                INC     DPTR
025E E0                MOVX    A,@DPTR
025F FF                MOV     R7,A
0260 E4                CLR     A
0261 FD                MOV     R5,A
0262 FC                MOV     R4,A
0263 120000      R     LCALL   _LoadToUpgradedRAM
0266 EF                MOV     A,R7
0267 7003              JNZ     $ + 5H
0269 020000      R     LJMP    FWLoadROMSTART
                                           ; SOURCE LINE # 437
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
                                           ; SOURCE LINE # 440
026C         ?C0047:
                                           ; SOURCE LINE # 442
026C 300025      E     JNB     xSetFileExist,?C0049
                                           ; SOURCE LINE # 443
026F 200016      E     JB      xExFWExist,?C0050
                                           ; SOURCE LINE # 444
                                           ; SOURCE LINE # 446
0272 900000      E     MOV     DPTR,#wSetStartAddr
0275 E0                MOVX    A,@DPTR
0276 FE                MOV     R6,A
0277 A3                INC     DPTR
0278 E0                MOVX    A,@DPTR
0279 FF                MOV     R7,A
027A C3                CLR     C
027B 900000      E     MOV     DPTR,#wIdxTabAddrOffset+01H
027E E0                MOVX    A,@DPTR
027F 9F                SUBB    A,R7
0280 F0                MOVX    @DPTR,A
0281 900000      E     MOV     DPTR,#wIdxTabAddrOffset
0284 E0                MOVX    A,@DPTR
0285 9E                SUBB    A,R6
                                           ; SOURCE LINE # 449
0286 801F              SJMP    ?C0432
                                           ; SOURCE LINE # 455
0288         ?C0050:
                                           ; SOURCE LINE # 457
0288 900000      E     MOV     DPTR,#wSetStartAddr
028B 120000      R     LCALL   L?0454
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 61  

028E EF                MOV     A,R7
028F 7003              JNZ     $ + 5H
0291 020000      R     LJMP    FWLoadROMSTART
                                           ; SOURCE LINE # 461
                                           ; SOURCE LINE # 462
                                           ; SOURCE LINE # 463
                                           ; SOURCE LINE # 464
0294         ?C0049:
                                           ; SOURCE LINE # 467
0294 900000      E     MOV     DPTR,#PartialMemSet+05H
0297 E0                MOVX    A,@DPTR
0298 2500        E     ADD     A,wValue+01H
029A FE                MOV     R6,A
029B 900000      E     MOV     DPTR,#PartialMemSet+04H
029E E0                MOVX    A,@DPTR
029F 3500        E     ADDC    A,wValue
02A1 900000      E     MOV     DPTR,#PartialMemSet
02A4 F0                MOVX    @DPTR,A
02A5 A3                INC     DPTR
02A6 CE                XCH     A,R6
02A7         ?C0432:
02A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
02A8 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 470
02AA         ?C0019:
02AA 22                RET     
             ; FUNCTION FWLoadXFirmware (END)

             ; FUNCTION _OTP_ROMEnable (BEGIN)
                                           ; SOURCE LINE # 475
;---- Variable 'bEnable' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 476
                                           ; SOURCE LINE # 477
0000 900545            MOV     DPTR,#0545H
0003 E0                MOVX    A,@DPTR
0004 BF0108            CJNE    R7,#01H,?C0052
                                           ; SOURCE LINE # 478
                                           ; SOURCE LINE # 479
0007 54F9              ANL     A,#0F9H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 480
000A E0                MOVX    A,@DPTR
000B 4401              ORL     A,#01H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 481
000E 22                RET     
000F         ?C0052:
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
000F 54FE              ANL     A,#0FEH
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
0012 E0                MOVX    A,@DPTR
0013 4406              ORL     A,#06H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
                                           ; SOURCE LINE # 487
0016         ?C0054:
0016 22                RET     
             ; FUNCTION _OTP_ROMEnable (END)

C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 62  

             ; FUNCTION _OTPROMAddrUpdate (BEGIN)
                                           ; SOURCE LINE # 489
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 490
                                           ; SOURCE LINE # 492
0000 900000      R     MOV     DPTR,#Addr
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
0008 E4                CLR     A
0009 FF                MOV     R7,A
000A 120000      R     LCALL   _OTP_ROMEnable
                                           ; SOURCE LINE # 495
000D 900000      R     MOV     DPTR,#Addr+01H
0010 E0                MOVX    A,@DPTR
0011 900548            MOV     DPTR,#0548H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 496
0015 900000      R     MOV     DPTR,#Addr
0018 E0                MOVX    A,@DPTR
0019 900549            MOV     DPTR,#0549H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
001D 0F                INC     R7
001E 020000      R     LJMP    _OTP_ROMEnable
             ; FUNCTION _OTPROMAddrUpdate (END)

             ; FUNCTION L?0453 (BEGIN)
0000 E0                MOVX    A,@DPTR
0001 FA                MOV     R2,A
0002 A3                INC     DPTR
0003 E0                MOVX    A,@DPTR
0004 2400        E     ADD     A,#LOW pbXFWCode
0006 F9                MOV     R1,A
0007 7400        E     MOV     A,#HIGH pbXFWCode
0009 3A                ADDC    A,R2
000A FA                MOV     R2,A
000B 7B01              MOV     R3,#01H
000D 750001      R     MOV     ?_LoadOTP_CRC8?BYTE+07H,#01H
             ; FUNCTION _LoadOTP_CRC8 (BEGIN)
                                           ; SOURCE LINE # 500
0010 8B00        R     MOV     pbData,R3
0012 8A00        R     MOV     pbData+01H,R2
0014 8900        R     MOV     pbData+02H,R1
;---- Variable 'Len' assigned to Register 'R4/R5' ----
;---- Variable 'AddrStart' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 501
                                           ; SOURCE LINE # 504
0016 900000      R     MOV     DPTR,#Addr
0019 EE                MOV     A,R6
001A F0                MOVX    @DPTR,A
001B A3                INC     DPTR
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 505
001E A3                INC     DPTR
001F EC                MOV     A,R4
0020 F0                MOVX    @DPTR,A
0021 A3                INC     DPTR
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 63  

0022 ED                MOV     A,R5
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
0024 E0                MOVX    A,@DPTR
0025 900501            MOV     DPTR,#0501H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
0029 900000      R     MOV     DPTR,#length
002C E0                MOVX    A,@DPTR
002D 900502            MOV     DPTR,#0502H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 511
0031 E500        R     MOV     A,xCRC_MIN1
0033 900500            MOV     DPTR,#0500H
0036 B40105            CJNE    A,#01H,?C0056
                                           ; SOURCE LINE # 512
0039 7413              MOV     A,#013H
003B F0                MOVX    @DPTR,A
003C 8003              SJMP    ?C0057
003E         ?C0056:
                                           ; SOURCE LINE # 514
003E 7415              MOV     A,#015H
0040 F0                MOVX    @DPTR,A
0041         ?C0057:
                                           ; SOURCE LINE # 516
0041 900000      R     MOV     DPTR,#length
0044 E0                MOVX    A,@DPTR
0045 FE                MOV     R6,A
0046 A3                INC     DPTR
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 900000      R     MOV     DPTR,#Addr
004C E0                MOVX    A,@DPTR
004D FC                MOV     R4,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 AA04              MOV     R2,AR4
0052 F9                MOV     R1,A
0053 7BFF              MOV     R3,#0FFH
0055 A800        R     MOV     R0,pbData+02H
0057 AC00        R     MOV     R4,pbData+01H
0059 AD00        R     MOV     R5,pbData
005B 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 518
005E 900500            MOV     DPTR,#0500H
0061 E0                MOVX    A,@DPTR
0062 54E9              ANL     A,#0E9H
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
0065 900503            MOV     DPTR,#0503H
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
                                           ; SOURCE LINE # 522
006A         ?C0058:
006A 22                RET     
             ; FUNCTION _LoadOTP_CRC8 (END)

             ; FUNCTION CheckOTPIndex (BEGIN)
                                           ; SOURCE LINE # 524
                                           ; SOURCE LINE # 525
                                           ; SOURCE LINE # 528
0000 E4                CLR     A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 64  

0001 F500        R     MOV     i,A
0003 F500        R     MOV     i+01H,A
0005         ?C0059:
                                           ; SOURCE LINE # 529
                                           ; SOURCE LINE # 530
0005 74A4              MOV     A,#0A4H
0007 2500        R     ADD     A,i+01H
0009 F582              MOV     DPL,A
000B 749E              MOV     A,#09EH
000D 3500        R     ADDC    A,i
000F F583              MOV     DPH,A
0011 E4                CLR     A
0012 93                MOVC    A,@A+DPTR
0013 F4                CPL     A
0014 600E              JZ      ?C0060
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 532
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
0016         ?C0061:
0016 0500        R     INC     i+01H
0018 E500        R     MOV     A,i+01H
001A 7002              JNZ     ?C0422
001C 0500        R     INC     i
001E         ?C0422:
001E 640C              XRL     A,#0CH
0020 4500        R     ORL     A,i
0022 70E1              JNZ     ?C0059
0024         ?C0060:
                                           ; SOURCE LINE # 535
0024 AF00        R     MOV     R7,i+01H
0026 900000      E     MOV     DPTR,#bOTPCodeIndex
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 537
002B 700D              JNZ     ?C0063
                                           ; SOURCE LINE # 538
                                           ; SOURCE LINE # 539
002D 909EB0            MOV     DPTR,#09EB0H
0030 93                MOVC    A,@A+DPTR
0031 B4FF03            CJNE    A,#0FFH,?C0064
                                           ; SOURCE LINE # 540
0034 7F01              MOV     R7,#01H
0036 22                RET     
0037         ?C0064:
                                           ; SOURCE LINE # 542
0037 7F00              MOV     R7,#00H
0039 22                RET     
                                           ; SOURCE LINE # 543
003A         ?C0063:
                                           ; SOURCE LINE # 546
003A 7B01              MOV     R3,#01H
003C 7A00        E     MOV     R2,#HIGH pbIICBuf
003E 7900        E     MOV     R1,#LOW pbIICBuf
0040 750001      R     MOV     ?_LoadOTP_CRC8?BYTE+07H,#01H
0043 7D0D              MOV     R5,#0DH
0045 7C00              MOV     R4,#00H
0047 7FA4              MOV     R7,#0A4H
0049 7E9E              MOV     R6,#09EH
004B 120000      R     LCALL   _LoadOTP_CRC8
004E 900000      E     MOV     DPTR,#bOTPCodeIndex
0051 E0                MOVX    A,@DPTR
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 65  

0052 FE                MOV     R6,A
0053 909EAF            MOV     DPTR,#09EAFH
0056 93                MOVC    A,@A+DPTR
0057 6F                XRL     A,R7
0058 6003              JZ      ?C0067
                                           ; SOURCE LINE # 548
                                           ; SOURCE LINE # 554
005A 7F00              MOV     R7,#00H
005C 22                RET     
                                           ; SOURCE LINE # 555
005D         ?C0067:
                                           ; SOURCE LINE # 558
005D EE                MOV     A,R6
005E FF                MOV     R7,A
005F 7E00              MOV     R6,#00H
0061 7C00              MOV     R4,#00H
0063 7D1B              MOV     R5,#01BH
0065 120000      E     LCALL   ?C?IMUL
0068 EF                MOV     A,R7
0069 24A1              ADD     A,#0A1H
006B F500        R     MOV     i+01H,A
006D EE                MOV     A,R6
006E 349E              ADDC    A,#09EH
0070 F500        R     MOV     i,A
                                           ; SOURCE LINE # 559
0072 7B01              MOV     R3,#01H
0074 7A00        E     MOV     R2,#HIGH pbIICBuf
0076 7900        E     MOV     R1,#LOW pbIICBuf
0078 750001      R     MOV     ?_LoadOTP_CRC8?BYTE+07H,#01H
007B AF00        R     MOV     R7,i+01H
007D FE                MOV     R6,A
007E 120000      R     LCALL   _LoadOTP_CRC8
0081 850082      R     MOV     DPL,i+01H
0084 850083      R     MOV     DPH,i
0087 741A              MOV     A,#01AH
0089 93                MOVC    A,@A+DPTR
008A 6F                XRL     A,R7
008B 6003              JZ      ?C0068
                                           ; SOURCE LINE # 561
                                           ; SOURCE LINE # 566
008D 7F00              MOV     R7,#00H
008F 22                RET     
                                           ; SOURCE LINE # 567
0090         ?C0068:
                                           ; SOURCE LINE # 576
0090 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 577
0092         ?C0065:
0092 22                RET     
             ; FUNCTION CheckOTPIndex (END)

             ; FUNCTION FWLoadOTP (BEGIN)
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#crc
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
0005 A3                INC     DPTR
0006 F0                MOVX    @DPTR,A
0007 A3                INC     DPTR
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 66  

0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A F0                MOVX    @DPTR,A
000B A3                INC     DPTR
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
000D 900000      R     MOV     DPTR,#OTPCodeExit
0010 04                INC     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 587
0012 E4                CLR     A
0013 FF                MOV     R7,A
0014 FE                MOV     R6,A
0015 120000      R     LCALL   _OTPROMAddrUpdate
                                           ; SOURCE LINE # 590
0018 E4                CLR     A
0019 900000      R     MOV     DPTR,#length
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E F0                MOVX    @DPTR,A
001F         ?C0069:
                                           ; SOURCE LINE # 591
001F 120000      R     LCALL   CheckOTPIndex
0022 EF                MOV     A,R7
0023 7018              JNZ     ?C0070
                                           ; SOURCE LINE # 592
                                           ; SOURCE LINE # 593
0025 900000      R     MOV     DPTR,#length
0028 75F001            MOV     B,#01H
002B 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 594
002E C3                CLR     C
002F 900000      R     MOV     DPTR,#length+01H
0032 E0                MOVX    A,@DPTR
0033 9403              SUBB    A,#03H
0035 900000      R     MOV     DPTR,#length
0038 E0                MOVX    A,@DPTR
0039 9400              SUBB    A,#00H
003B 40E2              JC      ?C0069
003D         ?C0070:
                                           ; SOURCE LINE # 596
003D C3                CLR     C
003E 900000      R     MOV     DPTR,#length+01H
0041 E0                MOVX    A,@DPTR
0042 9403              SUBB    A,#03H
0044 900000      R     MOV     DPTR,#length
0047 E0                MOVX    A,@DPTR
0048 9400              SUBB    A,#00H
004A 4048              JC      ?C0071
                                           ; SOURCE LINE # 597
                                           ; SOURCE LINE # 603
004C 900000      E     MOV     DPTR,#bOTPCodeIndex
004F E0                MOVX    A,@DPTR
0050 D3                SETB    C
0051 9401              SUBB    A,#01H
0053 403C              JC      ?C0072
                                           ; SOURCE LINE # 604
0055 E0                MOVX    A,@DPTR
0056 14                DEC     A
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 606
0058 E0                MOVX    A,@DPTR
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 67  

0059 FF                MOV     R7,A
005A 7E00              MOV     R6,#00H
005C 7C00              MOV     R4,#00H
005E 7D1B              MOV     R5,#01BH
0060 120000      E     LCALL   ?C?IMUL
0063 EF                MOV     A,R7
0064 24A1              ADD     A,#0A1H
0066 FF                MOV     R7,A
0067 EE                MOV     A,R6
0068 349E              ADDC    A,#09EH
006A FE                MOV     R6,A
006B 900000      R     MOV     DPTR,#length
006E F0                MOVX    @DPTR,A
006F A3                INC     DPTR
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 607
0072 7B01              MOV     R3,#01H
0074 7A00        E     MOV     R2,#HIGH pbIICBuf
0076 7900        E     MOV     R1,#LOW pbIICBuf
0078 750001      R     MOV     ?_LoadOTP_CRC8?BYTE+07H,#01H
007B 120000      R     LCALL   _LoadOTP_CRC8
007E 900000      R     MOV     DPTR,#length
0081 E0                MOVX    A,@DPTR
0082 FC                MOV     R4,A
0083 A3                INC     DPTR
0084 E0                MOVX    A,@DPTR
0085 F582              MOV     DPL,A
0087 8C83              MOV     DPH,R4
0089 741A              MOV     A,#01AH
008B 93                MOVC    A,@A+DPTR
008C 6F                XRL     A,R7
008D 6005              JZ      ?C0071
                                           ; SOURCE LINE # 609
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
008F 8000              SJMP    ?C0433
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 613
0091         ?C0072:
                                           ; SOURCE LINE # 614
                                           ; SOURCE LINE # 615
0091         ?C0433:
0091 E4                CLR     A
                                           ; SOURCE LINE # 616
0092 8006              SJMP    ?C0434
                                           ; SOURCE LINE # 617
                                           ; SOURCE LINE # 618
0094         ?C0071:
                                           ; SOURCE LINE # 620
0094 900000      E     MOV     DPTR,#bOTPCodeIndex
0097 E0                MOVX    A,@DPTR
0098 7004              JNZ     OTPCodeIndexSet
                                           ; SOURCE LINE # 621
                                           ; SOURCE LINE # 626
009A         ?C0434:
009A FF                MOV     R7,A
009B 020000      R     LJMP    _OTP_ROMEnable
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 628
                                           ; SOURCE LINE # 636
009E         OTPCodeIndexSet:
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 68  

                                           ; SOURCE LINE # 639
009E 900000      E     MOV     DPTR,#bOTPCodeIndex
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
00A3 7E00              MOV     R6,#00H
00A5 7C00              MOV     R4,#00H
00A7 7D1B              MOV     R5,#01BH
00A9 120000      E     LCALL   ?C?IMUL
00AC EF                MOV     A,R7
00AD 24A1              ADD     A,#0A1H
00AF FF                MOV     R7,A
00B0 EE                MOV     A,R6
00B1 349E              ADDC    A,#09EH
00B3 900000      R     MOV     DPTR,#tmp2
00B6 F0                MOVX    @DPTR,A
00B7 A3                INC     DPTR
00B8 EF                MOV     A,R7
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 642
00BA 300003      E     JNB     xExFWExist,$ + 6H
00BD 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 643
                                           ; SOURCE LINE # 645
00C0 900000      R     MOV     DPTR,#tmp2
00C3 E0                MOVX    A,@DPTR
00C4 FE                MOV     R6,A
00C5 A3                INC     DPTR
00C6 E0                MOVX    A,@DPTR
00C7 FF                MOV     R7,A
00C8 F582              MOV     DPL,A
00CA 8E83              MOV     DPH,R6
00CC E4                CLR     A
00CD 93                MOVC    A,@A+DPTR
00CE FC                MOV     R4,A
00CF 7401              MOV     A,#01H
00D1 93                MOVC    A,@A+DPTR
00D2 FD                MOV     R5,A
00D3 900000      E     MOV     DPTR,#PartialMemSet+02H
00D6 EC                MOV     A,R4
00D7 F0                MOVX    @DPTR,A
00D8 A3                INC     DPTR
00D9 ED                MOV     A,R5
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 647
00DB F4                CPL     A
00DC 7002              JNZ     ?C0423
00DE EC                MOV     A,R4
00DF F4                CPL     A
00E0         ?C0423:
00E0 7003              JNZ     $ + 5H
00E2 020000      R     LJMP    ?C0079
                                           ; SOURCE LINE # 648
                                           ; SOURCE LINE # 649
00E5 900000      R     MOV     DPTR,#tmp2
00E8 E0                MOVX    A,@DPTR
00E9 FC                MOV     R4,A
00EA A3                INC     DPTR
00EB E0                MOVX    A,@DPTR
00EC FD                MOV     R5,A
00ED 2402              ADD     A,#02H
00EF FB                MOV     R3,A
00F0 E4                CLR     A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 69  

00F1 3C                ADDC    A,R4
00F2 8B82              MOV     DPL,R3
00F4 F583              MOV     DPH,A
00F6 E4                CLR     A
00F7 93                MOVC    A,@A+DPTR
00F8 FB                MOV     R3,A
00F9 7401              MOV     A,#01H
00FB 93                MOVC    A,@A+DPTR
00FC 900000      E     MOV     DPTR,#PartialMemSet+04H
00FF CB                XCH     A,R3
0100 F0                MOVX    @DPTR,A
0101 A3                INC     DPTR
0102 EB                MOV     A,R3
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 650
0104 ED                MOV     A,R5
0105 2404              ADD     A,#04H
0107 FD                MOV     R5,A
0108 E4                CLR     A
0109 3C                ADDC    A,R4
010A 8D82              MOV     DPL,R5
010C F583              MOV     DPH,A
010E E4                CLR     A
010F 93                MOVC    A,@A+DPTR
0110 FD                MOV     R5,A
0111 7401              MOV     A,#01H
0113 93                MOVC    A,@A+DPTR
0114 900000      E     MOV     DPTR,#PartialMemSet+06H
0117 CD                XCH     A,R5
0118 F0                MOVX    @DPTR,A
0119 A3                INC     DPTR
011A ED                MOV     A,R5
011B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 651
011C 900000      R     MOV     DPTR,#tmp2
011F A3                INC     DPTR
0120 E0                MOVX    A,@DPTR
0121 FD                MOV     R5,A
0122 2406              ADD     A,#06H
0124 FB                MOV     R3,A
0125 E4                CLR     A
0126 3C                ADDC    A,R4
0127 8B82              MOV     DPL,R3
0129 F583              MOV     DPH,A
012B E4                CLR     A
012C 93                MOVC    A,@A+DPTR
012D FB                MOV     R3,A
012E 7401              MOV     A,#01H
0130 93                MOVC    A,@A+DPTR
0131 900000      E     MOV     DPTR,#PartialMemSet+08H
0134 CB                XCH     A,R3
0135 F0                MOVX    @DPTR,A
0136 A3                INC     DPTR
0137 EB                MOV     A,R3
0138 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 652
0139 ED                MOV     A,R5
013A 2408              ADD     A,#08H
013C FD                MOV     R5,A
013D E4                CLR     A
013E 3C                ADDC    A,R4
013F 8D82              MOV     DPL,R5
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 70  

0141 F583              MOV     DPH,A
0143 E4                CLR     A
0144 93                MOVC    A,@A+DPTR
0145 FD                MOV     R5,A
0146 7401              MOV     A,#01H
0148 93                MOVC    A,@A+DPTR
0149 900000      E     MOV     DPTR,#PartialMemSet+0AH
014C CD                XCH     A,R5
014D F0                MOVX    @DPTR,A
014E A3                INC     DPTR
014F ED                MOV     A,R5
0150 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 653
0151 900000      R     MOV     DPTR,#tmp2
0154 A3                INC     DPTR
0155 E0                MOVX    A,@DPTR
0156 FD                MOV     R5,A
0157 240A              ADD     A,#0AH
0159 FB                MOV     R3,A
015A E4                CLR     A
015B 3C                ADDC    A,R4
015C 8B82              MOV     DPL,R3
015E F583              MOV     DPH,A
0160 E4                CLR     A
0161 93                MOVC    A,@A+DPTR
0162 FB                MOV     R3,A
0163 7401              MOV     A,#01H
0165 93                MOVC    A,@A+DPTR
0166 900000      E     MOV     DPTR,#PartialMemSet+0CH
0169 CB                XCH     A,R3
016A F0                MOVX    @DPTR,A
016B A3                INC     DPTR
016C EB                MOV     A,R3
016D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 654
016E ED                MOV     A,R5
016F 240C              ADD     A,#0CH
0171 FD                MOV     R5,A
0172 E4                CLR     A
0173 3C                ADDC    A,R4
0174 8D82              MOV     DPL,R5
0176 F583              MOV     DPH,A
0178 E4                CLR     A
0179 93                MOVC    A,@A+DPTR
017A FD                MOV     R5,A
017B 7401              MOV     A,#01H
017D 93                MOVC    A,@A+DPTR
017E 900000      E     MOV     DPTR,#PartialMemSet+0EH
0181 CD                XCH     A,R5
0182 F0                MOVX    @DPTR,A
0183 A3                INC     DPTR
0184 ED                MOV     A,R5
0185 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 655
0186 EF                MOV     A,R7
0187 240E              ADD     A,#0EH
0189 FF                MOV     R7,A
018A E4                CLR     A
018B 3E                ADDC    A,R6
018C 8F82              MOV     DPL,R7
018E F583              MOV     DPH,A
0190 E4                CLR     A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 71  

0191 93                MOVC    A,@A+DPTR
0192 FF                MOV     R7,A
0193 7401              MOV     A,#01H
0195 93                MOVC    A,@A+DPTR
0196 900000      E     MOV     DPTR,#PartialMemSet+010H
0199 CF                XCH     A,R7
019A F0                MOVX    @DPTR,A
019B A3                INC     DPTR
019C EF                MOV     A,R7
019D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 658
019E E4                CLR     A
019F 900000      R     MOV     DPTR,#length
01A2 F0                MOVX    @DPTR,A
01A3 A3                INC     DPTR
01A4 F0                MOVX    @DPTR,A
01A5         ?C0082:
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 660
01A5 900000      E     MOV     DPTR,#PartialMemSet+03H
01A8 E0                MOVX    A,@DPTR
01A9 2400              ADD     A,#00H
01AB FF                MOV     R7,A
01AC 900000      E     MOV     DPTR,#PartialMemSet+02H
01AF E0                MOVX    A,@DPTR
01B0 3480              ADDC    A,#080H
01B2 FE                MOV     R6,A
01B3 900000      E     MOV     DPTR,#PartialMemSet+04H
01B6 E0                MOVX    A,@DPTR
01B7 FC                MOV     R4,A
01B8 A3                INC     DPTR
01B9 E0                MOVX    A,@DPTR
01BA FD                MOV     R5,A
01BB 7B01              MOV     R3,#01H
01BD 7A00        E     MOV     R2,#HIGH pbXFWCode
01BF 7900        E     MOV     R1,#LOW pbXFWCode
01C1 E4                CLR     A
01C2 F500        R     MOV     ?_LoadOTP_CRC8?BYTE+07H,A
01C4 120000      R     LCALL   _LoadOTP_CRC8
01C7 900000      R     MOV     DPTR,#crc
01CA EF                MOV     A,R7
01CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 664
01CC 900000      E     MOV     DPTR,#PartialMemSet+04H
01CF E0                MOVX    A,@DPTR
01D0 FC                MOV     R4,A
01D1 A3                INC     DPTR
01D2 E0                MOVX    A,@DPTR
01D3 FD                MOV     R5,A
01D4 2400        E     ADD     A,#LOW pbXFWCode+0FFFFH
01D6 F582              MOV     DPL,A
01D8 7400        E     MOV     A,#HIGH pbXFWCode+0FFFFH
01DA 3C                ADDC    A,R4
01DB F583              MOV     DPH,A
01DD E0                MOVX    A,@DPTR
01DE B50713            CJNE    A,AR7,?C0084
01E1 7400        E     MOV     A,#LOW pbXFWCode+0FFFEH
01E3 2D                ADD     A,R5
01E4 F582              MOV     DPL,A
01E6 7400        E     MOV     A,#HIGH pbXFWCode+0FFFEH
01E8 3C                ADDC    A,R4
01E9 F583              MOV     DPH,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 72  

01EB E0                MOVX    A,@DPTR
01EC FF                MOV     R7,A
01ED 900504            MOV     DPTR,#0504H
01F0 E0                MOVX    A,@DPTR
01F1 6F                XRL     A,R7
01F2 6008              JZ      ?C0083
01F4         ?C0084:
                                           ; SOURCE LINE # 666
                                           ; SOURCE LINE # 667
01F4 900000      R     MOV     DPTR,#crc
01F7 7401              MOV     A,#01H
01F9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 668
01FA 8005              SJMP    ?C0085
01FC         ?C0083:
                                           ; SOURCE LINE # 669
                                           ; SOURCE LINE # 670
01FC E4                CLR     A
01FD 900000      R     MOV     DPTR,#crc
0200 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 671
0201         ?C0085:
                                           ; SOURCE LINE # 673
0201 900000      R     MOV     DPTR,#length
0204 E4                CLR     A
0205 75F001            MOV     B,#01H
0208 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 674
020B 900000      R     MOV     DPTR,#crc
020E E0                MOVX    A,@DPTR
020F B4010F            CJNE    A,#01H,?C0081
0212 C3                CLR     C
0213 900000      R     MOV     DPTR,#length+01H
0216 E0                MOVX    A,@DPTR
0217 9404              SUBB    A,#04H
0219 900000      R     MOV     DPTR,#length
021C E0                MOVX    A,@DPTR
021D 9400              SUBB    A,#00H
021F 4084              JC      ?C0082
0221         ?C0081:
                                           ; SOURCE LINE # 676
0221 900000      E     MOV     DPTR,#PartialMemSet+04H
0224 E0                MOVX    A,@DPTR
0225 FF                MOV     R7,A
0226 A3                INC     DPTR
0227 E0                MOVX    A,@DPTR
0228 900000      R     MOV     DPTR,#tmp1
022B CF                XCH     A,R7
022C F0                MOVX    @DPTR,A
022D A3                INC     DPTR
022E EF                MOV     A,R7
022F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 678
0230 D3                SETB    C
0231 900000      R     MOV     DPTR,#length+01H
0234 E0                MOVX    A,@DPTR
0235 9403              SUBB    A,#03H
0237 900000      R     MOV     DPTR,#length
023A E0                MOVX    A,@DPTR
023B 9400              SUBB    A,#00H
023D 4030              JC      ?C0090
                                           ; SOURCE LINE # 679
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 73  

                                           ; SOURCE LINE # 680
023F 900000      E     MOV     DPTR,#bOTPCodeIndex
0242 E0                MOVX    A,@DPTR
0243 D3                SETB    C
0244 9401              SUBB    A,#01H
0246 4006              JC      ?C0435
                                           ; SOURCE LINE # 681
                                           ; SOURCE LINE # 682
0248 E0                MOVX    A,@DPTR
0249 14                DEC     A
024A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 683
024B 020000      R     LJMP    OTPCodeIndexSet
                                           ; SOURCE LINE # 684
024E         ?C0079:
                                           ; SOURCE LINE # 697
                                           ; SOURCE LINE # 698
024E         ?C0435:
024E E4                CLR     A
024F 900000      R     MOV     DPTR,#OTPCodeExit
0252 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 699
0253 900000      R     MOV     DPTR,#tmp1
0256 F0                MOVX    @DPTR,A
0257 A3                INC     DPTR
0258 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 700
                                           ; SOURCE LINE # 702
0259 8014              SJMP    ?C0090
025B         ?C0078:
                                           ; SOURCE LINE # 703
025B E4                CLR     A
025C 900000      R     MOV     DPTR,#OTPCodeExit
025F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 704
0260 900000      E     MOV     DPTR,#PartialMemSet+04H
0263 E0                MOVX    A,@DPTR
0264 FF                MOV     R7,A
0265 A3                INC     DPTR
0266 E0                MOVX    A,@DPTR
0267 900000      R     MOV     DPTR,#tmp1
026A CF                XCH     A,R7
026B F0                MOVX    @DPTR,A
026C A3                INC     DPTR
026D EF                MOV     A,R7
026E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 705
026F         ?C0090:
                                           ; SOURCE LINE # 708
026F 900000      R     MOV     DPTR,#tmp1
0272 E0                MOVX    A,@DPTR
0273 FE                MOV     R6,A
0274 A3                INC     DPTR
0275 E0                MOVX    A,@DPTR
0276 FF                MOV     R7,A
0277 900000      E     MOV     DPTR,#PartialMemSet
027A EE                MOV     A,R6
027B F0                MOVX    @DPTR,A
027C A3                INC     DPTR
027D EF                MOV     A,R7
027E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 712
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 74  

027F 300003      E     JNB     xSetFileExist,$ + 6H
0282 020000      R     LJMP    ?C0091
                                           ; SOURCE LINE # 713
                                           ; SOURCE LINE # 715
0285 900000      E     MOV     DPTR,#wSetStartAddr
0288 EE                MOV     A,R6
0289 F0                MOVX    @DPTR,A
028A A3                INC     DPTR
028B EF                MOV     A,R7
028C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 717
028D 900000      R     MOV     DPTR,#tmp2
0290 E0                MOVX    A,@DPTR
0291 FE                MOV     R6,A
0292 A3                INC     DPTR
0293 E0                MOVX    A,@DPTR
0294 FF                MOV     R7,A
0295 2410              ADD     A,#010H
0297 FD                MOV     R5,A
0298 E4                CLR     A
0299 3E                ADDC    A,R6
029A 8D82              MOV     DPL,R5
029C F583              MOV     DPH,A
029E E4                CLR     A
029F 93                MOVC    A,@A+DPTR
02A0 F500        E     MOV     wIndex,A
02A2 7401              MOV     A,#01H
02A4 93                MOVC    A,@A+DPTR
02A5 F500        E     MOV     wIndex+01H,A
                                           ; SOURCE LINE # 718
02A7 EF                MOV     A,R7
02A8 2414              ADD     A,#014H
02AA FF                MOV     R7,A
02AB E4                CLR     A
02AC 3E                ADDC    A,R6
02AD 8F82              MOV     DPL,R7
02AF F583              MOV     DPH,A
02B1 E4                CLR     A
02B2 93                MOVC    A,@A+DPTR
02B3 F500        E     MOV     wValue,A
02B5 7401              MOV     A,#01H
02B7 93                MOVC    A,@A+DPTR
02B8 F500        E     MOV     wValue+01H,A
                                           ; SOURCE LINE # 720
02BA E500        E     MOV     A,wIndex+01H
02BC F4                CPL     A
02BD 7003              JNZ     ?C0424
02BF E500        E     MOV     A,wIndex
02C1 F4                CPL     A
02C2         ?C0424:
02C2 7003              JNZ     $ + 5H
02C4 020000      R     LJMP    ?C0098
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
02C7 900000      R     MOV     DPTR,#tmp2
02CA E0                MOVX    A,@DPTR
02CB FA                MOV     R2,A
02CC A3                INC     DPTR
02CD E0                MOVX    A,@DPTR
02CE FB                MOV     R3,A
02CF 2412              ADD     A,#012H
02D1 FF                MOV     R7,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 75  

02D2 E4                CLR     A
02D3 3A                ADDC    A,R2
02D4 8F82              MOV     DPL,R7
02D6 F583              MOV     DPH,A
02D8 E4                CLR     A
02D9 93                MOVC    A,@A+DPTR
02DA FF                MOV     R7,A
02DB 7401              MOV     A,#01H
02DD 93                MOVC    A,@A+DPTR
02DE 900000      R     MOV     DPTR,#length
02E1 CF                XCH     A,R7
02E2 F0                MOVX    @DPTR,A
02E3 A3                INC     DPTR
02E4 EF                MOV     A,R7
02E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 725
02E6 900000      R     MOV     DPTR,#length
02E9 E0                MOVX    A,@DPTR
02EA FE                MOV     R6,A
02EB A3                INC     DPTR
02EC E0                MOVX    A,@DPTR
02ED FF                MOV     R7,A
02EE 900000      E     MOV     DPTR,#wSetStartAddr+01H
02F1 E0                MOVX    A,@DPTR
02F2 2F                ADD     A,R7
02F3 FF                MOV     R7,A
02F4 900000      E     MOV     DPTR,#wSetStartAddr
02F7 E0                MOVX    A,@DPTR
02F8 3E                ADDC    A,R6
02F9 900000      E     MOV     DPTR,#wIdxTabAddrOffset
02FC F0                MOVX    @DPTR,A
02FD A3                INC     DPTR
02FE EF                MOV     A,R7
02FF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 727
0300 EB                MOV     A,R3
0301 2416              ADD     A,#016H
0303 FF                MOV     R7,A
0304 E4                CLR     A
0305 3A                ADDC    A,R2
0306 8F82              MOV     DPL,R7
0308 F583              MOV     DPH,A
030A E4                CLR     A
030B 93                MOVC    A,@A+DPTR
030C FE                MOV     R6,A
030D 7401              MOV     A,#01H
030F 93                MOVC    A,@A+DPTR
0310 FF                MOV     R7,A
0311 900000      R     MOV     DPTR,#length2
0314 EE                MOV     A,R6
0315 F0                MOVX    @DPTR,A
0316 A3                INC     DPTR
0317 EF                MOV     A,R7
0318 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 730
0319 2500        E     ADD     A,wValue+01H
031B 900000      E     MOV     DPTR,#wSetFileDataAddr+01H
031E F0                MOVX    @DPTR,A
031F E500        E     MOV     A,wValue
0321 3E                ADDC    A,R6
0322 900000      E     MOV     DPTR,#wSetFileDataAddr
0325 F0                MOVX    @DPTR,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 76  

                                           ; SOURCE LINE # 733
0326 E4                CLR     A
0327 900000      R     MOV     DPTR,#tmp2
032A F0                MOVX    @DPTR,A
032B A3                INC     DPTR
032C F0                MOVX    @DPTR,A
032D         ?C0095:
                                           ; SOURCE LINE # 734
                                           ; SOURCE LINE # 735
032D E4                CLR     A
032E 2500        E     ADD     A,wIndex+01H
0330 FF                MOV     R7,A
0331 E500        E     MOV     A,wIndex
0333 3480              ADDC    A,#080H
0335 FE                MOV     R6,A
0336 900000      R     MOV     DPTR,#length
0339 E0                MOVX    A,@DPTR
033A FC                MOV     R4,A
033B A3                INC     DPTR
033C E0                MOVX    A,@DPTR
033D FD                MOV     R5,A
033E 900000      E     MOV     DPTR,#wSetStartAddr
0341 120000      R     LCALL   L?0453
0344 900000      R     MOV     DPTR,#crc
0347 EF                MOV     A,R7
0348 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 737
0349 900000      R     MOV     DPTR,#tmp2
034C E4                CLR     A
034D 75F001            MOV     B,#01H
0350 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 738
0353 900000      R     MOV     DPTR,#length
0356 E0                MOVX    A,@DPTR
0357 FC                MOV     R4,A
0358 A3                INC     DPTR
0359 E0                MOVX    A,@DPTR
035A FD                MOV     R5,A
035B 900000      E     MOV     DPTR,#wSetStartAddr+01H
035E E0                MOVX    A,@DPTR
035F 2D                ADD     A,R5
0360 FD                MOV     R5,A
0361 900000      E     MOV     DPTR,#wSetStartAddr
0364 E0                MOVX    A,@DPTR
0365 3C                ADDC    A,R4
0366 FC                MOV     R4,A
0367 7400        E     MOV     A,#LOW pbXFWCode+0FFFFH
0369 2D                ADD     A,R5
036A F582              MOV     DPL,A
036C 7400        E     MOV     A,#HIGH pbXFWCode+0FFFFH
036E 3C                ADDC    A,R4
036F F583              MOV     DPH,A
0371 E0                MOVX    A,@DPTR
0372 6F                XRL     A,R7
0373 600F              JZ      ?C0094
0375 C3                CLR     C
0376 900000      R     MOV     DPTR,#tmp2+01H
0379 E0                MOVX    A,@DPTR
037A 9404              SUBB    A,#04H
037C 900000      R     MOV     DPTR,#tmp2
037F E0                MOVX    A,@DPTR
0380 9400              SUBB    A,#00H
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 77  

0382 40A9              JC      ?C0095
0384         ?C0094:
                                           ; SOURCE LINE # 741
0384 D3                SETB    C
0385 900000      R     MOV     DPTR,#tmp2+01H
0388 E0                MOVX    A,@DPTR
0389 9403              SUBB    A,#03H
038B 900000      R     MOV     DPTR,#tmp2
038E E0                MOVX    A,@DPTR
038F 9400              SUBB    A,#00H
0391 4003              JC      ?C0097
                                           ; SOURCE LINE # 742
                                           ; SOURCE LINE # 743
                                           ; SOURCE LINE # 744
0393 020000      R     LJMP    ?C0436
                                           ; SOURCE LINE # 745
0396         ?C0097:
                                           ; SOURCE LINE # 747
0396 900000      R     MOV     DPTR,#length
0399 E0                MOVX    A,@DPTR
039A FE                MOV     R6,A
039B A3                INC     DPTR
039C E0                MOVX    A,@DPTR
039D FF                MOV     R7,A
039E A3                INC     DPTR
039F E0                MOVX    A,@DPTR
03A0 FC                MOV     R4,A
03A1 A3                INC     DPTR
03A2 E0                MOVX    A,@DPTR
03A3 FD                MOV     R5,A
03A4 2F                ADD     A,R7
03A5 FF                MOV     R7,A
03A6 EC                MOV     A,R4
03A7 3E                ADDC    A,R6
03A8 900000      E     MOV     DPTR,#PartialMemSet
03AB 8FF0              MOV     B,R7
03AD 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 752
03B0 E4                CLR     A
03B1 2500        E     ADD     A,wValue+01H
03B3 FF                MOV     R7,A
03B4 E500        E     MOV     A,wValue
03B6 3480              ADDC    A,#080H
03B8 FE                MOV     R6,A
03B9 900000      E     MOV     DPTR,#wIdxTabAddrOffset
03BC 120000      R     LCALL   L?0453
03BF 900000      R     MOV     DPTR,#crc
03C2 EF                MOV     A,R7
03C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 762
03C4 D200        E     SETB    xSetFileExist
                                           ; SOURCE LINE # 763
03C6 D200        E     SETB    xOTPSettingExist
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 765
03C8 8062              SJMP    ?C0098
03CA         ?C0091:
                                           ; SOURCE LINE # 766
                                           ; SOURCE LINE # 767
03CA E4                CLR     A
03CB 900000      R     MOV     DPTR,#length
03CE F0                MOVX    @DPTR,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 78  

03CF A3                INC     DPTR
03D0 F0                MOVX    @DPTR,A
03D1         ?C0099:
                                           ; SOURCE LINE # 768
03D1 900000      R     MOV     DPTR,#tmp1
03D4 120000      R     LCALL   L?0454
03D7 EF                MOV     A,R7
03D8 7018              JNZ     ?C0100
03DA C3                CLR     C
03DB 900000      R     MOV     DPTR,#length+01H
03DE E0                MOVX    A,@DPTR
03DF 9403              SUBB    A,#03H
03E1 900000      R     MOV     DPTR,#length
03E4 E0                MOVX    A,@DPTR
03E5 9400              SUBB    A,#00H
03E7 5009              JNC     ?C0100
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 774
03E9 E4                CLR     A
03EA 75F001            MOV     B,#01H
03ED 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 775
03F0 80DF              SJMP    ?C0099
03F2         ?C0100:
                                           ; SOURCE LINE # 777
03F2 C3                CLR     C
03F3 900000      R     MOV     DPTR,#length+01H
03F6 E0                MOVX    A,@DPTR
03F7 9403              SUBB    A,#03H
03F9 900000      R     MOV     DPTR,#length
03FC E0                MOVX    A,@DPTR
03FD 9400              SUBB    A,#00H
03FF 5029              JNC     ?C0101
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
0401 900000      E     MOV     DPTR,#PartialMemSet
0404 E500        E     MOV     A,wValue
0406 8500F0      E     MOV     B,wValue+01H
0409 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 780
040C 900000      R     MOV     DPTR,#tmp1
040F E0                MOVX    A,@DPTR
0410 FE                MOV     R6,A
0411 A3                INC     DPTR
0412 E0                MOVX    A,@DPTR
0413 FF                MOV     R7,A
0414 900000      E     MOV     DPTR,#wSetStartAddr
0417 EE                MOV     A,R6
0418 F0                MOVX    @DPTR,A
0419 A3                INC     DPTR
041A EF                MOV     A,R7
041B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 781
041C 900000      E     MOV     DPTR,#wIdxTabAddrOffset+01H
041F E0                MOVX    A,@DPTR
0420 2F                ADD     A,R7
0421 F0                MOVX    @DPTR,A
0422 900000      E     MOV     DPTR,#wIdxTabAddrOffset
0425 E0                MOVX    A,@DPTR
0426 3E                ADDC    A,R6
0427 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 782
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 79  

0428 8002              SJMP    ?C0098
042A         ?C0101:
                                           ; SOURCE LINE # 783
                                           ; SOURCE LINE # 784
042A C200        E     CLR     xSetFileExist
                                           ; SOURCE LINE # 785
                                           ; SOURCE LINE # 786
042C         ?C0098:
                                           ; SOURCE LINE # 788
042C         ?C0436:
042C E4                CLR     A
042D FF                MOV     R7,A
042E 120000      R     LCALL   _OTP_ROMEnable
                                           ; SOURCE LINE # 789
0431 900000      R     MOV     DPTR,#OTPCodeExit
0434 E0                MOVX    A,@DPTR
0435 FF                MOV     R7,A
                                           ; SOURCE LINE # 790
0436         ?C0074:
0436 22                RET     
             ; FUNCTION FWLoadOTP (END)

             ; FUNCTION OTPModeEnter (BEGIN)
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
                                           ; SOURCE LINE # 799
0000 120000      R     LCALL   MainFP2Dummy
                                           ; SOURCE LINE # 803
0003 C200        E     CLR     xFWPartialLoad
                                           ; SOURCE LINE # 809
0005 22                RET     
             ; FUNCTION OTPModeEnter (END)

             ; FUNCTION OTPModeLeave (BEGIN)
                                           ; SOURCE LINE # 811
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 826
0000 22                RET     
             ; FUNCTION OTPModeLeave (END)

             ; FUNCTION HWInit (BEGIN)
                                           ; SOURCE LINE # 832
                                           ; SOURCE LINE # 833
                                           ; SOURCE LINE # 834
0000 900002            MOV     DPTR,#02H
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 838
0005 900011            MOV     DPTR,#011H
0008 74FE              MOV     A,#0FEH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 839
000B A3                INC     DPTR
000C 7403              MOV     A,#03H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 841
000F 900010            MOV     DPTR,#010H
0012 E4                CLR     A
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 842
0014 900013            MOV     DPTR,#013H
0017 F0                MOVX    @DPTR,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 80  

                                           ; SOURCE LINE # 843
0018 A3                INC     DPTR
0019 740C              MOV     A,#0CH
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 846
001C 90000D            MOV     DPTR,#0DH
001F 7403              MOV     A,#03H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 847
0022 90000C            MOV     DPTR,#0CH
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 850
0026 900057            MOV     DPTR,#057H
0029 E4                CLR     A
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 851
002B 900056            MOV     DPTR,#056H
002E 74FF              MOV     A,#0FFH
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 854
0031 900040            MOV     DPTR,#040H
0034 7402              MOV     A,#02H
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 855
0037 900027            MOV     DPTR,#027H
003A E0                MOVX    A,@DPTR
003B 54EF              ANL     A,#0EFH
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 859
003E 90004D            MOV     DPTR,#04DH
0041 E4                CLR     A
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 862
0043 900026            MOV     DPTR,#026H
0046 E0                MOVX    A,@DPTR
0047 4440              ORL     A,#040H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 863
004A 22                RET     
             ; FUNCTION HWInit (END)

             ; FUNCTION EnableConnection (BEGIN)
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 866
                                           ; SOURCE LINE # 867
0000 900008            MOV     DPTR,#08H
0003 8012              SJMP    ?C0437
0005         ?C0106:
                                           ; SOURCE LINE # 868
0005 900008            MOV     DPTR,#08H
0008 E0                MOVX    A,@DPTR
0009 5403              ANL     A,#03H
000B 7010              JNZ     ?C0109
                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 870
000D 900007            MOV     DPTR,#07H
0010 E0                MOVX    A,@DPTR
0011 30E4F1            JNB     ACC.4,?C0106
                                           ; SOURCE LINE # 871
0014 900028            MOV     DPTR,#028H
0017         ?C0437:
0017 E0                MOVX    A,@DPTR
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 81  

0018 4404              ORL     A,#04H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 872
                                           ; SOURCE LINE # 873
001B 80E8              SJMP    ?C0106
                                           ; SOURCE LINE # 874
001D         ?C0109:
001D 22                RET     
             ; FUNCTION EnableConnection (END)

             ; FUNCTION Int0Enable (BEGIN)
                                           ; SOURCE LINE # 876
                                           ; SOURCE LINE # 877
                                           ; SOURCE LINE # 878
0000 43A881            ORL     IE,#081H
                                           ; SOURCE LINE # 879
0003 C288              CLR     IT0
                                           ; SOURCE LINE # 884
0005 90000C            MOV     DPTR,#0CH
0008 7403              MOV     A,#03H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 885
000B 22                RET     
             ; FUNCTION Int0Enable (END)

             ; FUNCTION Int0Disable (BEGIN)
                                           ; SOURCE LINE # 887
                                           ; SOURCE LINE # 888
                                           ; SOURCE LINE # 889
0000 53A8FE            ANL     IE,#0FEH
                                           ; SOURCE LINE # 890
0003 22                RET     
             ; FUNCTION Int0Disable (END)

             ; FUNCTION Int0ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
                                           ; SOURCE LINE # 892
                                           ; SOURCE LINE # 894
0006 90000C            MOV     DPTR,#0CH
0009 E0                MOVX    A,@DPTR
000A F500        E     MOV     bInt0State,A
                                           ; SOURCE LINE # 895
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 896
000D D082              POP     DPL
000F D083              POP     DPH
0011 D0E0              POP     ACC
0013 32                RETI    
             ; FUNCTION Int0ISR (END)

             ; FUNCTION Int1Enable (BEGIN)
                                           ; SOURCE LINE # 898
                                           ; SOURCE LINE # 899
                                           ; SOURCE LINE # 900
0000 43A884            ORL     IE,#084H
                                           ; SOURCE LINE # 901
0003 C28A              CLR     IT1
                                           ; SOURCE LINE # 905
0005 22                RET     
             ; FUNCTION Int1Enable (END)
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 82  


             ; FUNCTION Int1Disable (BEGIN)
                                           ; SOURCE LINE # 907
                                           ; SOURCE LINE # 908
                                           ; SOURCE LINE # 909
0000 53A8FB            ANL     IE,#0FBH
                                           ; SOURCE LINE # 910
0003 22                RET     
             ; FUNCTION Int1Disable (END)

             ; FUNCTION Int1ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C083              PUSH    DPH
0004 C082              PUSH    DPL
0006 C0D0              PUSH    PSW
0008 75D008            MOV     PSW,#08H
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 914
000B 900057            MOV     DPTR,#057H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 900056            MOV     DPTR,#056H
0013 E0                MOVX    A,@DPTR
0014 5F                ANL     A,R7
0015 4200        E     ORL     bFrameFlag,A
                                           ; SOURCE LINE # 916
0017 E500        E     MOV     A,bFrameFlag
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 918
001A D0D0              POP     PSW
001C D082              POP     DPL
001E D083              POP     DPH
0020 D0E0              POP     ACC
0022 32                RETI    
             ; FUNCTION Int1ISR (END)

             ; FUNCTION _SPIWriteCMD (BEGIN)
                                           ; SOURCE LINE # 925
0000 8F00        R     MOV     cmd,R7
                                           ; SOURCE LINE # 926
                                           ; SOURCE LINE # 928
0002 120000      R     LCALL   CheckSPIRdyStatus
                                           ; SOURCE LINE # 930
0005 900049            MOV     DPTR,#049H
0008 7414              MOV     A,#014H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 931
000B 90004B            MOV     DPTR,#04BH
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 932
0011 900000      E     MOV     DPTR,#pbIICBuf
0014 E500        R     MOV     A,cmd
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 933
0017 90004A            MOV     DPTR,#04AH
001A 7401              MOV     A,#01H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 934
001D 900049            MOV     DPTR,#049H
0020 7435              MOV     A,#035H
0022 F0                MOVX    @DPTR,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 83  

0023         ?C0116:
                                           ; SOURCE LINE # 935
0023 900049            MOV     DPTR,#049H
0026 E0                MOVX    A,@DPTR
0027 20E0F9            JB      ACC.0,?C0116
002A         ?C0117:
                                           ; SOURCE LINE # 936
002A 900049            MOV     DPTR,#049H
002D E0                MOVX    A,@DPTR
002E 54FB              ANL     A,#0FBH
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 937
0031 22                RET     
             ; FUNCTION _SPIWriteCMD (END)

             ; FUNCTION SPIWriteEnable (BEGIN)
                                           ; SOURCE LINE # 939
                                           ; SOURCE LINE # 940
                                           ; SOURCE LINE # 941
0000 7F06              MOV     R7,#06H
0002 020000      R     LJMP    _SPIWriteCMD
             ; FUNCTION SPIWriteEnable (END)

             ; FUNCTION CheckSPIRdyStatus (BEGIN)
                                           ; SOURCE LINE # 944
                                           ; SOURCE LINE # 945
                                           ; SOURCE LINE # 947
0000 900000      R     MOV     DPTR,#nCnt
0003 740A              MOV     A,#0AH
0005 F0                MOVX    @DPTR,A
0006         ?C0122:
                                           ; SOURCE LINE # 948
                                           ; SOURCE LINE # 949
0006 900049            MOV     DPTR,#049H
0009 7414              MOV     A,#014H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 950
000C 90004B            MOV     DPTR,#04BH
000F 7401              MOV     A,#01H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 951
0012 900000      E     MOV     DPTR,#pbIICBuf
0015 7405              MOV     A,#05H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 952
0018 90004A            MOV     DPTR,#04AH
001B 7401              MOV     A,#01H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 953
001E 900046            MOV     DPTR,#046H
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 954
0022 90004C            MOV     DPTR,#04CH
0025 E4                CLR     A
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 955
0027 900049            MOV     DPTR,#049H
002A 7437              MOV     A,#037H
002C F0                MOVX    @DPTR,A
002D         ?C0123:
                                           ; SOURCE LINE # 956
002D 900049            MOV     DPTR,#049H
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 84  

0030 E0                MOVX    A,@DPTR
0031 20E0F9            JB      ACC.0,?C0123
0034         ?C0124:
                                           ; SOURCE LINE # 958
0034 900049            MOV     DPTR,#049H
0037 E0                MOVX    A,@DPTR
0038 54FB              ANL     A,#0FBH
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 959
003B 900000      E     MOV     DPTR,#pbIICBuf
003E E0                MOVX    A,@DPTR
003F 30E014            JNB     ACC.0,?C0121
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 961
0042         ?C0125:
                                           ; SOURCE LINE # 966
0042 900000      R     MOV     DPTR,#nCnt
0045 E0                MOVX    A,@DPTR
0046 14                DEC     A
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 967
0048 7FF0              MOV     R7,#0F0H
004A 120000      E     LCALL   _Delay10US
                                           ; SOURCE LINE # 968
004D 900000      R     MOV     DPTR,#nCnt
0050 E0                MOVX    A,@DPTR
0051 D3                SETB    C
0052 9400              SUBB    A,#00H
0054 50B0              JNC     ?C0122
0056         ?C0121:
                                           ; SOURCE LINE # 973
0056 900000      E     MOV     DPTR,#pbIICBuf
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
                                           ; SOURCE LINE # 974
005B         ?C0126:
005B 22                RET     
             ; FUNCTION CheckSPIRdyStatus (END)

             ; FUNCTION SPIWriteDisable (BEGIN)
                                           ; SOURCE LINE # 977
                                           ; SOURCE LINE # 978
                                           ; SOURCE LINE # 979
0000 7F04              MOV     R7,#04H
0002 020000      R     LJMP    _SPIWriteCMD
             ; FUNCTION SPIWriteDisable (END)

             ; FUNCTION SST_EnableWriteStatus (BEGIN)
                                           ; SOURCE LINE # 982
                                           ; SOURCE LINE # 983
                                           ; SOURCE LINE # 984
0000 7F50              MOV     R7,#050H
0002 020000      R     LJMP    _SPIWriteCMD
             ; FUNCTION SST_EnableWriteStatus (END)

             ; FUNCTION _SPIWriteStatus (BEGIN)
                                           ; SOURCE LINE # 987
0000 8F00        R     MOV     statusvalue,R7
                                           ; SOURCE LINE # 988
                                           ; SOURCE LINE # 990
0002 120000      R     LCALL   SST_EnableWriteStatus
                                           ; SOURCE LINE # 993
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 85  

0005 900049            MOV     DPTR,#049H
0008 7414              MOV     A,#014H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 994
000B 90004B            MOV     DPTR,#04BH
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 995
0011 900000      E     MOV     DPTR,#pbIICBuf
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 996
0015 A3                INC     DPTR
0016 E500        R     MOV     A,statusvalue
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 997
0019 90004A            MOV     DPTR,#04AH
001C 7402              MOV     A,#02H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 998
001F 900049            MOV     DPTR,#049H
0022 7435              MOV     A,#035H
0024 F0                MOVX    @DPTR,A
0025         ?C0129:
                                           ; SOURCE LINE # 999
0025 900049            MOV     DPTR,#049H
0028 E0                MOVX    A,@DPTR
0029 20E0F9            JB      ACC.0,?C0129
002C         ?C0130:
                                           ; SOURCE LINE # 1000
002C 900049            MOV     DPTR,#049H
002F E0                MOVX    A,@DPTR
0030 54FB              ANL     A,#0FBH
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1001
0033 22                RET     
             ; FUNCTION _SPIWriteStatus (END)

             ; FUNCTION SPIRDID (BEGIN)
                                           ; SOURCE LINE # 1025
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1030
0000 E4                CLR     A
0001 900000      E     MOV     DPTR,#bSPIManufacturer
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1031
0005 F500        R     MOV     i,A
0007         ?C0132:
                                           ; SOURCE LINE # 1032
0007 900049            MOV     DPTR,#049H
000A 7414              MOV     A,#014H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1033
000D 90004B            MOV     DPTR,#04BH
0010 7401              MOV     A,#01H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1034
0013 E500        R     MOV     A,i
0015 25E0              ADD     A,ACC
0017 25E0              ADD     A,ACC
0019 2400        R     ADD     A,#LOW SPI_Cmd_Set+01H
001B F582              MOV     DPL,A
001D E4                CLR     A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 86  

001E 3400        R     ADDC    A,#HIGH SPI_Cmd_Set+01H
0020 F583              MOV     DPH,A
0022 E4                CLR     A
0023 93                MOVC    A,@A+DPTR
0024 900000      E     MOV     DPTR,#pbIICBuf
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1035
0028 E0                MOVX    A,@DPTR
0029 64AB              XRL     A,#0ABH
002B 6008              JZ      ?C0135
                                           ; SOURCE LINE # 1036
002D 90004A            MOV     DPTR,#04AH
0030 7401              MOV     A,#01H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1037
0033 8013              SJMP    ?C0136
0035         ?C0135:
                                           ; SOURCE LINE # 1039
0035 E4                CLR     A
0036 900000      E     MOV     DPTR,#pbIICBuf+03H
0039 F0                MOVX    @DPTR,A
003A 900000      E     MOV     DPTR,#pbIICBuf+02H
003D F0                MOVX    @DPTR,A
003E 900000      E     MOV     DPTR,#pbIICBuf+01H
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1040
0042 90004A            MOV     DPTR,#04AH
0045 7404              MOV     A,#04H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1041
0048         ?C0136:
                                           ; SOURCE LINE # 1042
0048 900046            MOV     DPTR,#046H
004B 7401              MOV     A,#01H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1043
004E 90004C            MOV     DPTR,#04CH
0051 E4                CLR     A
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1044
0053 900049            MOV     DPTR,#049H
0056 7437              MOV     A,#037H
0058 F0                MOVX    @DPTR,A
0059         ?C0137:
                                           ; SOURCE LINE # 1045
0059 900049            MOV     DPTR,#049H
005C E0                MOVX    A,@DPTR
005D 20E0F9            JB      ACC.0,?C0137
0060         ?C0138:
                                           ; SOURCE LINE # 1047
0060 900049            MOV     DPTR,#049H
0063 E0                MOVX    A,@DPTR
0064 54FB              ANL     A,#0FBH
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1049
0067 E500        R     MOV     A,i
0069 25E0              ADD     A,ACC
006B 25E0              ADD     A,ACC
006D 2400        R     ADD     A,#LOW SPI_Cmd_Set
006F F582              MOV     DPL,A
0071 E4                CLR     A
0072 3400        R     ADDC    A,#HIGH SPI_Cmd_Set
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 87  

0074 F583              MOV     DPH,A
0076 E4                CLR     A
0077 93                MOVC    A,@A+DPTR
0078 FF                MOV     R7,A
0079 900000      E     MOV     DPTR,#pbIICBuf
007C E0                MOVX    A,@DPTR
007D 6F                XRL     A,R7
007E 7052              JNZ     ?C0134
                                           ; SOURCE LINE # 1054
0080 900000      E     MOV     DPTR,#bSPIManufacturer
0083 E500        R     MOV     A,i
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1058
0086 701D              JNZ     ?C0140
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1063
0088 900000      E     MOV     DPTR,#bPrpIndex1Len
008B 7404              MOV     A,#04H
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1064
008E 900000      E     MOV     DPTR,#bPrpIndex2Dif
0091 7406              MOV     A,#06H
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1065
0094 900000      E     MOV     DPTR,#wPrpDataStartAddr
0097 7480              MOV     A,#080H
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B 74A0              MOV     A,#0A0H
009D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1066
009E 900000      E     MOV     DPTR,#wPrpTag2Addr
00A1 748F              MOV     A,#08FH
                                           ; SOURCE LINE # 1067
00A3 8026              SJMP    ?C0438
00A5         ?C0140:
                                           ; SOURCE LINE # 1068
                                           ; SOURCE LINE # 1073
00A5 900000      E     MOV     DPTR,#bSPIManufacturer
00A8 E0                MOVX    A,@DPTR
00A9 B40405            CJNE    A,#04H,?C0142
                                           ; SOURCE LINE # 1074
                                           ; SOURCE LINE # 1076
00AC E4                CLR     A
00AD FF                MOV     R7,A
00AE 120000      R     LCALL   _SPIWriteStatus
                                           ; SOURCE LINE # 1077
00B1         ?C0142:
                                           ; SOURCE LINE # 1079
00B1 900000      E     MOV     DPTR,#bPrpIndex1Len
00B4 741F              MOV     A,#01FH
00B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1080
00B7 900000      E     MOV     DPTR,#bPrpIndex2Dif
00BA 7401              MOV     A,#01H
00BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1081
00BD 900000      E     MOV     DPTR,#wPrpDataStartAddr
00C0 7484              MOV     A,#084H
00C2 F0                MOVX    @DPTR,A
00C3 A3                INC     DPTR
00C4 E4                CLR     A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 88  

00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1082
00C6 900000      E     MOV     DPTR,#wPrpTag2Addr
00C9 74FF              MOV     A,#0FFH
00CB         ?C0438:
00CB F0                MOVX    @DPTR,A
00CC A3                INC     DPTR
00CD 74E0              MOV     A,#0E0H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1083
                                           ; SOURCE LINE # 1085
00D0 800C              SJMP    ?C0133
                                           ; SOURCE LINE # 1086
                                           ; SOURCE LINE # 1087
00D2         ?C0134:
00D2 0500        R     INC     i
00D4 E500        R     MOV     A,i
00D6 C3                CLR     C
00D7 9405              SUBB    A,#05H
00D9 5003              JNC     $ + 5H
00DB 020000      R     LJMP    ?C0132
00DE         ?C0133:
                                           ; SOURCE LINE # 1089
00DE E500        R     MOV     A,i
00E0 B40503            CJNE    A,#05H,?C0143
                                           ; SOURCE LINE # 1090
00E3 7F00              MOV     R7,#00H
00E5 22                RET     
00E6         ?C0143:
                                           ; SOURCE LINE # 1092
00E6 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1093
00E8         ?C0144:
00E8 22                RET     
             ; FUNCTION SPIRDID (END)

             ; FUNCTION EraseSPIFlash (BEGIN)
                                           ; SOURCE LINE # 1098
                                           ; SOURCE LINE # 1099
                                           ; SOURCE LINE # 1102
0000 900049            MOV     DPTR,#049H
0003 7414              MOV     A,#014H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1103
0006 90004B            MOV     DPTR,#04BH
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1104
000C 900000      E     MOV     DPTR,#bSPIManufacturer
000F E0                MOVX    A,@DPTR
0010 25E0              ADD     A,ACC
0012 25E0              ADD     A,ACC
0014 2400        R     ADD     A,#LOW SPI_Cmd_Set+02H
0016 F582              MOV     DPL,A
0018 E4                CLR     A
0019 3400        R     ADDC    A,#HIGH SPI_Cmd_Set+02H
001B F583              MOV     DPH,A
001D E4                CLR     A
001E 93                MOVC    A,@A+DPTR
001F 900000      E     MOV     DPTR,#pbIICBuf
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1105
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 89  

0023 90004A            MOV     DPTR,#04AH
0026 7401              MOV     A,#01H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1106
0029 900049            MOV     DPTR,#049H
002C 7435              MOV     A,#035H
002E F0                MOVX    @DPTR,A
002F         ?C0145:
                                           ; SOURCE LINE # 1107
002F 900049            MOV     DPTR,#049H
0032 E0                MOVX    A,@DPTR
0033 20E0F9            JB      ACC.0,?C0145
0036         ?C0146:
                                           ; SOURCE LINE # 1108
0036 900049            MOV     DPTR,#049H
0039 E0                MOVX    A,@DPTR
003A 54FB              ANL     A,#0FBH
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1109
003D 22                RET     
             ; FUNCTION EraseSPIFlash (END)

             ; FUNCTION EraseBlockSPIFlash (BEGIN)
                                           ; SOURCE LINE # 1113
                                           ; SOURCE LINE # 1114
                                           ; SOURCE LINE # 1116
0000 120000      R     LCALL   SPIWriteEnable
                                           ; SOURCE LINE # 1119
0003 900049            MOV     DPTR,#049H
0006 7414              MOV     A,#014H
0008 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1120
0009 90004B            MOV     DPTR,#04BH
000C 7401              MOV     A,#01H
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1121
000F 900000      E     MOV     DPTR,#bSPIManufacturer
0012 E0                MOVX    A,@DPTR
0013 25E0              ADD     A,ACC
0015 25E0              ADD     A,ACC
0017 2400        R     ADD     A,#LOW SPI_Cmd_Set+03H
0019 F582              MOV     DPL,A
001B E4                CLR     A
001C 3400        R     ADDC    A,#HIGH SPI_Cmd_Set+03H
001E F583              MOV     DPH,A
0020 E4                CLR     A
0021 93                MOVC    A,@A+DPTR
0022 900000      E     MOV     DPTR,#pbIICBuf
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1122
0026 E4                CLR     A
0027 A3                INC     DPTR
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1123
0029 A3                INC     DPTR
002A 7481              MOV     A,#081H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1124
002D E4                CLR     A
002E A3                INC     DPTR
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1125
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 90  

0030 90004A            MOV     DPTR,#04AH
0033 7404              MOV     A,#04H
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1126
0036 900049            MOV     DPTR,#049H
0039 7435              MOV     A,#035H
003B F0                MOVX    @DPTR,A
003C         ?C0148:
                                           ; SOURCE LINE # 1127
003C 900049            MOV     DPTR,#049H
003F E0                MOVX    A,@DPTR
0040 20E0F9            JB      ACC.0,?C0148
0043         ?C0149:
                                           ; SOURCE LINE # 1128
0043 900049            MOV     DPTR,#049H
0046 E0                MOVX    A,@DPTR
0047 54FB              ANL     A,#0FBH
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1129
004A 22                RET     
             ; FUNCTION EraseBlockSPIFlash (END)

             ; FUNCTION _CheckErraseTag_Cal (BEGIN)
                                           ; SOURCE LINE # 1131
0000 8E00        R     MOV     wAddr,R6
0002 8F00        R     MOV     wAddr+01H,R7
                                           ; SOURCE LINE # 1132
                                           ; SOURCE LINE # 1133
0004 E4                CLR     A
0005 7800        R     MOV     R0,#LOW i
0007 F6                MOV     @R0,A
0008         ?C0151:
                                           ; SOURCE LINE # 1134
0008 7B01              MOV     R3,#01H
000A 7A00        E     MOV     R2,#HIGH pbIICBuf
000C 7900        E     MOV     R1,#LOW pbIICBuf
000E 7D01              MOV     R5,#01H
0010 AF00        R     MOV     R7,wAddr+01H
0012 AE00        R     MOV     R6,wAddr
0014 120000      R     LCALL   _I2CEEPROMReadData
0017 EF                MOV     A,R7
0018 6019              JZ      ?C0152
                                           ; SOURCE LINE # 1135
                                           ; SOURCE LINE # 1136
001A 900000      E     MOV     DPTR,#pbIICBuf
001D E0                MOVX    A,@DPTR
001E B4FF03            CJNE    A,#0FFH,?C0153
                                           ; SOURCE LINE # 1137
                                           ; SOURCE LINE # 1138
0021 7F01              MOV     R7,#01H
0023 22                RET     
                                           ; SOURCE LINE # 1139
0024         ?C0153:
                                           ; SOURCE LINE # 1140
0024 7800        R     MOV     R0,#LOW i
0026 06                INC     @R0
                                           ; SOURCE LINE # 1141
0027 E6                MOV     A,@R0
0028 D3                SETB    C
0029 9403              SUBB    A,#03H
002B 40DB              JC      ?C0151
                                           ; SOURCE LINE # 1142
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 91  

                                           ; SOURCE LINE # 1143
002D 120000      R     LCALL   EraseBlockSPIFlash
                                           ; SOURCE LINE # 1149
0030 7F00              MOV     R7,#00H
0032 22                RET     
                                           ; SOURCE LINE # 1150
                                           ; SOURCE LINE # 1151
0033         ?C0152:
                                           ; SOURCE LINE # 1152
0033 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1153
0035         ?C0154:
0035 22                RET     
             ; FUNCTION _CheckErraseTag_Cal (END)

             ; FUNCTION CheckErraseTag (BEGIN)
                                           ; SOURCE LINE # 1155
                                           ; SOURCE LINE # 1156
                                           ; SOURCE LINE # 1157
0000 900000      E     MOV     DPTR,#wPrpTag2Addr
0003 E0                MOVX    A,@DPTR
0004 FE                MOV     R6,A
0005 A3                INC     DPTR
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 120000      R     LCALL   _CheckErraseTag_Cal
000B EF                MOV     A,R7
000C 600D              JZ      ?C0156
                                           ; SOURCE LINE # 1158
                                           ; SOURCE LINE # 1159
000E 7F00              MOV     R7,#00H
0010 7E80              MOV     R6,#080H
0012 120000      R     LCALL   _CheckErraseTag_Cal
0015 EF                MOV     A,R7
0016 6003              JZ      ?C0156
                                           ; SOURCE LINE # 1160
0018 7F01              MOV     R7,#01H
001A 22                RET     
                                           ; SOURCE LINE # 1161
                                           ; SOURCE LINE # 1162
001B         ?C0156:
                                           ; SOURCE LINE # 1163
001B 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1164
001D         ?C0158:
001D 22                RET     
             ; FUNCTION CheckErraseTag (END)

             ; FUNCTION _ReadBackCheck (BEGIN)
                                           ; SOURCE LINE # 1166
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1167
                                           ; SOURCE LINE # 1168
0000 7B01              MOV     R3,#01H
0002 7A00        E     MOV     R2,#HIGH pbIICBuf
0004 7900        E     MOV     R1,#LOW pbIICBuf
0006 7D01              MOV     R5,#01H
0008 120000      R     LCALL   _I2CEEPROMReadData
                                           ; SOURCE LINE # 1169
000B 900000      E     MOV     DPTR,#pbIICBuf
000E E0                MOVX    A,@DPTR
000F 6003              JZ      ?C0159
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 92  

                                           ; SOURCE LINE # 1170
0011 7F00              MOV     R7,#00H
0013 22                RET     
0014         ?C0159:
                                           ; SOURCE LINE # 1172
0014 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1173
0016         ?C0160:
0016 22                RET     
             ; FUNCTION _ReadBackCheck (END)

             ; FUNCTION Timer2ISR (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0D0              PUSH    PSW
                                           ; SOURCE LINE # 1200
                                           ; SOURCE LINE # 1204
0004 E500        E     MOV     A,bAsynPrpSaveCnt
0006 B4640D            CJNE    A,#064H,?C0162
                                           ; SOURCE LINE # 1206
0009 75C800            MOV     T2CON,#00H
                                           ; SOURCE LINE # 1207
000C 53A8DF            ANL     IE,#0DFH
                                           ; SOURCE LINE # 1208
000F 750000      E     MOV     bAsynPrpSaveCnt,#00H
                                           ; SOURCE LINE # 1210
0012 D200        E     SETB    xAsyncSavePrp
                                           ; SOURCE LINE # 1211
0014 8002              SJMP    ?C0163
0016         ?C0162:
                                           ; SOURCE LINE # 1212
0016 0500        E     INC     bAsynPrpSaveCnt
                                           ; SOURCE LINE # 1213
0018         ?C0163:
                                           ; SOURCE LINE # 1214
0018 C2CF              CLR     TF2
                                           ; SOURCE LINE # 1215
001A D0D0              POP     PSW
001C D0E0              POP     ACC
001E 32                RETI    
             ; FUNCTION Timer2ISR (END)

             ; FUNCTION EanbleTimer2 (BEGIN)
                                           ; SOURCE LINE # 1217
                                           ; SOURCE LINE # 1218
                                           ; SOURCE LINE # 1221
0000 20CA1B            JB      TR2,?C0166
                                           ; SOURCE LINE # 1222
0003 53A8DF            ANL     IE,#0DFH
                                           ; SOURCE LINE # 1223
0006 C200        E     CLR     xAsyncSavePrp
                                           ; SOURCE LINE # 1224
0008 E4                CLR     A
0009 F500        E     MOV     bAsynPrpSaveCnt,A
                                           ; SOURCE LINE # 1226
000B F5C8              MOV     T2CON,A
                                           ; SOURCE LINE # 1228
000D 75CD3C            MOV     TH2,#03CH
                                           ; SOURCE LINE # 1229
0010 75CCB0            MOV     TL2,#0B0H
                                           ; SOURCE LINE # 1230
0013 75CB3C            MOV     RCAP2H,#03CH
                                           ; SOURCE LINE # 1231
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 93  

0016 75CAB0            MOV     RCAP2L,#0B0H
                                           ; SOURCE LINE # 1233
0019 43A820            ORL     IE,#020H
                                           ; SOURCE LINE # 1235
001C D2CA              SETB    TR2
                                           ; SOURCE LINE # 1239
                                           ; SOURCE LINE # 1240
001E         ?C0166:
001E 22                RET     
             ; FUNCTION EanbleTimer2 (END)

             ; FUNCTION DisableTimer2 (BEGIN)
                                           ; SOURCE LINE # 1242
                                           ; SOURCE LINE # 1243
                                           ; SOURCE LINE # 1245
0000 53A8DF            ANL     IE,#0DFH
                                           ; SOURCE LINE # 1246
0003 C200        E     CLR     xAsyncSavePrp
                                           ; SOURCE LINE # 1248
0005 E4                CLR     A
0006 F5C8              MOV     T2CON,A
                                           ; SOURCE LINE # 1249
0008 22                RET     
             ; FUNCTION DisableTimer2 (END)

             ; FUNCTION QueuePrpSaveReq (BEGIN)
                                           ; SOURCE LINE # 1252
                                           ; SOURCE LINE # 1253
                                           ; SOURCE LINE # 1255
0000 900000      E     MOV     DPTR,#bPrpSaveMethod
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 6024              JZ      ?C0170
0007 900000      E     MOV     DPTR,#wEEPROMSize
000A E0                MOVX    A,@DPTR
000B 7002              JNZ     ?C0425
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F         ?C0425:
000F 601A              JZ      ?C0170
                                           ; SOURCE LINE # 1257
0011         ?C0168:
                                           ; SOURCE LINE # 1258
0011 300009      E     JNB     xSavePrp,?C0171
                                           ; SOURCE LINE # 1260
0014 EF                MOV     A,R7
0015 B40413            CJNE    A,#04H,?C0170
                                           ; SOURCE LINE # 1261
0018 120000      R     LCALL   DisableTimer2
                                           ; SOURCE LINE # 1262
                                           ; SOURCE LINE # 1263
                                           ; SOURCE LINE # 1264
001B 800B              SJMP    ?C0439
001D         ?C0171:
                                           ; SOURCE LINE # 1266
001D D200        E     SETB    xSavePrp
                                           ; SOURCE LINE # 1267
001F 900000      E     MOV     DPTR,#bPrpSaveMethod
0022 E0                MOVX    A,@DPTR
0023 B40405            CJNE    A,#04H,?C0170
                                           ; SOURCE LINE # 1268
0026 C200        E     CLR     xAsyncSavePrp
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 94  

                                           ; SOURCE LINE # 1269
0028         ?C0439:
0028 120000      R     LCALL   EanbleTimer2
                                           ; SOURCE LINE # 1270
                                           ; SOURCE LINE # 1271
                                           ; SOURCE LINE # 1272
002B         ?C0170:
002B 22                RET     
             ; FUNCTION QueuePrpSaveReq (END)

             ; FUNCTION RemovePrpSaveReq (BEGIN)
                                           ; SOURCE LINE # 1275
                                           ; SOURCE LINE # 1276
                                           ; SOURCE LINE # 1278
0000 30000C      E     JNB     xSavePrp,?C0177
                                           ; SOURCE LINE # 1279
0003 900000      E     MOV     DPTR,#bPrpSaveMethod
0006 E0                MOVX    A,@DPTR
0007 B40403            CJNE    A,#04H,?C0176
                                           ; SOURCE LINE # 1280
000A 120000      R     LCALL   DisableTimer2
                                           ; SOURCE LINE # 1281
000D         ?C0176:
                                           ; SOURCE LINE # 1282
000D C200        E     CLR     xSavePrp
                                           ; SOURCE LINE # 1283
                                           ; SOURCE LINE # 1284
000F         ?C0177:
000F 22                RET     
             ; FUNCTION RemovePrpSaveReq (END)

             ; FUNCTION CompletePrpSaveReq (BEGIN)
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1290
0000 300015      E     JNB     xSavePrp,?C0181
                                           ; SOURCE LINE # 1291
0003 900000      E     MOV     DPTR,#bPrpSaveMethod
0006 E0                MOVX    A,@DPTR
0007 B40406            CJNE    A,#04H,?C0179
                                           ; SOURCE LINE # 1292
000A 200003      E     JB      xAsyncSavePrp,?C0179
                                           ; SOURCE LINE # 1293
000D 120000      R     LCALL   DisableTimer2
                                           ; SOURCE LINE # 1294
                                           ; SOURCE LINE # 1301
0010         ?C0179:
                                           ; SOURCE LINE # 1306
0010 120000      R     LCALL   WaitPartialFWLoad
                                           ; SOURCE LINE # 1308
0013 120000      R     LCALL   PrpSaveEEPROM
                                           ; SOURCE LINE # 1309
0016 C200        E     CLR     xSavePrp
                                           ; SOURCE LINE # 1310
                                           ; SOURCE LINE # 1311
0018         ?C0181:
0018 22                RET     
             ; FUNCTION CompletePrpSaveReq (END)

             ; FUNCTION PrpLoadFromEEPROM (BEGIN)
                                           ; SOURCE LINE # 1313
                                           ; SOURCE LINE # 1314
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 95  

                                           ; SOURCE LINE # 1321
0000 200003      E     JB      xSPIEnable,$ + 6H
0003 020000      R     LJMP    ?C0182
                                           ; SOURCE LINE # 1322
                                           ; SOURCE LINE # 1326
0006 120000      R     LCALL   CheckErraseTag
0009 EF                MOV     A,R7
000A 7003              JNZ     $ + 5H
000C 020000      R     LJMP    ?C0183
                                           ; SOURCE LINE # 1327
                                           ; SOURCE LINE # 1328
000F 900000      E     MOV     DPTR,#bPrpIndex1Len
0012 E0                MOVX    A,@DPTR
0013 FD                MOV     R5,A
0014 7B01              MOV     R3,#01H
0016 7A00        E     MOV     R2,#HIGH pbIICBuf
0018 7900        E     MOV     R1,#LOW pbIICBuf
001A 7F01              MOV     R7,#01H
001C 7E80              MOV     R6,#080H
001E 120000      R     LCALL   _I2CEEPROMReadData
0021 EF                MOV     A,R7
0022 7003              JNZ     $ + 5H
0024 020000      R     LJMP    ?C0183
                                           ; SOURCE LINE # 1329
                                           ; SOURCE LINE # 1330
0027 E4                CLR     A
0028 F500        R     MOV     i,A
002A         ?C0185:
002A 900000      E     MOV     DPTR,#bPrpIndex1Len
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F E500        R     MOV     A,i
0031 C3                CLR     C
0032 9F                SUBB    A,R7
0033 5013              JNC     ?C0186
                                           ; SOURCE LINE # 1331
                                           ; SOURCE LINE # 1332
0035 7400        E     MOV     A,#LOW pbIICBuf
0037 2500        R     ADD     A,i
0039 F582              MOV     DPL,A
003B E4                CLR     A
003C 3400        E     ADDC    A,#HIGH pbIICBuf
003E F583              MOV     DPH,A
0040 E0                MOVX    A,@DPTR
0041 F4                CPL     A
0042 6004              JZ      ?C0186
                                           ; SOURCE LINE # 1333
                                           ; SOURCE LINE # 1334
0044         ?C0187:
0044 0500        R     INC     i
0046 80E2              SJMP    ?C0185
0048         ?C0186:
                                           ; SOURCE LINE # 1340
0048 E500        R     MOV     A,i
004A 75F020            MOV     B,#020H
004D A4                MUL     AB
004E 2420              ADD     A,#020H
0050 FF                MOV     R7,A
0051 E5F0              MOV     A,B
0053 3480              ADDC    A,#080H
0055 FE                MOV     R6,A
0056 7B01              MOV     R3,#01H
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 96  

0058 7A00        E     MOV     R2,#HIGH pbIICBuf
005A 7900        E     MOV     R1,#LOW pbIICBuf
005C 7D20              MOV     R5,#020H
005E 120000      R     LCALL   _I2CEEPROMReadData
0061 EF                MOV     A,R7
0062 606C              JZ      ?C0183
                                           ; SOURCE LINE # 1341
                                           ; SOURCE LINE # 1342
0064 AF00        R     MOV     R7,i
0066 7E00              MOV     R6,#00H
0068 7C04              MOV     R4,#04H
006A 7D00              MOV     R5,#00H
006C 120000      E     LCALL   ?C?IMUL
006F 8E00        R     MOV     wAddr,R6
0071 8F00        R     MOV     wAddr+01H,R7
                                           ; SOURCE LINE # 1344
0073 E4                CLR     A
0074 F500        R     MOV     i,A
0076         ?C0190:
                                           ; SOURCE LINE # 1345
                                           ; SOURCE LINE # 1346
0076 7400        E     MOV     A,#LOW pbIICBuf
0078 2500        R     ADD     A,i
007A F582              MOV     DPL,A
007C E4                CLR     A
007D 3400        E     ADDC    A,#HIGH pbIICBuf
007F F583              MOV     DPH,A
0081 E0                MOVX    A,@DPTR
0082 F4                CPL     A
0083 6007              JZ      ?C0191
                                           ; SOURCE LINE # 1347
                                           ; SOURCE LINE # 1348
0085         ?C0192:
0085 0500        R     INC     i
0087 E500        R     MOV     A,i
0089 B420EA            CJNE    A,#020H,?C0190
008C         ?C0191:
                                           ; SOURCE LINE # 1354
008C E500        R     MOV     A,i
008E 7012              JNZ     ?C0194
                                           ; SOURCE LINE # 1355
                                           ; SOURCE LINE # 1356
0090 E500        R     MOV     A,wAddr+01H
0092 4500        R     ORL     A,wAddr
0094 7002              JNZ     ?C0195
                                           ; SOURCE LINE # 1357
0096 FF                MOV     R7,A
0097 22                RET     
0098         ?C0195:
                                           ; SOURCE LINE # 1359
0098 74E0              MOV     A,#0E0H
009A 2500        R     ADD     A,wAddr+01H
009C F500        R     MOV     wAddr+01H,A
009E 74FF              MOV     A,#0FFH
                                           ; SOURCE LINE # 1360
00A0 8018              SJMP    ?C0440
00A2         ?C0194:
                                           ; SOURCE LINE # 1361
                                           ; SOURCE LINE # 1362
00A2 E500        R     MOV     A,i
00A4 24FF              ADD     A,#0FFH
00A6 FF                MOV     R7,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 97  

00A7 E4                CLR     A
00A8 34FF              ADDC    A,#0FFH
00AA FE                MOV     R6,A
00AB EF                MOV     A,R7
00AC 7805              MOV     R0,#05H
00AE         ?C0426:
00AE C3                CLR     C
00AF 33                RLC     A
00B0 CE                XCH     A,R6
00B1 33                RLC     A
00B2 CE                XCH     A,R6
00B3 D8F9              DJNZ    R0,?C0426
00B5 2500        R     ADD     A,wAddr+01H
00B7 F500        R     MOV     wAddr+01H,A
00B9 EE                MOV     A,R6
00BA         ?C0440:
00BA 3500        R     ADDC    A,wAddr
00BC F500        R     MOV     wAddr,A
                                           ; SOURCE LINE # 1363
00BE         ?C0198:
                                           ; SOURCE LINE # 1365
00BE 900000      E     MOV     DPTR,#wPrpDataStartAddr
00C1 E0                MOVX    A,@DPTR
00C2 FE                MOV     R6,A
00C3 A3                INC     DPTR
00C4 E0                MOVX    A,@DPTR
00C5 2500        R     ADD     A,wAddr+01H
00C7 F500        R     MOV     wAddr+01H,A
00C9 EE                MOV     A,R6
00CA 3500        R     ADDC    A,wAddr
00CC F500        R     MOV     wAddr,A
                                           ; SOURCE LINE # 1369
00CE 8013              SJMP    NormalPrpLoad
                                           ; SOURCE LINE # 1370
                                           ; SOURCE LINE # 1371
                                           ; SOURCE LINE # 1372
00D0         ?C0183:
                                           ; SOURCE LINE # 1373
00D0 7F00              MOV     R7,#00H
00D2 22                RET     
                                           ; SOURCE LINE # 1374
00D3         ?C0182:
                                           ; SOURCE LINE # 1375
                                           ; SOURCE LINE # 1377
00D3 900000      E     MOV     DPTR,#wEEPROMSize+01H
00D6 E0                MOVX    A,@DPTR
00D7 24E0              ADD     A,#0E0H
00D9 F500        R     MOV     wAddr+01H,A
00DB 900000      E     MOV     DPTR,#wEEPROMSize
00DE E0                MOVX    A,@DPTR
00DF 34FF              ADDC    A,#0FFH
00E1 F500        R     MOV     wAddr,A
                                           ; SOURCE LINE # 1379
                                           ; SOURCE LINE # 1381
00E3         NormalPrpLoad:
                                           ; SOURCE LINE # 1383
00E3 750019      R     MOV     i,#019H
00E6         ?C0201:
                                           ; SOURCE LINE # 1384
00E6 7400        E     MOV     A,#LOW pbTmpBuf
00E8 2500        R     ADD     A,i
00EA F582              MOV     DPL,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 98  

00EC E4                CLR     A
00ED 3400        E     ADDC    A,#HIGH pbTmpBuf
00EF F583              MOV     DPH,A
00F1 E4                CLR     A
00F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1385
00F3 0500        R     INC     i
00F5 E500        R     MOV     A,i
00F7 B420EC            CJNE    A,#020H,?C0201
00FA         ?C0202:
                                           ; SOURCE LINE # 1386
00FA 7B01              MOV     R3,#01H
00FC 7A00        E     MOV     R2,#HIGH pbTmpBuf
00FE 7900        E     MOV     R1,#LOW pbTmpBuf
0100 7D20              MOV     R5,#020H
0102 AF00        R     MOV     R7,wAddr+01H
0104 AE00        R     MOV     R6,wAddr
0106 120000      R     LCALL   _I2CEEPROMReadData
                                           ; SOURCE LINE # 1387
0109 900000      E     MOV     DPTR,#pbTmpBuf+01EH
010C E0                MOVX    A,@DPTR
010D FE                MOV     R6,A
010E A3                INC     DPTR
010F E0                MOVX    A,@DPTR
0110 FF                MOV     R7,A
;---- Variable 'wCheckSum' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1388
0111 1F                DEC     R7
0112 7001              JNZ     ?C0427
0114 1E                DEC     R6
0115         ?C0427:
                                           ; SOURCE LINE # 1389
0115 E4                CLR     A
0116 F500        R     MOV     i,A
0118         ?C0204:
                                           ; SOURCE LINE # 1390
0118 7400        E     MOV     A,#LOW pbTmpBuf
011A 2500        R     ADD     A,i
011C F582              MOV     DPL,A
011E E4                CLR     A
011F 3400        E     ADDC    A,#HIGH pbTmpBuf
0121 F583              MOV     DPH,A
0123 E0                MOVX    A,@DPTR
0124 FD                MOV     R5,A
0125 C3                CLR     C
0126 EF                MOV     A,R7
0127 9D                SUBB    A,R5
0128 FF                MOV     R7,A
0129 EE                MOV     A,R6
012A 9400              SUBB    A,#00H
012C FE                MOV     R6,A
                                           ; SOURCE LINE # 1391
012D 0500        R     INC     i
012F E500        R     MOV     A,i
0131 B419E4            CJNE    A,#019H,?C0204
0134         ?C0205:
                                           ; SOURCE LINE # 1392
0134 EF                MOV     A,R7
0135 4E                ORL     A,R6
0136 7019              JNZ     ?C0207
                                           ; SOURCE LINE # 1393
0138 7E00        E     MOV     R6,#HIGH bPwrLine
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 99  

013A 7F00        E     MOV     R7,#LOW bPwrLine
;---- Variable 'ValuePtr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1399
013C A807              MOV     R0,AR7
013E AC06              MOV     R4,AR6
0140 7D01              MOV     R5,#01H
0142 7B01              MOV     R3,#01H
0144 7A00        E     MOV     R2,#HIGH pbTmpBuf
0146 7900        E     MOV     R1,#LOW pbTmpBuf
0148 FE                MOV     R6,A
0149 7F19              MOV     R7,#019H
014B 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1401
014E 7F01              MOV     R7,#01H
0150 22                RET     
                                           ; SOURCE LINE # 1402
0151         ?C0207:
                                           ; SOURCE LINE # 1404
0151 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1405
                                           ; SOURCE LINE # 1406
0153         ?C0196:
0153 22                RET     
             ; FUNCTION PrpLoadFromEEPROM (END)

             ; FUNCTION PrpSaveEEPROM (BEGIN)
                                           ; SOURCE LINE # 1410
                                           ; SOURCE LINE # 1411
                                           ; SOURCE LINE # 1422
0000 200003      E     JB      xSPIEnable,$ + 6H
0003 020000      R     LJMP    ?C0209
                                           ; SOURCE LINE # 1423
                                           ; SOURCE LINE # 1428
0006 120000      R     LCALL   CheckErraseTag
0009 EF                MOV     A,R7
000A 7003              JNZ     $ + 5H
000C 020000      R     LJMP    ?C0226
                                           ; SOURCE LINE # 1429
                                           ; SOURCE LINE # 1430
000F 900000      E     MOV     DPTR,#bPrpIndex1Len
0012 E0                MOVX    A,@DPTR
0013 FD                MOV     R5,A
0014 7B01              MOV     R3,#01H
0016 7A00        E     MOV     R2,#HIGH pbIICBuf
0018 7900        E     MOV     R1,#LOW pbIICBuf
001A 7F01              MOV     R7,#01H
001C 7E80              MOV     R6,#080H
001E 120000      R     LCALL   _I2CEEPROMReadData
0021 EF                MOV     A,R7
0022 7003              JNZ     $ + 5H
0024 020000      R     LJMP    ?C0226
                                           ; SOURCE LINE # 1431
                                           ; SOURCE LINE # 1432
0027 E4                CLR     A
0028 7800        R     MOV     R0,#LOW i
002A F6                MOV     @R0,A
002B         ?C0212:
002B 900000      E     MOV     DPTR,#bPrpIndex1Len
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 7800        R     MOV     R0,#LOW i
0032 E6                MOV     A,@R0
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 100 

0033 FE                MOV     R6,A
0034 C3                CLR     C
0035 9F                SUBB    A,R7
0036 5013              JNC     ?C0213
                                           ; SOURCE LINE # 1433
                                           ; SOURCE LINE # 1434
0038 7400        E     MOV     A,#LOW pbIICBuf
003A 2E                ADD     A,R6
003B F582              MOV     DPL,A
003D E4                CLR     A
003E 3400        E     ADDC    A,#HIGH pbIICBuf
0040 F583              MOV     DPH,A
0042 E0                MOVX    A,@DPTR
0043 F4                CPL     A
0044 6005              JZ      ?C0213
                                           ; SOURCE LINE # 1435
                                           ; SOURCE LINE # 1436
0046         ?C0214:
0046 7800        R     MOV     R0,#LOW i
0048 06                INC     @R0
0049 80E0              SJMP    ?C0212
004B         ?C0213:
                                           ; SOURCE LINE # 1441
004B 7800        R     MOV     R0,#LOW i
004D E6                MOV     A,@R0
004E 75F020            MOV     B,#020H
0051 A4                MUL     AB
0052 2420              ADD     A,#020H
0054 FF                MOV     R7,A
0055 E5F0              MOV     A,B
0057 3480              ADDC    A,#080H
0059 FE                MOV     R6,A
005A 7B01              MOV     R3,#01H
005C 7A00        E     MOV     R2,#HIGH pbIICBuf
005E 7900        E     MOV     R1,#LOW pbIICBuf
0060 7D20              MOV     R5,#020H
0062 120000      R     LCALL   _I2CEEPROMReadData
0065 EF                MOV     A,R7
0066 7003              JNZ     $ + 5H
0068 020000      R     LJMP    ?C0226
                                           ; SOURCE LINE # 1442
                                           ; SOURCE LINE # 1443
006B 7800        R     MOV     R0,#LOW i
006D E6                MOV     A,@R0
006E FF                MOV     R7,A
006F 7E00              MOV     R6,#00H
0071 7C04              MOV     R4,#04H
0073 7D00              MOV     R5,#00H
0075 120000      E     LCALL   ?C?IMUL
0078 7800        R     MOV     R0,#LOW wAddr
007A A606              MOV     @R0,AR6
007C 08                INC     R0
007D A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1445
007F E4                CLR     A
0080 7800        R     MOV     R0,#LOW j
0082 F6                MOV     @R0,A
0083         ?C0217:
0083 7800        R     MOV     R0,#LOW j
0085 E6                MOV     A,@R0
0086 FF                MOV     R7,A
0087 C3                CLR     C
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 101 

0088 9420              SUBB    A,#020H
008A 5013              JNC     ?C0218
                                           ; SOURCE LINE # 1446
                                           ; SOURCE LINE # 1447
008C 7400        E     MOV     A,#LOW pbIICBuf
008E 2F                ADD     A,R7
008F F582              MOV     DPL,A
0091 E4                CLR     A
0092 3400        E     ADDC    A,#HIGH pbIICBuf
0094 F583              MOV     DPH,A
0096 E0                MOVX    A,@DPTR
0097 F4                CPL     A
0098 6005              JZ      ?C0218
                                           ; SOURCE LINE # 1448
                                           ; SOURCE LINE # 1449
009A         ?C0219:
009A 7800        R     MOV     R0,#LOW j
009C 06                INC     @R0
009D 80E4              SJMP    ?C0217
009F         ?C0218:
                                           ; SOURCE LINE # 1454
009F E4                CLR     A
00A0 900000      E     MOV     DPTR,#pbTmpBuf
00A3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1455
00A4 900000      E     MOV     DPTR,#bPrpIndex1Len
00A7 E0                MOVX    A,@DPTR
00A8 14                DEC     A
00A9 7800        R     MOV     R0,#LOW i
00AB 66                XRL     A,@R0
00AC 7057              JNZ     ?C0221
00AE 900000      E     MOV     DPTR,#bPrpIndex2Dif
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 C3                CLR     C
00B4 7420              MOV     A,#020H
00B6 9F                SUBB    A,R7
00B7 08                INC     R0
00B8 66                XRL     A,@R0
00B9 704A              JNZ     ?C0221
                                           ; SOURCE LINE # 1456
                                           ; SOURCE LINE # 1457
00BB 7800        R     MOV     R0,#LOW wCheckSum
00BD F6                MOV     @R0,A
00BE 08                INC     R0
00BF F6                MOV     @R0,A
00C0         ?C0224:
                                           ; SOURCE LINE # 1460
                                           ; SOURCE LINE # 1462
00C0 120000      R     LCALL   SPIWriteEnable
                                           ; SOURCE LINE # 1463
00C3 900000      E     MOV     DPTR,#wPrpTag2Addr
00C6 E0                MOVX    A,@DPTR
00C7 FE                MOV     R6,A
00C8 A3                INC     DPTR
00C9 E0                MOVX    A,@DPTR
00CA FF                MOV     R7,A
00CB 120000      R     LCALL   L?0451
                                           ; SOURCE LINE # 1464
00CE 120000      R     LCALL   SPIWriteEnable
                                           ; SOURCE LINE # 1465
00D1 7B01              MOV     R3,#01H
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 102 

00D3 7A00        E     MOV     R2,#HIGH pbTmpBuf
00D5 7900        E     MOV     R1,#LOW pbTmpBuf
00D7 7D01              MOV     R5,#01H
00D9 7F00              MOV     R7,#00H
00DB 7E80              MOV     R6,#080H
00DD 120000      R     LCALL   _I2CEEPROMWriteData
                                           ; SOURCE LINE # 1466
00E0 7800        R     MOV     R0,#LOW wCheckSum+01H
00E2 06                INC     @R0
00E3 E6                MOV     A,@R0
00E4 18                DEC     R0
00E5 7001              JNZ     ?C0428
00E7 06                INC     @R0
00E8         ?C0428:
                                           ; SOURCE LINE # 1467
00E8 900000      E     MOV     DPTR,#wPrpTag2Addr
00EB E0                MOVX    A,@DPTR
00EC FE                MOV     R6,A
00ED A3                INC     DPTR
00EE E0                MOVX    A,@DPTR
00EF FF                MOV     R7,A
00F0 120000      R     LCALL   _ReadBackCheck
00F3 EF                MOV     A,R7
00F4 700C              JNZ     ?C0223
00F6 C3                CLR     C
00F7 7800        R     MOV     R0,#LOW wCheckSum+01H
00F9 E6                MOV     A,@R0
00FA 9404              SUBB    A,#04H
00FC 18                DEC     R0
00FD E6                MOV     A,@R0
00FE 9400              SUBB    A,#00H
0100 40BE              JC      ?C0224
0102         ?C0223:
                                           ; SOURCE LINE # 1470
0102 020000      R     LJMP    EraseBlockSPIFlash
                                           ; SOURCE LINE # 1472
0105         ?C0221:
                                           ; SOURCE LINE # 1474
0105 7800        R     MOV     R0,#LOW j
0107 E6                MOV     A,@R0
0108 FD                MOV     R5,A
0109 75F020            MOV     B,#020H
010C A4                MUL     AB
010D AEF0              MOV     R6,B
010F 7800        R     MOV     R0,#LOW wAddr+01H
0111 26                ADD     A,@R0
0112 F6                MOV     @R0,A
0113 18                DEC     R0
0114 EE                MOV     A,R6
0115 36                ADDC    A,@R0
0116 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1476
0117 900000      E     MOV     DPTR,#wPrpDataStartAddr
011A E0                MOVX    A,@DPTR
011B FE                MOV     R6,A
011C A3                INC     DPTR
011D E0                MOVX    A,@DPTR
011E 08                INC     R0
011F 26                ADD     A,@R0
0120 F6                MOV     @R0,A
0121 18                DEC     R0
0122 EE                MOV     A,R6
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 103 

0123 36                ADDC    A,@R0
0124 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1481
0125 ED                MOV     A,R5
0126 641F              XRL     A,#01FH
0128 7023              JNZ     ?C0227
                                           ; SOURCE LINE # 1482
                                           ; SOURCE LINE # 1484
012A 120000      R     LCALL   SPIWriteEnable
                                           ; SOURCE LINE # 1485
012D 7800        R     MOV     R0,#LOW i
012F E6                MOV     A,@R0
0130 2401              ADD     A,#01H
0132 FF                MOV     R7,A
0133 E4                CLR     A
0134 3480              ADDC    A,#080H
0136 FE                MOV     R6,A
0137 120000      R     LCALL   L?0451
                                           ; SOURCE LINE # 1486
013A 7800        R     MOV     R0,#LOW i
013C E6                MOV     A,@R0
013D 2401              ADD     A,#01H
013F FF                MOV     R7,A
0140 E4                CLR     A
0141 3480              ADDC    A,#080H
0143 FE                MOV     R6,A
0144 120000      R     LCALL   _ReadBackCheck
0147 EF                MOV     A,R7
0148 7003              JNZ     $ + 5H
014A 020000      R     LJMP    ?C0226
                                           ; SOURCE LINE # 1488
014D         ?C0227:
                                           ; SOURCE LINE # 1491
014D 120000      R     LCALL   SPIWriteEnable
                                           ; SOURCE LINE # 1492
0150 7800        R     MOV     R0,#LOW j
0152 E6                MOV     A,@R0
0153 2420              ADD     A,#020H
0155 FD                MOV     R5,A
0156 E4                CLR     A
0157 3480              ADDC    A,#080H
0159 FC                MOV     R4,A
015A 18                DEC     R0
015B E6                MOV     A,@R0
015C 75F020            MOV     B,#020H
015F A4                MUL     AB
0160 2D                ADD     A,R5
0161 FF                MOV     R7,A
0162 E5F0              MOV     A,B
0164 3C                ADDC    A,R4
0165 FE                MOV     R6,A
0166 120000      R     LCALL   L?0452
                                           ; SOURCE LINE # 1493
0169 7800        R     MOV     R0,#LOW j
016B E6                MOV     A,@R0
016C 2420              ADD     A,#020H
016E FD                MOV     R5,A
016F E4                CLR     A
0170 3480              ADDC    A,#080H
0172 FC                MOV     R4,A
0173 18                DEC     R0
0174 E6                MOV     A,@R0
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 104 

0175 75F020            MOV     B,#020H
0178 A4                MUL     AB
0179 2D                ADD     A,R5
017A FF                MOV     R7,A
017B E5F0              MOV     A,B
017D 3C                ADDC    A,R4
017E FE                MOV     R6,A
017F 120000      R     LCALL   _ReadBackCheck
0182 EF                MOV     A,R7
0183 7003              JNZ     $ + 5H
0185 020000      R     LJMP    ?C0226
                                           ; SOURCE LINE # 1494
                                           ; SOURCE LINE # 1495
0188 8011              SJMP    NormalPrpSave
                                           ; SOURCE LINE # 1496
                                           ; SOURCE LINE # 1497
                                           ; SOURCE LINE # 1498
                                           ; SOURCE LINE # 1500
                                           ; SOURCE LINE # 1502
018A         ?C0209:
                                           ; SOURCE LINE # 1503
                                           ; SOURCE LINE # 1505
018A 900000      E     MOV     DPTR,#wEEPROMSize+01H
018D E0                MOVX    A,@DPTR
018E 24E0              ADD     A,#0E0H
0190 7800        R     MOV     R0,#LOW wAddr+01H
0192 F6                MOV     @R0,A
0193 900000      E     MOV     DPTR,#wEEPROMSize
0196 E0                MOVX    A,@DPTR
0197 34FF              ADDC    A,#0FFH
0199 18                DEC     R0
019A F6                MOV     @R0,A
                                           ; SOURCE LINE # 1507
                                           ; SOURCE LINE # 1509
019B         NormalPrpSave:
                                           ; SOURCE LINE # 1515
019B 7E00        E     MOV     R6,#HIGH bPwrLine
019D 7F00        E     MOV     R7,#LOW bPwrLine
019F 7800        R     MOV     R0,#LOW ValuePtr
01A1 EE                MOV     A,R6
01A2 F6                MOV     @R0,A
01A3 08                INC     R0
01A4 EF                MOV     A,R7
01A5 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1516
01A6 AA06              MOV     R2,AR6
01A8 F9                MOV     R1,A
01A9 7B01              MOV     R3,#01H
01AB 7800        E     MOV     R0,#LOW pbTmpBuf
01AD 7C00        E     MOV     R4,#HIGH pbTmpBuf
01AF 7D01              MOV     R5,#01H
01B1 7E00              MOV     R6,#00H
01B3 7F19              MOV     R7,#019H
01B5 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1517
01B8 7800        R     MOV     R0,#LOW i
01BA 7619              MOV     @R0,#019H
01BC         ?C0232:
01BC 7800        R     MOV     R0,#LOW i
01BE E6                MOV     A,@R0
01BF FF                MOV     R7,A
01C0 C3                CLR     C
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 105 

01C1 941E              SUBB    A,#01EH
01C3 500F              JNC     ?C0233
                                           ; SOURCE LINE # 1518
01C5 7400        E     MOV     A,#LOW pbTmpBuf
01C7 2F                ADD     A,R7
01C8 F582              MOV     DPL,A
01CA E4                CLR     A
01CB 3400        E     ADDC    A,#HIGH pbTmpBuf
01CD F583              MOV     DPH,A
01CF E4                CLR     A
01D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1519
01D1 06                INC     @R0
01D2 80E8              SJMP    ?C0232
01D4         ?C0233:
                                           ; SOURCE LINE # 1520
01D4 7800        R     MOV     R0,#LOW wCheckSum
01D6 7600              MOV     @R0,#00H
01D8 08                INC     R0
01D9 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1521
01DB E4                CLR     A
01DC 08                INC     R0
01DD F6                MOV     @R0,A
01DE         ?C0235:
01DE 7800        R     MOV     R0,#LOW i
01E0 E6                MOV     A,@R0
01E1 FF                MOV     R7,A
01E2 C3                CLR     C
01E3 9419              SUBB    A,#019H
01E5 5017              JNC     ?C0236
                                           ; SOURCE LINE # 1522
01E7 7400        E     MOV     A,#LOW pbTmpBuf
01E9 2F                ADD     A,R7
01EA F582              MOV     DPL,A
01EC E4                CLR     A
01ED 3400        E     ADDC    A,#HIGH pbTmpBuf
01EF F583              MOV     DPH,A
01F1 E0                MOVX    A,@DPTR
01F2 18                DEC     R0
01F3 26                ADD     A,@R0
01F4 F6                MOV     @R0,A
01F5 E4                CLR     A
01F6 18                DEC     R0
01F7 36                ADDC    A,@R0
01F8 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1523
01F9 7800        R     MOV     R0,#LOW i
01FB 06                INC     @R0
01FC 80E0              SJMP    ?C0235
01FE         ?C0236:
                                           ; SOURCE LINE # 1524
01FE 7800        R     MOV     R0,#LOW wCheckSum
0200 E6                MOV     A,@R0
0201 FF                MOV     R7,A
0202 08                INC     R0
0203 E6                MOV     A,@R0
0204 900000      E     MOV     DPTR,#pbTmpBuf+01EH
0207 CF                XCH     A,R7
0208 F0                MOVX    @DPTR,A
0209 A3                INC     DPTR
020A EF                MOV     A,R7
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 106 

020B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1528
020C 300015      E     JNB     xSPIEnable,?C0238
                                           ; SOURCE LINE # 1529
                                           ; SOURCE LINE # 1533
020F 120000      R     LCALL   SPIWriteEnable
                                           ; SOURCE LINE # 1535
0212 7800        R     MOV     R0,#LOW wAddr
0214 E6                MOV     A,@R0
0215 FE                MOV     R6,A
0216 08                INC     R0
0217 E6                MOV     A,@R0
0218 FF                MOV     R7,A
0219 7B01              MOV     R3,#01H
021B 7A00        E     MOV     R2,#HIGH pbTmpBuf
021D 7900        E     MOV     R1,#LOW pbTmpBuf
021F 7D20              MOV     R5,#020H
0221 020000      R     LJMP    _I2CEEPROMWriteData
                                           ; SOURCE LINE # 1536
0224         ?C0238:
                                           ; SOURCE LINE # 1537
                                           ; SOURCE LINE # 1542
0224 900029            MOV     DPTR,#029H
0227 E0                MOVX    A,@DPTR
0228 4480              ORL     A,#080H
022A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1543
022B 900022            MOV     DPTR,#022H
022E E0                MOVX    A,@DPTR
022F 4401              ORL     A,#01H
0231 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1544
0232 900020            MOV     DPTR,#020H
0235 C083              PUSH    DPH
0237 C082              PUSH    DPL
0239 E0                MOVX    A,@DPTR
023A FF                MOV     R7,A
023B 900000      E     MOV     DPTR,#bWriteProtectGPIO
023E E0                MOVX    A,@DPTR
023F F4                CPL     A
0240 FE                MOV     R6,A
0241 EF                MOV     A,R7
0242 5E                ANL     A,R6
0243 D082              POP     DPL
0245 D083              POP     DPH
0247 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1545
0248 7F05              MOV     R7,#05H
024A 120000      E     LCALL   _Delay10US
                                           ; SOURCE LINE # 1546
024D 900000      E     MOV     DPTR,#bEEPromKBits
0250 E0                MOVX    A,@DPTR
0251 D3                SETB    C
0252 9410              SUBB    A,#010H
0254 4019              JC      ?C0240
                                           ; SOURCE LINE # 1547
0256 7800        R     MOV     R0,#LOW wAddr
0258 E6                MOV     A,@R0
0259 FE                MOV     R6,A
025A 08                INC     R0
025B E6                MOV     A,@R0
025C FF                MOV     R7,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 107 

025D 7B01              MOV     R3,#01H
025F 7A00        E     MOV     R2,#HIGH pbTmpBuf
0261 7900        E     MOV     R1,#LOW pbTmpBuf
0263 7D20              MOV     R5,#020H
0265 120000      R     LCALL   _I2CEEPROMWriteData
                                           ; SOURCE LINE # 1548
0268 7F04              MOV     R7,#04H
026A 120000      E     LCALL   _Delay1MS
                                           ; SOURCE LINE # 1549
026D 8032              SJMP    ?C0241
026F         ?C0240:
                                           ; SOURCE LINE # 1550
026F E4                CLR     A
0270 7800        R     MOV     R0,#LOW j
0272 F6                MOV     @R0,A
0273         ?C0242:
0273 7800        R     MOV     R0,#LOW j
0275 E6                MOV     A,@R0
0276 C3                CLR     C
0277 9420              SUBB    A,#020H
0279 5026              JNC     ?C0241
                                           ; SOURCE LINE # 1551
027B E6                MOV     A,@R0
027C FD                MOV     R5,A
027D 7800        R     MOV     R0,#LOW wAddr+01H
027F 26                ADD     A,@R0
0280 FF                MOV     R7,A
0281 E4                CLR     A
0282 18                DEC     R0
0283 36                ADDC    A,@R0
0284 FE                MOV     R6,A
0285 7400        E     MOV     A,#LOW pbTmpBuf
0287 2D                ADD     A,R5
0288 F9                MOV     R1,A
0289 E4                CLR     A
028A 3400        E     ADDC    A,#HIGH pbTmpBuf
028C FA                MOV     R2,A
028D 7B01              MOV     R3,#01H
028F 7D08              MOV     R5,#08H
0291 120000      R     LCALL   _I2CEEPROMWriteData
                                           ; SOURCE LINE # 1552
0294 7F04              MOV     R7,#04H
0296 120000      E     LCALL   _Delay1MS
                                           ; SOURCE LINE # 1553
0299 7800        R     MOV     R0,#LOW j
029B 7408              MOV     A,#08H
029D 26                ADD     A,@R0
029E F6                MOV     @R0,A
029F 80D2              SJMP    ?C0242
                                           ; SOURCE LINE # 1554
02A1         ?C0241:
                                           ; SOURCE LINE # 1555
02A1 900020            MOV     DPTR,#020H
02A4 C083              PUSH    DPH
02A6 C082              PUSH    DPL
02A8 E0                MOVX    A,@DPTR
02A9 FF                MOV     R7,A
02AA 900000      E     MOV     DPTR,#bWriteProtectGPIO
02AD E0                MOVX    A,@DPTR
02AE FE                MOV     R6,A
02AF EF                MOV     A,R7
02B0 4E                ORL     A,R6
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 108 

02B1 D082              POP     DPL
02B3 D083              POP     DPH
02B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1556
02B6 900029            MOV     DPTR,#029H
02B9 E0                MOVX    A,@DPTR
02BA 547F              ANL     A,#07FH
02BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1558
                                           ; SOURCE LINE # 1561
02BD         ?C0226:
02BD 22                RET     
             ; FUNCTION PrpSaveEEPROM (END)

             ; FUNCTION I2CAccess (BEGIN)
                                           ; SOURCE LINE # 1579
                                           ; SOURCE LINE # 1580
                                           ; SOURCE LINE # 1581
0000 E500        R     MOV     A,I2CLen
0002 6009              JZ      ?C0246
0004 D3                SETB    C
0005 9420              SUBB    A,#020H
0007 5004              JNC     ?C0246
0009 E500        E     MOV     A,bFWLoadState
000B 6003              JZ      ?C0245
000D         ?C0246:
                                           ; SOURCE LINE # 1582
000D 7F00              MOV     R7,#00H
000F 22                RET     
                                           ; SOURCE LINE # 1583
0010         ?C0245:
                                           ; SOURCE LINE # 1585
0010 7800        R     MOV     R0,#LOW bEEPROMI2C
0012 E6                MOV     A,@R0
0013 6401              XRL     A,#01H
0015 7029              JNZ     ?C0248
                                           ; SOURCE LINE # 1586
0017 900000      E     MOV     DPTR,#bIICClock
001A E0                MOVX    A,@DPTR
001B 4440              ORL     A,#040H
001D 7800        R     MOV     R0,#LOW bI2CMode
001F F6                MOV     @R0,A
                                           ; SOURCE LINE # 1587
0020 900000      E     MOV     DPTR,#bEEPromKBits
0023 E0                MOVX    A,@DPTR
0024 D3                SETB    C
0025 9410              SUBB    A,#010H
0027 500C              JNC     ?C0249
                                           ; SOURCE LINE # 1588
0029 E500        R     MOV     A,I2CwAddr
002B 5407              ANL     A,#07H
002D 25E0              ADD     A,ACC
002F 44A0              ORL     A,#0A0H
0031 08                INC     R0
0032 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1589
0033 801A              SJMP    ?C0251
0035         ?C0249:
                                           ; SOURCE LINE # 1590
0035 7800        R     MOV     R0,#LOW bI2CMode
0037 E6                MOV     A,@R0
0038 4420              ORL     A,#020H
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 109 

003A F6                MOV     @R0,A
                                           ; SOURCE LINE # 1591
003B 900000      E     MOV     DPTR,#bEEPROMID
                                           ; SOURCE LINE # 1592
                                           ; SOURCE LINE # 1593
003E 800C              SJMP    ?C0441
0040         ?C0248:
                                           ; SOURCE LINE # 1594
0040 900000      E     MOV     DPTR,#bSensorIICMode
0043 E0                MOVX    A,@DPTR
0044 4440              ORL     A,#040H
0046 7800        R     MOV     R0,#LOW bI2CMode
0048 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1595
0049 900000      E     MOV     DPTR,#bSensorIICID
004C         ?C0441:
004C E0                MOVX    A,@DPTR
004D 08                INC     R0
004E F6                MOV     @R0,A
                                           ; SOURCE LINE # 1596
004F         ?C0251:
                                           ; SOURCE LINE # 1597
004F 7800        R     MOV     R0,#LOW bI2CRead
0051 E6                MOV     A,@R0
0052 7012              JNZ     ?C0252
                                           ; SOURCE LINE # 1598
0054 AF00        R     MOV     R7,I2CLen
0056 FE                MOV     R6,A
0057 7800        E     MOV     R0,#LOW pbIICBuf
0059 7C00        E     MOV     R4,#HIGH pbIICBuf
005B 7D01              MOV     R5,#01H
005D AB00        R     MOV     R3,I2CpData
005F AA00        R     MOV     R2,I2CpData+01H
0061 A900        R     MOV     R1,I2CpData+02H
0063 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1599
0066         ?C0252:
                                           ; SOURCE LINE # 1600
0066 E4                CLR     A
0067 F500        R     MOV     I2CRetry,A
0069         ?C0253:
                                           ; SOURCE LINE # 1601
0069 7800        R     MOV     R0,#LOW bI2CMode
006B E6                MOV     A,@R0
006C 900040            MOV     DPTR,#040H
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1602
0070 08                INC     R0
0071 E6                MOV     A,@R0
0072 A3                INC     DPTR
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1603
0074 A3                INC     DPTR
0075 E500        R     MOV     A,I2CwAddr+01H
0077 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1604
0078 A3                INC     DPTR
0079 E500        R     MOV     A,I2CwAddr
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1605
007C 900046            MOV     DPTR,#046H
007F E500        R     MOV     A,I2CLen
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 110 

0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1606
0082 90004C            MOV     DPTR,#04CH
0085 E4                CLR     A
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1608
0087 900048            MOV     DPTR,#048H
008A 74FF              MOV     A,#0FFH
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1609
008D 7800        R     MOV     R0,#LOW bI2CRead
008F E6                MOV     A,@R0
0090 900047            MOV     DPTR,#047H
0093 6005              JZ      ?C0256
                                           ; SOURCE LINE # 1610
0095 7403              MOV     A,#03H
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1611
0098 8003              SJMP    ?C0257
009A         ?C0256:
                                           ; SOURCE LINE # 1612
009A 7401              MOV     A,#01H
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1613
009D         ?C0257:
                                           ; SOURCE LINE # 1614
009D E4                CLR     A
009E F500        R     MOV     I2CTemp,A
00A0         ?C0258:
                                           ; SOURCE LINE # 1615
00A0 7F0A              MOV     R7,#0AH
00A2 120000      E     LCALL   _Delay10US
                                           ; SOURCE LINE # 1616
00A5 900047            MOV     DPTR,#047H
00A8 E0                MOVX    A,@DPTR
00A9 30E009            JNB     ACC.0,?C0259
                                           ; SOURCE LINE # 1617
                                           ; SOURCE LINE # 1618
00AC         ?C0260:
00AC 0500        R     INC     I2CTemp
00AE E500        R     MOV     A,I2CTemp
00B0 C3                CLR     C
00B1 94FF              SUBB    A,#0FFH
00B3 40EB              JC      ?C0258
00B5         ?C0259:
                                           ; SOURCE LINE # 1619
00B5 7800        R     MOV     R0,#LOW bI2CRead
00B7 E6                MOV     A,@R0
00B8 601D              JZ      ?C0262
                                           ; SOURCE LINE # 1620
00BA 900048            MOV     DPTR,#048H
00BD E0                MOVX    A,@DPTR
00BE 5403              ANL     A,#03H
00C0 7020              JNZ     ?C0255
                                           ; SOURCE LINE # 1621
00C2 AF00        R     MOV     R7,I2CLen
00C4 FE                MOV     R6,A
00C5 A800        R     MOV     R0,I2CpData+02H
00C7 AC00        R     MOV     R4,I2CpData+01H
00C9 AD00        R     MOV     R5,I2CpData
00CB 7B01              MOV     R3,#01H
00CD 7A00        E     MOV     R2,#HIGH pbIICBuf
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 111 

00CF 7900        E     MOV     R1,#LOW pbIICBuf
00D1 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1622
00D4 AF00        R     MOV     R7,I2CLen
00D6 22                RET     
                                           ; SOURCE LINE # 1623
                                           ; SOURCE LINE # 1624
00D7         ?C0262:
                                           ; SOURCE LINE # 1625
00D7 900048            MOV     DPTR,#048H
00DA E0                MOVX    A,@DPTR
00DB 5407              ANL     A,#07H
00DD 7003              JNZ     ?C0255
                                           ; SOURCE LINE # 1626
00DF AF00        R     MOV     R7,I2CLen
00E1 22                RET     
                                           ; SOURCE LINE # 1627
                                           ; SOURCE LINE # 1628
                                           ; SOURCE LINE # 1629
00E2         ?C0255:
00E2 0500        R     INC     I2CRetry
00E4 E500        R     MOV     A,I2CRetry
00E6 C3                CLR     C
00E7 9408              SUBB    A,#08H
00E9 5003              JNC     $ + 5H
00EB 020000      R     LJMP    ?C0253
00EE         ?C0254:
                                           ; SOURCE LINE # 1630
00EE 7F00              MOV     R7,#00H
                                           ; SOURCE LINE # 1631
00F0         ?C0247:
00F0 22                RET     
             ; FUNCTION I2CAccess (END)

             ; FUNCTION L?0451 (BEGIN)
0000         L?0452:
0000 7B01              MOV     R3,#01H
0002 7A00        E     MOV     R2,#HIGH pbTmpBuf
0004 7900        E     MOV     R1,#LOW pbTmpBuf
0006 7D01              MOV     R5,#01H
             ; FUNCTION _I2CEEPROMWriteData (BEGIN)
                                           ; SOURCE LINE # 1634
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
;---- Variable 'pbData' assigned to Register 'R1/R2/R3' ----
;---- Variable 'bXferLength' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1635
                                           ; SOURCE LINE # 1639
0008 8E00        R     MOV     I2CwAddr,R6
000A 8F00        R     MOV     I2CwAddr+01H,R7
                                           ; SOURCE LINE # 1640
000C 8D00        R     MOV     I2CLen,R5
                                           ; SOURCE LINE # 1641
000E 8B00        R     MOV     I2CpData,R3
0010 8A00        R     MOV     I2CpData+01H,R2
0012 8900        R     MOV     I2CpData+02H,R1
                                           ; SOURCE LINE # 1653
0014 20000B      E     JB      xSPIEnable,?C0266
                                           ; SOURCE LINE # 1655
0017 E4                CLR     A
0018 7800        R     MOV     R0,#LOW bI2CRead
001A F6                MOV     @R0,A
                                           ; SOURCE LINE # 1656
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 112 

001B 7800        R     MOV     R0,#LOW bEEPROMI2C
001D 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1657
001F 020000      R     LJMP    I2CAccess
                                           ; SOURCE LINE # 1696
0022         ?C0266:
                                           ; SOURCE LINE # 1697
                                           ; SOURCE LINE # 1699
0022 E500        R     MOV     A,I2CLen
0024 6009              JZ      ?C0270
0026 D3                SETB    C
0027 9420              SUBB    A,#020H
0029 5004              JNC     ?C0270
002B E500        E     MOV     A,bFWLoadState
002D 6003              JZ      ?C0269
002F         ?C0270:
                                           ; SOURCE LINE # 1700
002F 7F00              MOV     R7,#00H
0031 22                RET     
                                           ; SOURCE LINE # 1701
0032         ?C0269:
                                           ; SOURCE LINE # 1705
0032 900049            MOV     DPTR,#049H
0035 7414              MOV     A,#014H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1707
0038         EEPROMWriteStart:
                                           ; SOURCE LINE # 1709
0038 900000      E     MOV     DPTR,#bSPIManufacturer
003B E0                MOVX    A,@DPTR
003C B40406            CJNE    A,#04H,?C0273
003F E500        R     MOV     A,I2CLen
0041 6401              XRL     A,#01H
0043 706E              JNZ     ?C0272
0045         ?C0273:
                                           ; SOURCE LINE # 1710
                                           ; SOURCE LINE # 1712
0045 90004B            MOV     DPTR,#04BH
0048 7402              MOV     A,#02H
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1713
004B 900000      E     MOV     DPTR,#pbIICBuf
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1714
004F E4                CLR     A
0050 A3                INC     DPTR
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1715
0052 E500        R     MOV     A,I2CwAddr
0054 A3                INC     DPTR
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1716
0056 A3                INC     DPTR
0057 E500        R     MOV     A,I2CwAddr+01H
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1717
005A 90004A            MOV     DPTR,#04AH
005D 7404              MOV     A,#04H
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1718
0060 900049            MOV     DPTR,#049H
0063 7435              MOV     A,#035H
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 113 

0065 F0                MOVX    @DPTR,A
0066         ?C0274:
                                           ; SOURCE LINE # 1719
0066 900049            MOV     DPTR,#049H
0069 E0                MOVX    A,@DPTR
006A 20E0F9            JB      ACC.0,?C0274
006D         ?C0275:
                                           ; SOURCE LINE # 1720
006D E4                CLR     A
006E 7800        R     MOV     R0,#LOW i
0070 F6                MOV     @R0,A
0071         ?C0276:
0071 7800        R     MOV     R0,#LOW i
0073 E6                MOV     A,@R0
0074 C3                CLR     C
0075 9500        R     SUBB    A,I2CLen
0077 5022              JNC     ?C0277
                                           ; SOURCE LINE # 1721
0079 AB00        R     MOV     R3,I2CpData
007B AA00        R     MOV     R2,I2CpData+01H
007D A900        R     MOV     R1,I2CpData+02H
007F E6                MOV     A,@R0
0080 FF                MOV     R7,A
0081 F582              MOV     DPL,A
0083 758300            MOV     DPH,#00H
0086 120000      E     LCALL   ?C?CLDOPTR
0089 FE                MOV     R6,A
008A 7400        E     MOV     A,#LOW pbIICBuf
008C 2F                ADD     A,R7
008D F582              MOV     DPL,A
008F E4                CLR     A
0090 3400        E     ADDC    A,#HIGH pbIICBuf
0092 F583              MOV     DPH,A
0094 EE                MOV     A,R6
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1722
0096 7800        R     MOV     R0,#LOW i
0098 06                INC     @R0
0099 80D6              SJMP    ?C0276
009B         ?C0277:
                                           ; SOURCE LINE # 1723
009B 90004A            MOV     DPTR,#04AH
009E E500        R     MOV     A,I2CLen
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1724
00A1 900049            MOV     DPTR,#049H
00A4 7435              MOV     A,#035H
00A6 F0                MOVX    @DPTR,A
00A7         ?C0279:
                                           ; SOURCE LINE # 1725
00A7 900049            MOV     DPTR,#049H
00AA E0                MOVX    A,@DPTR
00AB 20E003            JB      ACC.0,$ + 6H
00AE 020000      R     LJMP    ?C0281
00B1 80F4              SJMP    ?C0279
                                           ; SOURCE LINE # 1728
00B3         ?C0272:
                                           ; SOURCE LINE # 1729
                                           ; SOURCE LINE # 1730
00B3 90004B            MOV     DPTR,#04BH
00B6 7401              MOV     A,#01H
00B8 F0                MOVX    @DPTR,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 114 

                                           ; SOURCE LINE # 1731
00B9 900000      E     MOV     DPTR,#pbIICBuf
00BC 74AD              MOV     A,#0ADH
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1732
00BF E4                CLR     A
00C0 A3                INC     DPTR
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1733
00C2 E500        R     MOV     A,I2CwAddr
00C4 A3                INC     DPTR
00C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1734
00C6 A3                INC     DPTR
00C7 E500        R     MOV     A,I2CwAddr+01H
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1735
00CA AB00        R     MOV     R3,I2CpData
00CC AA00        R     MOV     R2,I2CpData+01H
00CE A900        R     MOV     R1,I2CpData+02H
00D0 120000      E     LCALL   ?C?CLDPTR
00D3 900000      E     MOV     DPTR,#pbIICBuf+04H
00D6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1738
00D7 900001            MOV     DPTR,#01H
00DA 120000      E     LCALL   ?C?CLDOPTR
00DD 900000      E     MOV     DPTR,#pbIICBuf+05H
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1739
00E1 90004A            MOV     DPTR,#04AH
00E4 7406              MOV     A,#06H
00E6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1744
00E7 900049            MOV     DPTR,#049H
00EA 7435              MOV     A,#035H
00EC F0                MOVX    @DPTR,A
00ED         ?C0282:
                                           ; SOURCE LINE # 1745
00ED 900049            MOV     DPTR,#049H
00F0 E0                MOVX    A,@DPTR
00F1 20E0F9            JB      ACC.0,?C0282
00F4         ?C0283:
                                           ; SOURCE LINE # 1750
00F4 E500        R     MOV     A,I2CLen
00F6 30E005            JNB     ACC.0,?C0284
                                           ; SOURCE LINE # 1751
                                           ; SOURCE LINE # 1752
00F9 14                DEC     A
00FA F500        R     MOV     I2CRetry,A
                                           ; SOURCE LINE # 1753
00FC 8003              SJMP    ?C0285
00FE         ?C0284:
                                           ; SOURCE LINE # 1754
                                           ; SOURCE LINE # 1755
00FE 850000      R     MOV     I2CRetry,I2CLen
                                           ; SOURCE LINE # 1756
0101         ?C0285:
                                           ; SOURCE LINE # 1758
0101 7800        R     MOV     R0,#LOW i
0103 7602              MOV     @R0,#02H
0105         ?C0286:
0105 7800        R     MOV     R0,#LOW i
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 115 

0107 E6                MOV     A,@R0
0108 C3                CLR     C
0109 9500        R     SUBB    A,I2CRetry
010B 504D              JNC     ?C0287
                                           ; SOURCE LINE # 1762
                                           ; SOURCE LINE # 1763
010D 7F02              MOV     R7,#02H
010F 120000      E     LCALL   _Delay10US
                                           ; SOURCE LINE # 1764
0112 90004B            MOV     DPTR,#04BH
0115 7401              MOV     A,#01H
0117 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1765
0118 900000      E     MOV     DPTR,#pbIICBuf
011B 74AD              MOV     A,#0ADH
011D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1766
011E AB00        R     MOV     R3,I2CpData
0120 AA00        R     MOV     R2,I2CpData+01H
0122 A900        R     MOV     R1,I2CpData+02H
0124 7800        R     MOV     R0,#LOW i
0126 E6                MOV     A,@R0
0127 FF                MOV     R7,A
0128 F582              MOV     DPL,A
012A 758300            MOV     DPH,#00H
012D 120000      E     LCALL   ?C?CLDOPTR
0130 900000      E     MOV     DPTR,#pbIICBuf+01H
0133 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1769
0134 8F82              MOV     DPL,R7
0136 758300            MOV     DPH,#00H
0139 A3                INC     DPTR
013A 120000      E     LCALL   ?C?CLDOPTR
013D 900000      E     MOV     DPTR,#pbIICBuf+02H
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1770
0141 90004A            MOV     DPTR,#04AH
0144 7403              MOV     A,#03H
0146 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1776
0147 900049            MOV     DPTR,#049H
014A 7435              MOV     A,#035H
014C F0                MOVX    @DPTR,A
014D         ?C0289:
                                           ; SOURCE LINE # 1777
014D 900049            MOV     DPTR,#049H
0150 E0                MOVX    A,@DPTR
0151 20E0F9            JB      ACC.0,?C0289
                                           ; SOURCE LINE # 1778
0154         ?C0288:
0154 7800        R     MOV     R0,#LOW i
0156 06                INC     @R0
0157 06                INC     @R0
0158 80AB              SJMP    ?C0286
015A         ?C0287:
                                           ; SOURCE LINE # 1781
015A 120000      R     LCALL   SPIWriteDisable
                                           ; SOURCE LINE # 1785
015D E500        R     MOV     A,I2CLen
015F 30E034            JNB     ACC.0,?C0281
                                           ; SOURCE LINE # 1786
                                           ; SOURCE LINE # 1787
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 116 

0162 120000      R     LCALL   SPIWriteEnable
                                           ; SOURCE LINE # 1788
0165 AF00        R     MOV     R7,I2CLen
0167 7E00              MOV     R6,#00H
0169 E500        R     MOV     A,I2CwAddr+01H
016B 2F                ADD     A,R7
016C CD                XCH     A,R5
016D EE                MOV     A,R6
016E 3500        R     ADDC    A,I2CwAddr
0170 CD                XCH     A,R5
0171 24FF              ADD     A,#0FFH
0173 F500        R     MOV     I2CwAddr+01H,A
0175 ED                MOV     A,R5
0176 34FF              ADDC    A,#0FFH
0178 F500        R     MOV     I2CwAddr,A
                                           ; SOURCE LINE # 1790
017A 74FF              MOV     A,#0FFH
017C 2F                ADD     A,R7
017D F582              MOV     DPL,A
017F EE                MOV     A,R6
0180 34FF              ADDC    A,#0FFH
0182 F583              MOV     DPH,A
0184 AB00        R     MOV     R3,I2CpData
0186 AA00        R     MOV     R2,I2CpData+01H
0188 A900        R     MOV     R1,I2CpData+02H
018A 120000      E     LCALL   ?C?CLDOPTR
018D 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 1791
0190 750001      R     MOV     I2CLen,#01H
                                           ; SOURCE LINE # 1792
0193 020000      R     LJMP    EEPROMWriteStart
                                           ; SOURCE LINE # 1804
                                           ; SOURCE LINE # 1807
0196         ?C0281:
                                           ; SOURCE LINE # 1809
0196 900049            MOV     DPTR,#049H
0199 E0                MOVX    A,@DPTR
019A 54FB              ANL     A,#0FBH
019C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1811
019D         ?C0268:
                                           ; SOURCE LINE # 1813
019D 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1814
019F         ?C0267:
019F 22                RET     
             ; FUNCTION _I2CEEPROMWriteData (END)

             ; FUNCTION _I2CEEPROMReadData (BEGIN)
                                           ; SOURCE LINE # 1816
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
;---- Variable 'pbData' assigned to Register 'R1/R2/R3' ----
;---- Variable 'bXferLength' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1817
                                           ; SOURCE LINE # 1819
0000 8E00        R     MOV     I2CwAddr,R6
0002 8F00        R     MOV     I2CwAddr+01H,R7
                                           ; SOURCE LINE # 1820
0004 8D00        R     MOV     I2CLen,R5
                                           ; SOURCE LINE # 1821
0006 8B00        R     MOV     I2CpData,R3
0008 8A00        R     MOV     I2CpData+01H,R2
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 117 

000A 8900        R     MOV     I2CpData+02H,R1
                                           ; SOURCE LINE # 1824
000C 20000B      E     JB      xSPIEnable,?C0292
                                           ; SOURCE LINE # 1826
000F 7800        R     MOV     R0,#LOW bI2CRead
0011 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1827
0013 7800        R     MOV     R0,#LOW bEEPROMI2C
0015 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1828
0017 020000      R     LJMP    I2CAccess
                                           ; SOURCE LINE # 1831
001A         ?C0292:
                                           ; SOURCE LINE # 1832
001A E500        R     MOV     A,I2CLen
001C 6005              JZ      ?C0296
001E D3                SETB    C
001F 9420              SUBB    A,#020H
0021 4003              JC      ?C0295
0023         ?C0296:
                                           ; SOURCE LINE # 1833
0023 7F00              MOV     R7,#00H
0025 22                RET     
0026         ?C0295:
                                           ; SOURCE LINE # 1835
0026 E500        R     MOV     A,I2CLen
0028 FD                MOV     R5,A
0029 7C00              MOV     R4,#00H
002B E4                CLR     A
002C FB                MOV     R3,A
002D 120000      R     LCALL   L?0456
0030 EF                MOV     A,R7
0031 7002              JNZ     ?C0297
                                           ; SOURCE LINE # 1836
                                           ; SOURCE LINE # 1837
0033 FF                MOV     R7,A
0034 22                RET     
                                           ; SOURCE LINE # 1838
0035         ?C0297:
                                           ; SOURCE LINE # 1840
0035 AF00        R     MOV     R7,I2CLen
0037 7E00              MOV     R6,#00H
0039 A800        R     MOV     R0,I2CpData+02H
003B AC00        R     MOV     R4,I2CpData+01H
003D AD00        R     MOV     R5,I2CpData
003F 7B01              MOV     R3,#01H
0041 7A00        E     MOV     R2,#HIGH pbIICBuf
0043 7900        E     MOV     R1,#LOW pbIICBuf
0045 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1841
0048 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1842
                                           ; SOURCE LINE # 1857
004A         ?C0293:
004A 22                RET     
             ; FUNCTION _I2CEEPROMReadData (END)

             ; FUNCTION _SensorI2CReadData (BEGIN)
                                           ; SOURCE LINE # 1859
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
;---- Variable 'pData' assigned to Register 'R1/R2/R3' ----
;---- Variable 'bReadLength' assigned to Register 'R5' ----
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 118 

                                           ; SOURCE LINE # 1860
                                           ; SOURCE LINE # 1861
0000 8E00        R     MOV     I2CwAddr,R6
0002 8F00        R     MOV     I2CwAddr+01H,R7
                                           ; SOURCE LINE # 1862
0004 8D00        R     MOV     I2CLen,R5
                                           ; SOURCE LINE # 1863
0006 8B00        R     MOV     I2CpData,R3
0008 8A00        R     MOV     I2CpData+01H,R2
000A 8900        R     MOV     I2CpData+02H,R1
                                           ; SOURCE LINE # 1865
000C 7800        R     MOV     R0,#LOW bI2CRead
000E 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1866
0010 E4                CLR     A
0011 7800        R     MOV     R0,#LOW bEEPROMI2C
0013 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1867
0014 120000      R     LCALL   I2CAccess
                                           ; SOURCE LINE # 1912
0017         ?C0298:
0017 22                RET     
             ; FUNCTION _SensorI2CReadData (END)

             ; FUNCTION _SensorI2CWriteData (BEGIN)
                                           ; SOURCE LINE # 1916
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
;---- Variable 'pData' assigned to Register 'R1/R2/R3' ----
;---- Variable 'bWriteLength' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1917
                                           ; SOURCE LINE # 1918
0000 8E00        R     MOV     I2CwAddr,R6
0002 8F00        R     MOV     I2CwAddr+01H,R7
                                           ; SOURCE LINE # 1919
0004 8D00        R     MOV     I2CLen,R5
                                           ; SOURCE LINE # 1920
0006 8B00        R     MOV     I2CpData,R3
0008 8A00        R     MOV     I2CpData+01H,R2
000A 8900        R     MOV     I2CpData+02H,R1
                                           ; SOURCE LINE # 1922
000C E4                CLR     A
000D 7800        R     MOV     R0,#LOW bI2CRead
000F F6                MOV     @R0,A
                                           ; SOURCE LINE # 1923
0010 7800        R     MOV     R0,#LOW bEEPROMI2C
0012 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1924
0013 120000      R     LCALL   I2CAccess
                                           ; SOURCE LINE # 1971
0016         ?C0299:
0016 22                RET     
             ; FUNCTION _SensorI2CWriteData (END)

             ; FUNCTION CheckEEPROMI2CDevID (BEGIN)
                                           ; SOURCE LINE # 1973
                                           ; SOURCE LINE # 1974
                                           ; SOURCE LINE # 1975
0000 E4                CLR     A
0001 F500        R     MOV     i,A
                                           ; SOURCE LINE # 1976
0003 900040            MOV     DPTR,#040H
0006 04                INC     A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 119 

0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1977
0008 F500        R     MOV     I2CwAddr,A
000A F500        R     MOV     I2CwAddr+01H,A
                                           ; SOURCE LINE # 1978
000C 900000      E     MOV     DPTR,#bEEPromKBits
000F E0                MOVX    A,@DPTR
0010 FD                MOV     R5,A
0011 D3                SETB    C
0012 9410              SUBB    A,#010H
0014 5015              JNC     ?C0300
                                           ; SOURCE LINE # 1979
0016 900040            MOV     DPTR,#040H
0019 E0                MOVX    A,@DPTR
001A 54DF              ANL     A,#0DFH
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1982
001D E500        R     MOV     A,I2CwAddr
001F 5407              ANL     A,#07H
0021 25E0              ADD     A,ACC
0023 FF                MOV     R7,A
0024 900000      E     MOV     DPTR,#bEEPROMID
0027 E0                MOVX    A,@DPTR
0028 4F                ORL     A,R7
                                           ; SOURCE LINE # 1983
0029 8014              SJMP    ?C0442
002B         ?C0300:
002B ED                MOV     A,R5
002C B4FF05            CJNE    A,#0FFH,?C0302
                                           ; SOURCE LINE # 1986
002F D200        E     SETB    xSPIEnable
                                           ; SOURCE LINE # 1987
0031 020000      R     LJMP    SPIRDID
                                           ; SOURCE LINE # 1991
0034         ?C0302:
                                           ; SOURCE LINE # 1992
0034 900040            MOV     DPTR,#040H
0037 E0                MOVX    A,@DPTR
0038 4420              ORL     A,#020H
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1993
003B 900000      E     MOV     DPTR,#bEEPROMID
003E E0                MOVX    A,@DPTR
003F         ?C0442:
003F 900041            MOV     DPTR,#041H
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1994
0043         ?C0301:
                                           ; SOURCE LINE # 1996
0043 900042            MOV     DPTR,#042H
0046 7401              MOV     A,#01H
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1997
0049 A3                INC     DPTR
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1998
004B 900046            MOV     DPTR,#046H
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1999
004F 90004C            MOV     DPTR,#04CH
0052 E4                CLR     A
0053 F0                MOVX    @DPTR,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 120 

                                           ; SOURCE LINE # 2000
0054 900048            MOV     DPTR,#048H
0057 E0                MOVX    A,@DPTR
0058 4401              ORL     A,#01H
005A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2001
005B 900047            MOV     DPTR,#047H
005E 7403              MOV     A,#03H
0060 F0                MOVX    @DPTR,A
0061         ?C0307:
                                           ; SOURCE LINE # 2002
                                           ; SOURCE LINE # 2003
0061 900047            MOV     DPTR,#047H
0064 E0                MOVX    A,@DPTR
0065 30E00E            JNB     ACC.0,?C0306
                                           ; SOURCE LINE # 2004
0068 0500        R     INC     i
                                           ; SOURCE LINE # 2005
006A 7F01              MOV     R7,#01H
006C 120000      E     LCALL   _Delay10US
                                           ; SOURCE LINE # 2006
                                           ; SOURCE LINE # 2007
                                           ; SOURCE LINE # 2008
                                           ; SOURCE LINE # 2009
006F         ?C0305:
006F E500        R     MOV     A,i
0071 C3                CLR     C
0072 9403              SUBB    A,#03H
0074 40EB              JC      ?C0307
0076         ?C0306:
                                           ; SOURCE LINE # 2010
0076 900048            MOV     DPTR,#048H
0079 E0                MOVX    A,@DPTR
007A 5403              ANL     A,#03H
007C 6003              JZ      ?C0310
                                           ; SOURCE LINE # 2011
007E 7F00              MOV     R7,#00H
0080 22                RET     
                                           ; SOURCE LINE # 2012
0081         ?C0310:
                                           ; SOURCE LINE # 2013
0081 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2014
0083         ?C0303:
0083 22                RET     
             ; FUNCTION CheckEEPROMI2CDevID (END)

             ; FUNCTION _OTPWriteData (BEGIN)
                                           ; SOURCE LINE # 2051
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
;---- Variable 'pbData' assigned to Register 'R1/R2/R3' ----
;---- Variable 'bXferLength' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 2052
                                           ; SOURCE LINE # 2055
0000 8E00        R     MOV     I2CwAddr,R6
0002 8F00        R     MOV     I2CwAddr+01H,R7
                                           ; SOURCE LINE # 2056
0004 8D00        R     MOV     I2CLen,R5
                                           ; SOURCE LINE # 2057
0006 8B00        R     MOV     I2CpData,R3
0008 8A00        R     MOV     I2CpData+01H,R2
000A 8900        R     MOV     I2CpData+02H,R1
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 121 

                                           ; SOURCE LINE # 2059
000C E500        R     MOV     A,I2CLen
000E 6005              JZ      ?C0312
0010 D3                SETB    C
0011 9420              SUBB    A,#020H
0013 4003              JC      ?C0311
0015         ?C0312:
                                           ; SOURCE LINE # 2060
0015 7F00              MOV     R7,#00H
0017 22                RET     
                                           ; SOURCE LINE # 2061
0018         ?C0311:
                                           ; SOURCE LINE # 2081
0018 900542            MOV     DPTR,#0542H
001B E500        R     MOV     A,I2CwAddr+01H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2082
001E A3                INC     DPTR
001F E500        R     MOV     A,I2CwAddr
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2085
;---- Variable 'i' assigned to Register 'R7' ----
0022 E4                CLR     A
0023 FF                MOV     R7,A
0024         ?C0314:
0024 EF                MOV     A,R7
0025 C3                CLR     C
0026 9500        R     SUBB    A,I2CLen
0028 501C              JNC     ?C0315
                                           ; SOURCE LINE # 2086
                                           ; SOURCE LINE # 2087
002A AB00        R     MOV     R3,I2CpData
002C AA00        R     MOV     R2,I2CpData+01H
002E A900        R     MOV     R1,I2CpData+02H
0030 8F82              MOV     DPL,R7
0032 758300            MOV     DPH,#00H
0035 120000      E     LCALL   ?C?CLDOPTR
0038 900544            MOV     DPTR,#0544H
003B F0                MOVX    @DPTR,A
003C         ?C0317:
                                           ; SOURCE LINE # 2088
003C 900546            MOV     DPTR,#0546H
003F E0                MOVX    A,@DPTR
0040 20E0F9            JB      ACC.0,?C0317
                                           ; SOURCE LINE # 2089
0043         ?C0316:
0043 0F                INC     R7
0044 80DE              SJMP    ?C0314
0046         ?C0315:
                                           ; SOURCE LINE # 2111
0046 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2112
0048         ?C0313:
0048 22                RET     
             ; FUNCTION _OTPWriteData (END)

             ; FUNCTION OTPWriteEnable (BEGIN)
                                           ; SOURCE LINE # 2114
                                           ; SOURCE LINE # 2115
                                           ; SOURCE LINE # 2116
0000 E4                CLR     A
0001 FF                MOV     R7,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 122 

0002 120000      R     LCALL   _OTP_ROMEnable
                                           ; SOURCE LINE # 2119
0005 900545            MOV     DPTR,#0545H
0008 E0                MOVX    A,@DPTR
0009 4406              ORL     A,#06H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2121
000C E0                MOVX    A,@DPTR
000D 5483              ANL     A,#083H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2122
0010 E0                MOVX    A,@DPTR
0011 4402              ORL     A,#02H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2124
0014 E0                MOVX    A,@DPTR
0015 4408              ORL     A,#08H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2127
0018 7F01              MOV     R7,#01H
001A 120000      E     LCALL   _Delay1MS
                                           ; SOURCE LINE # 2129
001D 900545            MOV     DPTR,#0545H
0020 E0                MOVX    A,@DPTR
0021 4420              ORL     A,#020H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2131
0024 7F01              MOV     R7,#01H
0026 020000      E     LJMP    _Delay1MS
             ; FUNCTION OTPWriteEnable (END)

             ; FUNCTION OTPWriteDisable (BEGIN)
                                           ; SOURCE LINE # 2134
                                           ; SOURCE LINE # 2135
                                           ; SOURCE LINE # 2136
0000 900545            MOV     DPTR,#0545H
0003 E0                MOVX    A,@DPTR
0004 4404              ORL     A,#04H
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2139
0007 7F01              MOV     R7,#01H
0009 120000      E     LCALL   _Delay10US
                                           ; SOURCE LINE # 2140
000C 900545            MOV     DPTR,#0545H
000F E0                MOVX    A,@DPTR
0010 54F7              ANL     A,#0F7H
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2141
0013 7F01              MOV     R7,#01H
0015 120000      E     LCALL   _Delay1MS
                                           ; SOURCE LINE # 2144
0018 900545            MOV     DPTR,#0545H
001B E0                MOVX    A,@DPTR
001C 548F              ANL     A,#08FH
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2155
001F 22                RET     
             ; FUNCTION OTPWriteDisable (END)

             ; FUNCTION _OTPReadData (BEGIN)
                                           ; SOURCE LINE # 2157
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 123 

;---- Variable 'pbData' assigned to Register 'R1/R2/R3' ----
;---- Variable 'bXferLength' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 2158
                                           ; SOURCE LINE # 2161
0000 8E00        R     MOV     I2CwAddr,R6
0002 8F00        R     MOV     I2CwAddr+01H,R7
                                           ; SOURCE LINE # 2162
0004 8D00        R     MOV     I2CLen,R5
                                           ; SOURCE LINE # 2163
0006 8B00        R     MOV     I2CpData,R3
0008 8A00        R     MOV     I2CpData+01H,R2
000A 8900        R     MOV     I2CpData+02H,R1
                                           ; SOURCE LINE # 2165
000C E500        R     MOV     A,I2CLen
000E 6005              JZ      ?C0322
0010 D3                SETB    C
0011 9420              SUBB    A,#020H
0013 4003              JC      ?C0321
0015         ?C0322:
                                           ; SOURCE LINE # 2166
0015 7F00              MOV     R7,#00H
0017 22                RET     
                                           ; SOURCE LINE # 2167
0018         ?C0321:
                                           ; SOURCE LINE # 2168
0018 E4                CLR     A
0019 FF                MOV     R7,A
001A 120000      R     LCALL   _OTP_ROMEnable
                                           ; SOURCE LINE # 2171
001D 900545            MOV     DPTR,#0545H
0020 E0                MOVX    A,@DPTR
0021 5481              ANL     A,#081H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2173
0024 E0                MOVX    A,@DPTR
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2178
0026 00                NOP     
                                           ; SOURCE LINE # 2179
0027 00                NOP     
0028 00                NOP     
0029 00                NOP     
002A 00                NOP     
                                           ; SOURCE LINE # 2183
;---- Variable 'i' assigned to Register 'R7' ----
002B E4                CLR     A
002C FF                MOV     R7,A
002D         ?C0324:
002D EF                MOV     A,R7
002E C3                CLR     C
002F 9500        R     SUBB    A,I2CLen
0031 5024              JNC     ?C0325
                                           ; SOURCE LINE # 2184
0033 900542            MOV     DPTR,#0542H
0036 E500        R     MOV     A,I2CwAddr+01H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2185
0039 A3                INC     DPTR
003A E500        R     MOV     A,I2CwAddr
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2188
003D A3                INC     DPTR
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 124 

003E E0                MOVX    A,@DPTR
003F FE                MOV     R6,A
0040 7400        E     MOV     A,#LOW pbIICBuf
0042 2F                ADD     A,R7
0043 F582              MOV     DPL,A
0045 E4                CLR     A
0046 3400        E     ADDC    A,#HIGH pbIICBuf
0048 F583              MOV     DPH,A
004A EE                MOV     A,R6
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2190
004C 0500        R     INC     I2CwAddr+01H
004E E500        R     MOV     A,I2CwAddr+01H
0050 7002              JNZ     ?C0429
0052 0500        R     INC     I2CwAddr
0054         ?C0429:
                                           ; SOURCE LINE # 2191
0054 0F                INC     R7
0055 80D6              SJMP    ?C0324
0057         ?C0325:
                                           ; SOURCE LINE # 2194
0057 900545            MOV     DPTR,#0545H
005A E0                MOVX    A,@DPTR
005B 4406              ORL     A,#06H
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2196
005E 7401              MOV     A,#01H
0060 900000      E     MOV     DPTR,#pbIICBuf
0063 6500        R     XRL     A,I2CpData
0065 700A              JNZ     ?C0430
0067 E500        R     MOV     A,I2CpData+02H
0069 6582              XRL     A,DPL
006B 7004              JNZ     ?C0430
006D E500        R     MOV     A,I2CpData+01H
006F 6583              XRL     A,DPH
0071         ?C0430:
0071 6013              JZ      ?C0327
                                           ; SOURCE LINE # 2197
0073 AF00        R     MOV     R7,I2CLen
0075 7E00              MOV     R6,#00H
0077 A800        R     MOV     R0,I2CpData+02H
0079 AC00        R     MOV     R4,I2CpData+01H
007B AD00        R     MOV     R5,I2CpData
007D 7B01              MOV     R3,#01H
007F 7A00        E     MOV     R2,#HIGH pbIICBuf
0081 7900        E     MOV     R1,#LOW pbIICBuf
0083 120000      E     LCALL   ?C?COPY
0086         ?C0327:
                                           ; SOURCE LINE # 2204
0086 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2205
0088         ?C0323:
0088 22                RET     
             ; FUNCTION _OTPReadData (END)

             ; FUNCTION CheckProtection (BEGIN)
                                           ; SOURCE LINE # 2211
                                           ; SOURCE LINE # 2212
                                           ; SOURCE LINE # 2215
0000 C200        E     CLR     xBDGP13
                                           ; SOURCE LINE # 2216
0002 C200        E     CLR     xBDGP16
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 125 

                                           ; SOURCE LINE # 2220
0004 900023            MOV     DPTR,#023H
0007 E0                MOVX    A,@DPTR
0008 54DF              ANL     A,#0DFH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2222
000B 900025            MOV     DPTR,#025H
000E E0                MOVX    A,@DPTR
000F 4420              ORL     A,#020H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2225
0012 90002F            MOV     DPTR,#02FH
0015 7408              MOV     A,#08H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2227
0018 7F0A              MOV     R7,#0AH
001A 120000      E     LCALL   _Delay10US
                                           ; SOURCE LINE # 2229
001D 900021            MOV     DPTR,#021H
0020 E0                MOVX    A,@DPTR
0021 30E509            JNB     ACC.5,?C0328
                                           ; SOURCE LINE # 2230
0024 D200        E     SETB    xBDGP13
                                           ; SOURCE LINE # 2231
0026 900025            MOV     DPTR,#025H
0029 E0                MOVX    A,@DPTR
002A 54DF              ANL     A,#0DFH
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2232
002D         ?C0328:
                                           ; SOURCE LINE # 2234
002D 90002F            MOV     DPTR,#02FH
0030 E0                MOVX    A,@DPTR
0031 30E106            JNB     ACC.1,?C0330
                                           ; SOURCE LINE # 2235
0034 D200        E     SETB    xBDGP16
                                           ; SOURCE LINE # 2237
0036 E0                MOVX    A,@DPTR
0037 54F7              ANL     A,#0F7H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2238
                                           ; SOURCE LINE # 2239
003A         ?C0330:
003A 22                RET     
             ; FUNCTION CheckProtection (END)

             ; FUNCTION L?0455 (BEGIN)
0000 7B01              MOV     R3,#01H
0002         L?0456:
0002 AF00        R     MOV     R7,I2CwAddr+01H
0004 AE00        R     MOV     R6,I2CwAddr
             ; FUNCTION _I2CEEPROMDirRAM (BEGIN)
                                           ; SOURCE LINE # 2244
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
;---- Variable 'bDirFlag' assigned to Register 'R3' ----
;---- Variable 'wXferLength' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 2245
                                           ; SOURCE LINE # 2246
0006 8C00        R     MOV     I2CwAddr,R4
0008 8D00        R     MOV     I2CwAddr+01H,R5
                                           ; SOURCE LINE # 2247
000A 850000      R     MOV     I2CLen,I2CwAddr+01H
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 126 

                                           ; SOURCE LINE # 2248
000D 850000      R     MOV     I2CTemp,I2CwAddr
                                           ; SOURCE LINE # 2249
0010 8E00        R     MOV     I2CwAddr,R6
0012 8F00        R     MOV     I2CwAddr+01H,R7
                                           ; SOURCE LINE # 2250
0014 7800        R     MOV     R0,#LOW bI2CID
0016 A603              MOV     @R0,AR3
                                           ; SOURCE LINE # 2269
0018 20005B      E     JB      xSPIEnable,?C0331
                                           ; SOURCE LINE # 2273
001B 900000      E     MOV     DPTR,#bIICClock
001E E0                MOVX    A,@DPTR
001F 4440              ORL     A,#040H
0021 900040            MOV     DPTR,#040H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2276
0025 E0                MOVX    A,@DPTR
0026 4480              ORL     A,#080H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2277
                                           ; SOURCE LINE # 2279
0029 900000      E     MOV     DPTR,#bEEPromKBits
002C E0                MOVX    A,@DPTR
002D D3                SETB    C
002E 9410              SUBB    A,#010H
0030 900040            MOV     DPTR,#040H
0033 E0                MOVX    A,@DPTR
0034 500F              JNC     ?C0332
                                           ; SOURCE LINE # 2280
0036 54DF              ANL     A,#0DFH
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2282
0039 E500        R     MOV     A,I2CwAddr
003B 5407              ANL     A,#07H
003D 25E0              ADD     A,ACC
003F 44A0              ORL     A,#0A0H
0041 A3                INC     DPTR
0042 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2283
0043 800B              SJMP    ?C0333
0045         ?C0332:
                                           ; SOURCE LINE # 2284
0045 4420              ORL     A,#020H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2285
0048 900000      E     MOV     DPTR,#bEEPROMID
004B E0                MOVX    A,@DPTR
004C 900041            MOV     DPTR,#041H
004F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2286
0050         ?C0333:
                                           ; SOURCE LINE # 2287
0050 900042            MOV     DPTR,#042H
0053 E500        R     MOV     A,I2CwAddr+01H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2288
0056 E500        R     MOV     A,I2CwAddr
0058 A3                INC     DPTR
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2289
005A 900046            MOV     DPTR,#046H
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 127 

005D E500        R     MOV     A,I2CLen
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2290
0060 90004C            MOV     DPTR,#04CH
0063 E500        R     MOV     A,I2CTemp
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2291
0066 900048            MOV     DPTR,#048H
0069 E0                MOVX    A,@DPTR
006A 4407              ORL     A,#07H
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2292
006D 900047            MOV     DPTR,#047H
0070 7403              MOV     A,#03H
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2295
                                           ; SOURCE LINE # 2296
0073 7F01              MOV     R7,#01H
0075 22                RET     
                                           ; SOURCE LINE # 2297
                                           ; SOURCE LINE # 2311
0076         ?C0331:
                                           ; SOURCE LINE # 2312
                                           ; SOURCE LINE # 2314
0076 900500            MOV     DPTR,#0500H
0079 E0                MOVX    A,@DPTR
007A 4480              ORL     A,#080H
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2316
007D 120000      R     LCALL   CheckSPIRdyStatus
0080 EF                MOV     A,R7
0081 30E003            JNB     ACC.0,?C0336
                                           ; SOURCE LINE # 2317
0084 7F00              MOV     R7,#00H
0086 22                RET     
                                           ; SOURCE LINE # 2318
0087         ?C0336:
                                           ; SOURCE LINE # 2320
0087 900500            MOV     DPTR,#0500H
008A E0                MOVX    A,@DPTR
008B 547F              ANL     A,#07FH
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2322
008E 7800        R     MOV     R0,#LOW bI2CID
0090 E6                MOV     A,@R0
0091 6007              JZ      ?C0337
                                           ; SOURCE LINE # 2323
0093 900040            MOV     DPTR,#040H
0096 E0                MOVX    A,@DPTR
0097 4480              ORL     A,#080H
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2324
009A         ?C0337:
                                           ; SOURCE LINE # 2325
009A 900049            MOV     DPTR,#049H
009D 7414              MOV     A,#014H
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2326
00A0 90004B            MOV     DPTR,#04BH
00A3 7402              MOV     A,#02H
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2328
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 128 

00A6 900000      E     MOV     DPTR,#pbIICBuf
00A9 04                INC     A
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2329
00AB E4                CLR     A
00AC A3                INC     DPTR
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2330
00AE E500        R     MOV     A,I2CwAddr
00B0 A3                INC     DPTR
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2331
00B2 A3                INC     DPTR
00B3 E500        R     MOV     A,I2CwAddr+01H
00B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2332
00B6 90004A            MOV     DPTR,#04AH
00B9 7404              MOV     A,#04H
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2333
00BC 900049            MOV     DPTR,#049H
00BF 7435              MOV     A,#035H
00C1 F0                MOVX    @DPTR,A
00C2         ?C0338:
                                           ; SOURCE LINE # 2334
00C2 900049            MOV     DPTR,#049H
00C5 E0                MOVX    A,@DPTR
00C6 20E0F9            JB      ACC.0,?C0338
00C9         ?C0339:
                                           ; SOURCE LINE # 2335
00C9 900046            MOV     DPTR,#046H
00CC E500        R     MOV     A,I2CLen
00CE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2336
00CF 90004C            MOV     DPTR,#04CH
00D2 E500        R     MOV     A,I2CTemp
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2337
00D5 900049            MOV     DPTR,#049H
00D8 743F              MOV     A,#03FH
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2339
00DB 7800        R     MOV     R0,#LOW bI2CID
00DD E6                MOV     A,@R0
00DE 6003              JZ      ?C0341
                                           ; SOURCE LINE # 2340
                                           ; SOURCE LINE # 2341
00E0 7F01              MOV     R7,#01H
00E2 22                RET     
                                           ; SOURCE LINE # 2342
00E3         ?C0341:
                                           ; SOURCE LINE # 2344
00E3 900049            MOV     DPTR,#049H
00E6 E0                MOVX    A,@DPTR
00E7 20E0F9            JB      ACC.0,?C0341
00EA         ?C0342:
                                           ; SOURCE LINE # 2345
00EA 900049            MOV     DPTR,#049H
00ED E0                MOVX    A,@DPTR
00EE 54FB              ANL     A,#0FBH
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2346
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 129 

00F1 900040            MOV     DPTR,#040H
00F4 E0                MOVX    A,@DPTR
00F5 547F              ANL     A,#07FH
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2347
00F8         ?C0335:
                                           ; SOURCE LINE # 2350
00F8 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2351
00FA         ?C0334:
00FA 22                RET     
             ; FUNCTION _I2CEEPROMDirRAM (END)

             ; FUNCTION L?0454 (BEGIN)
0000 E0                MOVX    A,@DPTR
0001 FC                MOV     R4,A
0002 A3                INC     DPTR
0003 E0                MOVX    A,@DPTR
0004 FD                MOV     R5,A
0005 AB00        E     MOV     R3,wValue+01H
0007 AA00        E     MOV     R2,wValue
0009 AF00        E     MOV     R7,wIndex+01H
000B AE00        E     MOV     R6,wIndex
             ; FUNCTION _LoadToUpgradedRAM (BEGIN)
                                           ; SOURCE LINE # 2356
;---- Variable 'wAddrFrom' assigned to Register 'R6/R7' ----
;---- Variable 'wLen' assigned to Register 'R2/R3' ----
;---- Variable 'wAddrTo' assigned to Register 'R4/R5' ----
                                           ; SOURCE LINE # 2359
                                           ; SOURCE LINE # 2363
000D 8C00        R     MOV     wADDRtoRAM,R4
000F 8D00        R     MOV     wADDRtoRAM+01H,R5
                                           ; SOURCE LINE # 2364
0011 8A00        R     MOV     wTransLen,R2
0013 8B00        R     MOV     wTransLen+01H,R3
                                           ; SOURCE LINE # 2365
0015 8E00        R     MOV     I2CwAddr,R6
0017 8F00        R     MOV     I2CwAddr+01H,R7
                                           ; SOURCE LINE # 2368
0019 900501            MOV     DPTR,#0501H
001C E500        R     MOV     A,wTransLen+01H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2369
001F A3                INC     DPTR
0020 E500        R     MOV     A,wTransLen
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2370
0023 900500            MOV     DPTR,#0500H
0026 7405              MOV     A,#05H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2373
0029 900551            MOV     DPTR,#0551H
002C E500        R     MOV     A,wADDRtoRAM+01H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2374
002F A3                INC     DPTR
0030 E500        R     MOV     A,wADDRtoRAM
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2376
0033 E4                CLR     A
0034 7800        R     MOV     R0,#LOW bI2CMode
0036 F6                MOV     @R0,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 130 

0037         ?C0345:
                                           ; SOURCE LINE # 2377
                                           ; SOURCE LINE # 2378
0037 AD00        R     MOV     R5,wTransLen+01H
0039 AC00        R     MOV     R4,wTransLen
003B 120000      R     LCALL   L?0455
003E EF                MOV     A,R7
003F 6008              JZ      ?C0347
0041 7800        R     MOV     R0,#LOW bI2CMode
0043 E6                MOV     A,@R0
0044 D3                SETB    C
0045 9408              SUBB    A,#08H
0047 4003              JC      ?C0343
0049         ?C0347:
                                           ; SOURCE LINE # 2379
0049 7F00              MOV     R7,#00H
004B 22                RET     
                                           ; SOURCE LINE # 2380
004C         ?C0343:
004C 120000      R     LCALL   WaitPartialFWLoad
004F EF                MOV     A,R7
0050 60E5              JZ      ?C0345
                                           ; SOURCE LINE # 2382
0052 E500        E     MOV     A,bRequestType
0054 F4                CPL     A
0055 6033              JZ      ?C0349
                                           ; SOURCE LINE # 2383
                                           ; SOURCE LINE # 2385
0057 E500        R     MOV     A,wADDRtoRAM+01H
0059 2500        R     ADD     A,wTransLen+01H
005B FF                MOV     R7,A
005C E500        R     MOV     A,wADDRtoRAM
005E 3500        R     ADDC    A,wTransLen
0060 FE                MOV     R6,A
0061 7400        E     MOV     A,#LOW pbXFWCode+0FFFFH
0063 2F                ADD     A,R7
0064 F582              MOV     DPL,A
0066 7400        E     MOV     A,#HIGH pbXFWCode+0FFFFH
0068 3E                ADDC    A,R6
0069 F583              MOV     DPH,A
006B E0                MOVX    A,@DPTR
006C FD                MOV     R5,A
006D 900503            MOV     DPTR,#0503H
0070 E0                MOVX    A,@DPTR
0071 B50513            CJNE    A,AR5,?C0351
0074 7400        E     MOV     A,#LOW pbXFWCode+0FFFEH
0076 2F                ADD     A,R7
0077 F582              MOV     DPL,A
0079 7400        E     MOV     A,#HIGH pbXFWCode+0FFFEH
007B 3E                ADDC    A,R6
007C F583              MOV     DPH,A
007E E0                MOVX    A,@DPTR
007F FF                MOV     R7,A
0080 900504            MOV     DPTR,#0504H
0083 E0                MOVX    A,@DPTR
0084 6F                XRL     A,R7
0085 6003              JZ      ?C0349
0087         ?C0351:
                                           ; SOURCE LINE # 2387
                                           ; SOURCE LINE # 2396
0087 7F00              MOV     R7,#00H
0089 22                RET     
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 131 

                                           ; SOURCE LINE # 2397
                                           ; SOURCE LINE # 2398
008A         ?C0349:
                                           ; SOURCE LINE # 2399
008A 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2402
008C         ?C0348:
008C 22                RET     
             ; FUNCTION _LoadToUpgradedRAM (END)

             ; FUNCTION MainFP2Dummy (BEGIN)
                                           ; SOURCE LINE # 2405
                                           ; SOURCE LINE # 2406
                                           ; SOURCE LINE # 2407
0000 900000      E     MOV     DPTR,#pfExternalReset
0003 7400        E     MOV     A,#HIGH inExternalReset
0005 F0                MOVX    @DPTR,A
0006 A3                INC     DPTR
0007 7400        E     MOV     A,#LOW inExternalReset
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2408
000A 900000      E     MOV     DPTR,#pfControlInterruptRoutine
000D 7400        E     MOV     A,#HIGH inControlInterruptRoutine
000F F0                MOVX    @DPTR,A
0010 A3                INC     DPTR
0011 7400        E     MOV     A,#LOW inControlInterruptRoutine
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2409
0014 900000      E     MOV     DPTR,#pfSensorExtenUnitCtrl
0017 7400        E     MOV     A,#HIGH inSensorExtenUnitCtrl
0019 F0                MOVX    @DPTR,A
001A A3                INC     DPTR
001B 7400        E     MOV     A,#LOW inSensorExtenUnitCtrl
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2410
001E 900000      E     MOV     DPTR,#pfExStateFunction
0021 7400        E     MOV     A,#HIGH inExStateFunction
0023 F0                MOVX    @DPTR,A
0024 A3                INC     DPTR
0025 7400        E     MOV     A,#LOW inExStateFunction
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2412
0028 900000      E     MOV     DPTR,#pfExMainHookFunc
002B 7400        E     MOV     A,#HIGH ExMainHookFunc
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
002F 7400        E     MOV     A,#LOW ExMainHookFunc
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2413
0032 900000      E     MOV     DPTR,#pfISROfTime1
0035 7400        E     MOV     A,#HIGH ISROfTime1
0037 F0                MOVX    @DPTR,A
0038 A3                INC     DPTR
0039 7400        E     MOV     A,#LOW ISROfTime1
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2414
003C 22                RET     
             ; FUNCTION MainFP2Dummy (END)

             ; FUNCTION WaitPartialFWLoad (BEGIN)
                                           ; SOURCE LINE # 2416
                                           ; SOURCE LINE # 2417
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 132 

                                           ; SOURCE LINE # 2419
0000 20003B      E     JB      xSPIEnable,?C0363
0003         ?C0354:
                                           ; SOURCE LINE # 2421
0003 900047            MOV     DPTR,#047H
0006 E0                MOVX    A,@DPTR
0007 20E0F9            JB      ACC.0,?C0354
000A         ?C0355:
                                           ; SOURCE LINE # 2422
000A 900040            MOV     DPTR,#040H
000D E0                MOVX    A,@DPTR
000E 547F              ANL     A,#07FH
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2423
0011 900048            MOV     DPTR,#048H
0014 E0                MOVX    A,@DPTR
0015 5403              ANL     A,#03H
0017 603A              JZ      ?C0362
0019 300037      E     JNB     xExFWExist,?C0362
                                           ; SOURCE LINE # 2424
                                           ; SOURCE LINE # 2425
001C 300019      E     JNB     xFWPartialLoad,?C0357
                                           ; SOURCE LINE # 2426
                                           ; SOURCE LINE # 2427
001F E500        E     MOV     A,bInSegCount
0021 D3                SETB    C
0022 9400              SUBB    A,#00H
0024 4007              JC      ?C0358
                                           ; SOURCE LINE # 2428
0026 1500        E     DEC     bInSegCount
                                           ; SOURCE LINE # 2430
0028 74FF              MOV     A,#0FFH
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2431
002B 8003              SJMP    ?C0359
002D         ?C0358:
                                           ; SOURCE LINE # 2432
                                           ; SOURCE LINE # 2433
002D E4                CLR     A
002E F500        E     MOV     bFWLoadState,A
                                           ; SOURCE LINE # 2434
0030         ?C0359:
                                           ; SOURCE LINE # 2436
0030 E500        E     MOV     A,bFWLoadState
0032 B40203            CJNE    A,#02H,?C0357
                                           ; SOURCE LINE # 2437
0035 750001      E     MOV     bFWLoadState,#01H
                                           ; SOURCE LINE # 2439
0038         ?C0357:
                                           ; SOURCE LINE # 2440
0038 7800        R     MOV     R0,#LOW bI2CMode
003A 06                INC     @R0
                                           ; SOURCE LINE # 2441
003B 7F00              MOV     R7,#00H
003D 22                RET     
                                           ; SOURCE LINE # 2442
                                           ; SOURCE LINE # 2445
003E         ?C0363:
                                           ; SOURCE LINE # 2446
003E 900049            MOV     DPTR,#049H
0041 E0                MOVX    A,@DPTR
0042 20E0F9            JB      ACC.0,?C0363
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 133 

0045         ?C0364:
                                           ; SOURCE LINE # 2447
0045 900049            MOV     DPTR,#049H
0048 E0                MOVX    A,@DPTR
0049 54FB              ANL     A,#0FBH
004B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2448
004C 900040            MOV     DPTR,#040H
004F E0                MOVX    A,@DPTR
0050 547F              ANL     A,#07FH
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2449
0053         ?C0362:
                                           ; SOURCE LINE # 2452
0053 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2453
0055         ?C0361:
0055 22                RET     
             ; FUNCTION WaitPartialFWLoad (END)

             ; FUNCTION _ReplaceFW (BEGIN)
                                           ; SOURCE LINE # 2456
;---- Variable 'bSeg' assigned to Register 'R5' ----
0000 AD07              MOV     R5,AR7
                                           ; SOURCE LINE # 2457
                                           ; SOURCE LINE # 2461
0002 200003      E     JB      xFWPartialLoad,$ + 6H
0005 020000      R     LJMP    ?C0365
0008 E500        E     MOV     A,bFWLoadState
000A 6402              XRL     A,#02H
000C 7003              JNZ     $ + 5H
000E 020000      R     LJMP    ?C0365
                                           ; SOURCE LINE # 2462
                                           ; SOURCE LINE # 2463
0011 E500        E     MOV     A,bFWLoadState
0013 702A              JNZ     ?C0366
                                           ; SOURCE LINE # 2464
                                           ; SOURCE LINE # 2465
0015 900000      E     MOV     DPTR,#bPartialSeg
0018 E0                MOVX    A,@DPTR
0019 B50503            CJNE    A,AR5,?C0367
                                           ; SOURCE LINE # 2466
                                           ; SOURCE LINE # 2467
001C 020000      R     LJMP    ?C0443
                                           ; SOURCE LINE # 2469
001F         ?C0367:
                                           ; SOURCE LINE # 2471
001F 120000      R     LCALL   MainFP2Dummy
                                           ; SOURCE LINE # 2472
0022 900027            MOV     DPTR,#027H
0025 E0                MOVX    A,@DPTR
0026 54EF              ANL     A,#0EFH
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2473
0029 00                NOP     
002A 00                NOP     
002B 00                NOP     
                                           ; SOURCE LINE # 2474
002C 00                NOP     
002D 00                NOP     
002E 00                NOP     
                                           ; SOURCE LINE # 2476
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 134 

002F 750001      E     MOV     bFWLoadState,#01H
                                           ; SOURCE LINE # 2477
0032 E4                CLR     A
0033 F500        E     MOV     bInSegCount,A
                                           ; SOURCE LINE # 2478
0035 900505            MOV     DPTR,#0505H
0038 74FF              MOV     A,#0FFH
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2479
003B A3                INC     DPTR
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2483
                                           ; SOURCE LINE # 2484
003D 802B              SJMP    ?C0444
003F         ?C0366:
003F 300038      E     JNB     xExFWExist,?C0369
                                           ; SOURCE LINE # 2485
                                           ; SOURCE LINE # 2487
0042 20002B      E     JB      xSPIEnable,?C0371
                                           ; SOURCE LINE # 2489
0045 900047            MOV     DPTR,#047H
0048 E0                MOVX    A,@DPTR
0049 30E003            JNB     ACC.0,$ + 6H
004C 020000      R     LJMP    ?C0368
                                           ; SOURCE LINE # 2490
                                           ; SOURCE LINE # 2491
004F         ?C0372:
                                           ; SOURCE LINE # 2492
004F 900048            MOV     DPTR,#048H
0052 E0                MOVX    A,@DPTR
0053 5403              ANL     A,#03H
0055 6013              JZ      ?C0374
                                           ; SOURCE LINE # 2493
                                           ; SOURCE LINE # 2495
0057 D50003      E     DJNZ    bInSegCount,?C0375
                                           ; SOURCE LINE # 2496
                                           ; SOURCE LINE # 2497
005A E4                CLR     A
005B F500        E     MOV     bFWLoadState,A
                                           ; SOURCE LINE # 2498
005D         ?C0375:
                                           ; SOURCE LINE # 2500
005D 7800        R     MOV     R0,#LOW bI2CMode
005F 06                INC     @R0
                                           ; SOURCE LINE # 2501
0060 E6                MOV     A,@R0
0061 D3                SETB    C
0062 9408              SUBB    A,#08H
0064 4014              JC      ?C0369
                                           ; SOURCE LINE # 2502
                                           ; SOURCE LINE # 2504
0066 750009      E     MOV     bErrCountSEGFW,#09H
0069 22                RET     
                                           ; SOURCE LINE # 2506
                                           ; SOURCE LINE # 2507
006A         ?C0374:
                                           ; SOURCE LINE # 2508
                                           ; SOURCE LINE # 2509
006A         ?C0444:
006A E4                CLR     A
006B 7800        R     MOV     R0,#LOW bI2CMode
006D F6                MOV     @R0,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 135 

                                           ; SOURCE LINE # 2510
                                           ; SOURCE LINE # 2511
                                           ; SOURCE LINE # 2513
006E 800A              SJMP    ?C0369
0070         ?C0371:
                                           ; SOURCE LINE # 2514
0070 900049            MOV     DPTR,#049H
0073 E0                MOVX    A,@DPTR
0074 30E003            JNB     ACC.0,$ + 6H
0077 020000      R     LJMP    ?C0368
                                           ; SOURCE LINE # 2516
                                           ; SOURCE LINE # 2518
007A         ?C0369:
                                           ; SOURCE LINE # 2521
007A E500        E     MOV     A,bInSegCount
007C 75F0C8            MOV     B,#0C8H
007F A4                MUL     AB
0080 85F000      R     MOV     wTransfLen,B
0083 F500        R     MOV     wTransfLen+01H,A
                                           ; SOURCE LINE # 2524
0085 900000      E     MOV     DPTR,#PartialMemSet+01H
0088 E0                MOVX    A,@DPTR
0089 2500        R     ADD     A,wTransfLen+01H
008B F500        R     MOV     wAddrtmp+01H,A
008D 900000      E     MOV     DPTR,#PartialMemSet
0090 E0                MOVX    A,@DPTR
0091 3500        R     ADDC    A,wTransfLen
0093 F500        R     MOV     wAddrtmp,A
                                           ; SOURCE LINE # 2525
0095 900551            MOV     DPTR,#0551H
0098 E500        R     MOV     A,wAddrtmp+01H
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2526
009B A3                INC     DPTR
009C E500        R     MOV     A,wAddrtmp
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2530
009F ED                MOV     A,R5
00A0 25E0              ADD     A,ACC
00A2 25E0              ADD     A,ACC
00A4 2400        E     ADD     A,#LOW PartialMemSet+02H
00A6 F582              MOV     DPL,A
00A8 E4                CLR     A
00A9 3400        E     ADDC    A,#HIGH PartialMemSet+02H
00AB F583              MOV     DPH,A
00AD E0                MOVX    A,@DPTR
00AE FE                MOV     R6,A
00AF A3                INC     DPTR
00B0 E0                MOVX    A,@DPTR
00B1 2500        R     ADD     A,wTransfLen+01H
00B3 F500        R     MOV     I2CwAddr+01H,A
00B5 E500        R     MOV     A,wTransfLen
00B7 3E                ADDC    A,R6
00B8 F500        R     MOV     I2CwAddr,A
                                           ; SOURCE LINE # 2534
00BA E500        R     MOV     A,wTransfLen+01H
00BC 24C9              ADD     A,#0C9H
00BE FF                MOV     R7,A
00BF E4                CLR     A
00C0 3500        R     ADDC    A,wTransfLen
00C2 FE                MOV     R6,A
00C3 ED                MOV     A,R5
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 136 

00C4 25E0              ADD     A,ACC
00C6 25E0              ADD     A,ACC
00C8 2400        E     ADD     A,#LOW PartialMemSet+04H
00CA F582              MOV     DPL,A
00CC E4                CLR     A
00CD 3400        E     ADDC    A,#HIGH PartialMemSet+04H
00CF F583              MOV     DPH,A
00D1 E0                MOVX    A,@DPTR
00D2 FA                MOV     R2,A
00D3 A3                INC     DPTR
00D4 E0                MOVX    A,@DPTR
00D5 FB                MOV     R3,A
00D6 D3                SETB    C
00D7 9F                SUBB    A,R7
00D8 EA                MOV     A,R2
00D9 9E                SUBB    A,R6
00DA 4008              JC      ?C0380
                                           ; SOURCE LINE # 2535
                                           ; SOURCE LINE # 2536
00DC 750000      R     MOV     wTransfLen,#00H
00DF 7500C8      R     MOV     wTransfLen+01H,#0C8H
                                           ; SOURCE LINE # 2538
00E2 8020              SJMP    ?C0381
00E4         ?C0380:
                                           ; SOURCE LINE # 2539
                                           ; SOURCE LINE # 2540
00E4 C3                CLR     C
00E5 EB                MOV     A,R3
00E6 9500        R     SUBB    A,wTransfLen+01H
00E8 F500        R     MOV     wTransfLen+01H,A
00EA EA                MOV     A,R2
00EB 9500        R     SUBB    A,wTransfLen
00ED F500        R     MOV     wTransfLen,A
                                           ; SOURCE LINE # 2544
00EF 900000      E     MOV     DPTR,#bPartialSeg
00F2 ED                MOV     A,R5
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2545
00F4 750002      E     MOV     bFWLoadState,#02H
                                           ; SOURCE LINE # 2547
00F7 900553            MOV     DPTR,#0553H
00FA E4                CLR     A
00FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2548
00FC ED                MOV     A,R5
00FD C4                SWAP    A
00FE 54F0              ANL     A,#0F0H
0100 2480              ADD     A,#080H
0102 A3                INC     DPTR
0103 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2549
0104         ?C0381:
                                           ; SOURCE LINE # 2552
0104 900501            MOV     DPTR,#0501H
0107 E500        R     MOV     A,wTransfLen+01H
0109 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2553
010A A3                INC     DPTR
010B E500        R     MOV     A,wTransfLen
010D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2556
010E E500        E     MOV     A,bFWLoadState
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 137 

0110 B40205            CJNE    A,#02H,?C0382
                                           ; SOURCE LINE # 2557
0113 750045      R     MOV     I2CRetry,#045H
0116 8003              SJMP    ?C0383
0118         ?C0382:
                                           ; SOURCE LINE # 2559
0118 750061      R     MOV     I2CRetry,#061H
011B         ?C0383:
                                           ; SOURCE LINE # 2563
011B 300013      E     JNB     xExFWExist,?C0384
                                           ; SOURCE LINE # 2564
                                           ; SOURCE LINE # 2566
011E 900500            MOV     DPTR,#0500H
0121 E500        R     MOV     A,I2CRetry
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2568
0124 AD00        R     MOV     R5,wTransfLen+01H
0126 AC00        R     MOV     R4,wTransfLen
0128 120000      R     LCALL   L?0455
012B EF                MOV     A,R7
012C 6041              JZ      ?C0368
                                           ; SOURCE LINE # 2569
                                           ; SOURCE LINE # 2572
012E 0500        E     INC     bInSegCount
                                           ; SOURCE LINE # 2573
                                           ; SOURCE LINE # 2574
0130 22                RET     
0131         ?C0384:
                                           ; SOURCE LINE # 2577
                                           ; SOURCE LINE # 2578
0131 E4                CLR     A
0132 FF                MOV     R7,A
0133 FE                MOV     R6,A
0134 120000      R     LCALL   _OTPROMAddrUpdate
                                           ; SOURCE LINE # 2580
0137 E500        R     MOV     A,I2CRetry
0139 4410              ORL     A,#010H
013B 900500            MOV     DPTR,#0500H
013E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2585
013F AE00        R     MOV     R6,wTransfLen
0141 AF00        R     MOV     R7,wTransfLen+01H
0143 E4                CLR     A
0144 2500        R     ADD     A,I2CwAddr+01H
0146 FD                MOV     R5,A
0147 E500        R     MOV     A,I2CwAddr
0149 3480              ADDC    A,#080H
014B FA                MOV     R2,A
014C A905              MOV     R1,AR5
014E 7BFF              MOV     R3,#0FFH
0150 C001              PUSH    AR1
0152 7400        E     MOV     A,#LOW pbXFWCode
0154 2500        R     ADD     A,wAddrtmp+01H
0156 F9                MOV     R1,A
0157 7400        E     MOV     A,#HIGH pbXFWCode
0159 3500        R     ADDC    A,wAddrtmp
015B A801              MOV     R0,AR1
015D FC                MOV     R4,A
015E 7D01              MOV     R5,#01H
0160 D001              POP     AR1
0162 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 2588
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 138 

0165 0500        E     INC     bInSegCount
                                           ; SOURCE LINE # 2589
0167 E4                CLR     A
0168 FF                MOV     R7,A
0169 020000      R     LJMP    _OTP_ROMEnable
                                           ; SOURCE LINE # 2590
                                           ; SOURCE LINE # 2595
016C         ?C0365:
                                           ; SOURCE LINE # 2596
                                           ; SOURCE LINE # 2597
016C         ?C0443:
016C 750002      E     MOV     bFWLoadState,#02H
                                           ; SOURCE LINE # 2598
                                           ; SOURCE LINE # 2599
016F         ?C0368:
016F 22                RET     
             ; FUNCTION _ReplaceFW (END)

             ; FUNCTION isMEMReplacedEnd (BEGIN)
                                           ; SOURCE LINE # 2601
                                           ; SOURCE LINE # 2602
                                           ; SOURCE LINE # 2603
0000 200003      E     JB      xFWPartialLoad,$ + 6H
0003 020000      R     LJMP    ?C0388
                                           ; SOURCE LINE # 2604
                                           ; SOURCE LINE # 2605
0006 E500        E     MOV     A,bFWLoadState
0008 6402              XRL     A,#02H
000A 6003              JZ      ?C0389
                                           ; SOURCE LINE # 2606
000C 7F00              MOV     R7,#00H
000E 22                RET     
000F         ?C0389:
                                           ; SOURCE LINE # 2608
000F 900027            MOV     DPTR,#027H
0012 E0                MOVX    A,@DPTR
0013 30E406            JNB     ACC.4,?C0391
                                           ; SOURCE LINE # 2609
0016 E4                CLR     A
0017 F500        E     MOV     bFWLoadState,A
                                           ; SOURCE LINE # 2610
0019 7F01              MOV     R7,#01H
001B 22                RET     
                                           ; SOURCE LINE # 2611
001C         ?C0391:
                                           ; SOURCE LINE # 2615
001C 200028      E     JB      xSPIEnable,?C0392
                                           ; SOURCE LINE # 2617
001F 900047            MOV     DPTR,#047H
0022 E0                MOVX    A,@DPTR
0023 30E003            JNB     ACC.0,?C0393
                                           ; SOURCE LINE # 2618
                                           ; SOURCE LINE # 2619
0026 7F00              MOV     R7,#00H
0028 22                RET     
                                           ; SOURCE LINE # 2620
0029         ?C0393:
                                           ; SOURCE LINE # 2621
0029 900040            MOV     DPTR,#040H
002C E0                MOVX    A,@DPTR
002D 547F              ANL     A,#07FH
002F F0                MOVX    @DPTR,A
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 139 

                                           ; SOURCE LINE # 2622
0030 900048            MOV     DPTR,#048H
0033 E0                MOVX    A,@DPTR
0034 5403              ANL     A,#03H
0036 6009              JZ      ?C0395
0038 300006      E     JNB     xExFWExist,?C0395
                                           ; SOURCE LINE # 2623
                                           ; SOURCE LINE # 2625
003B 750001      E     MOV     bFWLoadState,#01H
                                           ; SOURCE LINE # 2629
003E 7F00              MOV     R7,#00H
0040 22                RET     
                                           ; SOURCE LINE # 2630
0041         ?C0395:
                                           ; SOURCE LINE # 2632
0041 E4                CLR     A
0042 7800        R     MOV     R0,#LOW bI2CMode
0044 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2633
                                           ; SOURCE LINE # 2635
0045 8018              SJMP    ?C0396
0047         ?C0392:
                                           ; SOURCE LINE # 2636
0047 900049            MOV     DPTR,#049H
004A E0                MOVX    A,@DPTR
004B 30E003            JNB     ACC.0,?C0397
                                           ; SOURCE LINE # 2637
004E 7F00              MOV     R7,#00H
0050 22                RET     
                                           ; SOURCE LINE # 2638
0051         ?C0397:
                                           ; SOURCE LINE # 2639
0051 900049            MOV     DPTR,#049H
0054 E0                MOVX    A,@DPTR
0055 54FB              ANL     A,#0FBH
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2640
0058 900040            MOV     DPTR,#040H
005B E0                MOVX    A,@DPTR
005C 547F              ANL     A,#07FH
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2641
                                           ; SOURCE LINE # 2642
005F         ?C0396:
                                           ; SOURCE LINE # 2646
005F 900027            MOV     DPTR,#027H
0062 E0                MOVX    A,@DPTR
0063 4410              ORL     A,#010H
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2647
0066 00                NOP     
0067 00                NOP     
0068 00                NOP     
                                           ; SOURCE LINE # 2648
0069 00                NOP     
006A 00                NOP     
006B 00                NOP     
                                           ; SOURCE LINE # 2650
006C E4                CLR     A
006D F500        E     MOV     bFWLoadState,A
                                           ; SOURCE LINE # 2653
006F 900000      E     MOV     DPTR,#PartialMemSet+01H
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 140 

0072 E0                MOVX    A,@DPTR
0073 900551            MOV     DPTR,#0551H
0076 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2654
0077 900000      E     MOV     DPTR,#PartialMemSet
007A E0                MOVX    A,@DPTR
007B 900552            MOV     DPTR,#0552H
007E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2657
007F 900000      E     MOV     DPTR,#bPartialSeg
0082 E0                MOVX    A,@DPTR
0083 FD                MOV     R5,A
0084 C4                SWAP    A
0085 54F0              ANL     A,#0F0H
0087 FE                MOV     R6,A
0088 E4                CLR     A
0089 2400              ADD     A,#00H
008B FF                MOV     R7,A
008C EE                MOV     A,R6
008D 3480              ADDC    A,#080H
008F FE                MOV     R6,A
0090 ED                MOV     A,R5
0091 25E0              ADD     A,ACC
0093 25E0              ADD     A,ACC
0095 2400        E     ADD     A,#LOW PartialMemSet+04H
0097 F582              MOV     DPL,A
0099 E4                CLR     A
009A 3400        E     ADDC    A,#HIGH PartialMemSet+04H
009C F583              MOV     DPH,A
009E E0                MOVX    A,@DPTR
009F FC                MOV     R4,A
00A0 A3                INC     DPTR
00A1 E0                MOVX    A,@DPTR
00A2 2F                ADD     A,R7
00A3 F500        R     MOV     I2CwAddr+01H,A
00A5 EC                MOV     A,R4
00A6 3E                ADDC    A,R6
00A7 F500        R     MOV     I2CwAddr,A
                                           ; SOURCE LINE # 2660
00A9 F583              MOV     DPH,A
00AB E500        R     MOV     A,I2CwAddr+01H
00AD 24FF              ADD     A,#0FFH
00AF F582              MOV     DPL,A
00B1 E583              MOV     A,DPH
00B3 34FF              ADDC    A,#0FFH
00B5 F583              MOV     DPH,A
00B7 E4                CLR     A
00B8 93                MOVC    A,@A+DPTR
00B9 FF                MOV     R7,A
00BA 900503            MOV     DPTR,#0503H
00BD E0                MOVX    A,@DPTR
00BE B50716            CJNE    A,AR7,?C0400
00C1 E500        R     MOV     A,I2CwAddr+01H
00C3 24FE              ADD     A,#0FEH
00C5 F582              MOV     DPL,A
00C7 E500        R     MOV     A,I2CwAddr
00C9 34FF              ADDC    A,#0FFH
00CB F583              MOV     DPH,A
00CD E4                CLR     A
00CE 93                MOVC    A,@A+DPTR
00CF FF                MOV     R7,A
00D0 900504            MOV     DPTR,#0504H
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 141 

00D3 E0                MOVX    A,@DPTR
00D4 6F                XRL     A,R7
00D5 6009              JZ      ?C0399
00D7         ?C0400:
                                           ; SOURCE LINE # 2662
                                           ; SOURCE LINE # 2672
00D7 E4                CLR     A
00D8 900000      E     MOV     DPTR,#bPartialSeg
00DB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2673
00DC 0500        E     INC     bErrCountSEGFW
                                           ; SOURCE LINE # 2676
00DE FF                MOV     R7,A
00DF 22                RET     
                                           ; SOURCE LINE # 2677
00E0         ?C0399:
                                           ; SOURCE LINE # 2678
00E0 E4                CLR     A
00E1 F500        E     MOV     bErrCountSEGFW,A
                                           ; SOURCE LINE # 2689
00E3 900000      E     MOV     DPTR,#cpfExternalInit
00E6 93                MOVC    A,@A+DPTR
00E7 FE                MOV     R6,A
00E8 7401              MOV     A,#01H
00EA 93                MOVC    A,@A+DPTR
00EB AA06              MOV     R2,AR6
00ED F9                MOV     R1,A
00EE 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 2690
00F1 8003              SJMP    ?C0401
00F3         ?C0388:
                                           ; SOURCE LINE # 2691
                                           ; SOURCE LINE # 2692
00F3 E4                CLR     A
00F4 F500        E     MOV     bFWLoadState,A
                                           ; SOURCE LINE # 2693
00F6         ?C0401:
                                           ; SOURCE LINE # 2695
00F6 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 2696
00F8         ?C0390:
00F8 22                RET     
             ; FUNCTION isMEMReplacedEnd (END)

             ; FUNCTION ErrHandleSEGFW (BEGIN)
                                           ; SOURCE LINE # 2698
                                           ; SOURCE LINE # 2699
                                           ; SOURCE LINE # 2700
0000 E500        E     MOV     A,bErrCountSEGFW
0002 D3                SETB    C
0003 9405              SUBB    A,#05H
0005 4018              JC      ?C0404
                                           ; SOURCE LINE # 2701
                                           ; SOURCE LINE # 2702
0007 E4                CLR     A
0008 F500        E     MOV     bErrCountSEGFW,A
                                           ; SOURCE LINE # 2706
000A 900026            MOV     DPTR,#026H
000D E0                MOVX    A,@DPTR
000E 4404              ORL     A,#04H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2707
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 142 

0011 200004      E     JB      xExFWExist,?C0403
                                           ; SOURCE LINE # 2708
                                           ; SOURCE LINE # 2709
0014 E0                MOVX    A,@DPTR
0015 4408              ORL     A,#08H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2710
0018         ?C0403:
                                           ; SOURCE LINE # 2712
0018 900026            MOV     DPTR,#026H
001B E0                MOVX    A,@DPTR
001C 4410              ORL     A,#010H
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2713
                                           ; SOURCE LINE # 2714
001F         ?C0404:
001F 22                RET     
             ; FUNCTION ErrHandleSEGFW (END)

             ; FUNCTION _EX_CallBackFunction (BEGIN)
                                           ; SOURCE LINE # 2718
0000 8F00        R     MOV     bFunSel,R7
                                           ; SOURCE LINE # 2719
                                           ; SOURCE LINE # 2720
0002 E4                CLR     A
0003 F500        R     MOV     bRet,A
                                           ; SOURCE LINE # 2722
0005 120000      R     LCALL   ExCallBackFun_ToROM
                                           ; SOURCE LINE # 2724
0008 E500        R     MOV     A,bFunSel
000A 120000      E     LCALL   ?C?CCASE
000D 0000        R     DW      ?C0406
000F 00                DB      00H
0010 0000        R     DW      ?C0407
0012 01                DB      01H
0013 0000        R     DW      ?C0408
0015 02                DB      02H
0016 0000        R     DW      ?C0409
0018 03                DB      03H
0019 0000        R     DW      ?C0410
001B 04                DB      04H
001C 0000        R     DW      ?C0411
001E 05                DB      05H
001F 0000        R     DW      ?C0412
0021 06                DB      06H
0022 0000        R     DW      ?C0413
0024 07                DB      07H
0025 0000              DW      00H
0027 0000        R     DW      ?C0405
                                           ; SOURCE LINE # 2725
                                           ; SOURCE LINE # 2726
0029         ?C0406:
                                           ; SOURCE LINE # 2727
0029 900000      E     MOV     DPTR,#pfExSetUpHookFunc
                                           ; SOURCE LINE # 2728
002C 801C              SJMP    ?C0450
                                           ; SOURCE LINE # 2729
002E         ?C0407:
                                           ; SOURCE LINE # 2730
002E 900000      E     MOV     DPTR,#pfDeepSetupHook
0031         ?C0445:
                                           ; SOURCE LINE # 2731
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 143 

0031 8017              SJMP    ?C0450
                                           ; SOURCE LINE # 2732
0033         ?C0408:
                                           ; SOURCE LINE # 2733
0033 900000      E     MOV     DPTR,#pfHookGetStringDesc
0036         ?C0446:
                                           ; SOURCE LINE # 2734
0036 8012              SJMP    ?C0450
                                           ; SOURCE LINE # 2735
0038         ?C0409:
                                           ; SOURCE LINE # 2736
0038 900000      E     MOV     DPTR,#pfUSBHIDConfigDesc
003B         ?C0447:
                                           ; SOURCE LINE # 2737
003B 800D              SJMP    ?C0450
                                           ; SOURCE LINE # 2738
003D         ?C0410:
                                           ; SOURCE LINE # 2739
003D 900000      E     MOV     DPTR,#pfAUEnableDMIC
0040         ?C0448:
                                           ; SOURCE LINE # 2740
0040 8008              SJMP    ?C0450
                                           ; SOURCE LINE # 2741
0042         ?C0411:
                                           ; SOURCE LINE # 2742
0042 900000      E     MOV     DPTR,#pfAUEnableDMIC2
0045         ?C0449:
                                           ; SOURCE LINE # 2743
0045 8003              SJMP    ?C0450
                                           ; SOURCE LINE # 2744
0047         ?C0412:
                                           ; SOURCE LINE # 2745
0047 900000      E     MOV     DPTR,#pfAUDisableDMIC
004A         ?C0450:
004A E0                MOVX    A,@DPTR
004B FE                MOV     R6,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E AA06              MOV     R2,AR6
0050 F9                MOV     R1,A
0051 120000      E     LCALL   ?C?ICALL
0054 8F00        R     MOV     bRet,R7
                                           ; SOURCE LINE # 2746
0056 800D              SJMP    ?C0405
                                           ; SOURCE LINE # 2747
0058         ?C0413:
                                           ; SOURCE LINE # 2748
0058 900000      E     MOV     DPTR,#pfHIDExtenUnitCtrl
005B E0                MOVX    A,@DPTR
005C FE                MOV     R6,A
005D A3                INC     DPTR
005E E0                MOVX    A,@DPTR
005F AA06              MOV     R2,AR6
0061 F9                MOV     R1,A
0062 120000      E     LCALL   ?C?ICALL
                                           ; SOURCE LINE # 2749
                                           ; SOURCE LINE # 2750
                                           ; SOURCE LINE # 2751
                                           ; SOURCE LINE # 2752
0065         ?C0405:
                                           ; SOURCE LINE # 2754
0065 120000      R     LCALL   ExCallBackFun_ToRAM
C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 144 

                                           ; SOURCE LINE # 2756
0068 AF00        R     MOV     R7,bRet
                                           ; SOURCE LINE # 2757
006A         ?C0415:
006A 22                RET     
             ; FUNCTION _EX_CallBackFunction (END)

             ; FUNCTION ExCallBackFun_ToROM (BEGIN)
                                           ; SOURCE LINE # 2759
                                           ; SOURCE LINE # 2760
                                           ; SOURCE LINE # 2761
0000 E500        E     MOV     A,bFWLoadState
0002 6010              JZ      ?C0417
                                           ; SOURCE LINE # 2762
                                           ; SOURCE LINE # 2763
0004 120000      R     LCALL   WaitPartialFWLoad
                                           ; SOURCE LINE # 2764
0007 900027            MOV     DPTR,#027H
000A E0                MOVX    A,@DPTR
000B 4410              ORL     A,#010H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2765
000E 00                NOP     
000F 00                NOP     
0010 00                NOP     
                                           ; SOURCE LINE # 2766
0011 00                NOP     
0012 00                NOP     
0013 00                NOP     
                                           ; SOURCE LINE # 2769
                                           ; SOURCE LINE # 2770
0014         ?C0417:
0014 22                RET     
             ; FUNCTION ExCallBackFun_ToROM (END)

             ; FUNCTION ExCallBackFun_ToRAM (BEGIN)
                                           ; SOURCE LINE # 2771
                                           ; SOURCE LINE # 2772
                                           ; SOURCE LINE # 2773
0000 E500        E     MOV     A,bFWLoadState
0002 600D              JZ      ?C0419
                                           ; SOURCE LINE # 2774
                                           ; SOURCE LINE # 2775
0004 900027            MOV     DPTR,#027H
0007 E0                MOVX    A,@DPTR
0008 54EF              ANL     A,#0EFH
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2776
000B 00                NOP     
000C 00                NOP     
000D 00                NOP     
                                           ; SOURCE LINE # 2777
000E 00                NOP     
000F 00                NOP     
0010 00                NOP     
                                           ; SOURCE LINE # 2778
                                           ; SOURCE LINE # 2779
0011         ?C0419:
0011 22                RET     
             ; FUNCTION ExCallBackFun_ToRAM (END)


C51 COMPILER V7.06   BASE                                                                  07/22/2020 17:08:20 PAGE 145 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   7155    ----
   CONSTANT SIZE    =     30    ----
   XDATA SIZE       =      7      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     12      26
   IDATA SIZE       =      4      10
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
