C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE USBIF
OBJECT MODULE PLACED IN .\output\USBIF.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE USBIF.c OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND CODE PRINT(.\lst\USBIF.lst
                    -) OBJECT(.\output\USBIF.obj)

stmt level    source

   1          /************************************************************************|
   2          |                  A L C O R   M I C R O,  C O R P.                      |
   3          |                                                                        |
   4          |         This source code is classified as confidential and             |
   5          |         contains trade secrets owned by Alcor Micro, Corp.             |
   6          |                                                                        |
   7          |                         (C)Copyright 2008                              |
   8          |                         Alcor Micro, Corp.                             |
   9          |                        All rights reserved.                            |
  10          |************************************************************************/
  11          
  12          #ifndef __usbif_c__
  13          #define __usbif_c__
  14          
  15          #include <string.h>
  16          #include "globaldef.h"
  17          #include "base.h"
  18          #include "InFirmDef.h"
  19          #include "regmap.h"
  20          #include "globalvar.h"
  21          #include "xsensor.h"
  22          #include "usbif.h"
  23          
  24          #include "SettingDef.h"
  25          #include "util.h"
  26          #include "setintf.h"
  27          #include "exunit.h"
  28          #include "CamTermCtrl.h"
  29          #include "USBIST.h"
  30          #include "InTable.h"
  31          
  32          #include "AudioDef.h"
  33          #include "AudioHandle.h"
  34          
  35          extern code USB_ST_STRING_CFW_VER USBStringCFWVer;
  36          extern code USB_ST_STRING_MFW_VER USBStringMFWVer;
  37          extern code DWORD   FrameSize[MAX_SUPPORT_FRAME_NUM];
  38          extern code RES_TABLE Res_Table[MAX_SUPPORT_FRAME_NUM];
  39          extern code INTERVAL_IDX_TAB Interval_Idx_Tab[14];
  40          //extern code DWORD  FPS_Table[30];
  41          /*
  42          code BYTE HSMJProb1_Tab[26]=   //640x480
  43          {
  44          0x01,0x00,
  45          0x02,                  //format index
  46          0x01,                  //frame index
  47          0x15,0x16,0x05,0x00,   //frame rate
  48          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  49          0x00,0x10,0x0e,0x00,   //frame data size
  50          0x00,0x0C,0x00,0x00    //MAC issue  frame payload size  <==== notes.
  51          };
  52          */
  53          
  54          //===================================================
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 2   

  55          /*
  56          code BYTE HSYUVProb1_Tab[26]=   //640x480
  57          {
  58          0x01,0x00,
  59          0x01,                  //format index
  60          0x01,                  //frame index
  61          0x15,0x16,0x05,0x00,   //frame rate
  62          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  63          0x00,0x60,0x09,0x00,   //frame data size
  64          0x00,0x0C,0x00,0x00    //MAC issue  frame payload size  <==== notes.
  65          };
  66          */
  67          /*
  68          code BYTE FSMJProb1_Tab[26]=    //640x480
  69          {
  70          0x01,0x00,
  71          0x02,                  //format index
  72          0x01,                  //frame index
  73          0x15,0x16,0x05,0x00,   //frame rate
  74          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  75          0x00,0x10,0x0E,0x00,   //frame data size
  76          0x20,0x03,0x00,0x00    //frame payload size
  77          };
  78          */
  79          /*
  80          code BYTE FSYUVProb1_Tab[26]=   //320x240
  81          {
  82          0x01,0x00,
  83          0x01,                  //format index
  84          0x01,                  //frame index
  85          0xA8,0xB0,0x28,0x00,   //frame rate
  86          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  87          0x00,0x58,0x02,0x00,   //frame data size
  88          0x20,0x03,0x00,0x00    //frame payload size
  89          };
  90          */
  91          
  92          /*
  93          code BYTE HSMJStill1_Tab[11]=   //640x480
  94          {
  95          0x02,                 //format index
  96          0x01,                 //frame index
  97          0x00,
  98          0x00,0x10,0x0e,0x00,   //frame data size
  99          0x00,0x0C,0x00,0x00    //frame payload size
 100          };
 101          */
 102          /*
 103          code BYTE HSYUVStill1_Tab[11]=   //640x480
 104          {
 105          0x01,                 //format index
 106          0x01,                 //frame index
 107          0x00,
 108          0x00,0x60,0x09,0x00,   //frame data size
 109          0x00,0x0C,0x00,0x00    //frame payload size
 110          };
 111          */
 112          
 113          /*
 114          code BYTE FSMJStill1_Tab[11]=     //640x480
 115          {
 116          0x02,                 //format index
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 3   

 117          0x01,                 //frame index
 118          0x00,
 119          0x00,0x10,0x0E,0x00,   //frame data size
 120          0x20,0x03,0x00,0x00    //frame payload size
 121          };
 122          */
 123          
 124          /*
 125          code BYTE FSYUVStill1_Tab[11]=   //320x240
 126          {
 127          0x01,                 //format index
 128          0x01,                 //frame index
 129          0x00,
 130          0x00,0x58,0x02,0x00,   //frame data size
 131          0x20,0x03,0x00,0x00    //frame payload size
 132          };
 133          */
 134          //===================================================
 135          /*
 136          code BYTE HSALT1SIZE[2]=
 137          {
 138          0x14,0x00          //(bit12,bit11)3 transaction per microframe, (bit10-0)max packet size
 139          };                 // total 3072
 140          code BYTE HSALT2SIZE[2]=
 141          {
 142          0x0c,0x00          //(bit12,bit11)2 transaction per microframe, (bit10-0)max packet size
 143          };                 // total 2048
 144          code BYTE HSALT3SIZE[2]=
 145          {
 146          0x04,0x00          //(bit12,bit11)1 transaction per microframe, (bit10-0)max packet size
 147          };                 // total 1024
 148          code BYTE HSALT4SIZE[2]=
 149          {
 150          0x02,0x00
 151          };
 152          //===================================================
 153          code BYTE FSALT1SIZE[2]=
 154          {
 155          0x03,0x20          //800
 156          };
 157          code BYTE FSALT2SIZE[2]=
 158          {
 159          0x02,0xbc         //700
 160          };
 161          code BYTE FSALT3SIZE[2]=
 162          {
 163          0x02,0x00         //512
 164          };
 165          code BYTE FSALT4SIZE[2]=  //192
 166          {
 167          0x00,0xc0
 168          };
 169          */
 170          //===================================================
 171          
 172          void USBCmd(void)
 173          {
 174   1              // Check if it's a setup cmd and its byte length
 175   1              if(EX_CallBackFunction(FUNSEL_SetUpHook)==TRUE){//(pfExSetUpHookFunc() == TRUE){
 176   2                      return;
 177   2              }
 178   1              if( ((Reg[REG_EP0_FIFO_LEN] & EP0_FIFO_BYTE_LEN_MASK) != EP0_SIZE_OF_REQUEST)  //is not equ 8 bytes
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 4   

 179   1                    || (!(Reg[REG_EP0_FIFO_CTRL] & EP0_SETUP_PACKET)) ){ //or is not setup packet
 180   2                      Reg[REG_EP0_FIFO_CTRL]&=~EP0_IN_FIFO_READY;//RX endpoint 0 FIFO disable(1),write 0 to enable
 181   2                      Reg[REG_USB_EP_CTRL]|=EP0_STALL;
 182   2                      return;
 183   2              }
 184   1              // retrieve Usb cmd to corresponding variables
 185   1              bRequestType = pbEP0Buf[0];
 186   1              bRequest = pbEP0Buf[1];
 187   1              /* Mush Tested
 188   1              LoByteOfWord(wValue) = bLwValue = pbEP0Buf[2];
 189   1              HiByteOfWord(wValue) = bHwValue = pbEP0Buf[3];
 190   1              LoByteOfWord(wIndex) = bLwIndex = pbEP0Buf[4];
 191   1              HiByteOfWord(wIndex) = bHwIndex = pbEP0Buf[5];
 192   1              LoByteOfWord(wLength) = bLwLength = pbEP0Buf[6];
 193   1              HiByteOfWord(wLength) = bHwLength = pbEP0Buf[7];
 194   1              */
 195   1          bLwValue = pbEP0Buf[2];
 196   1          bHwValue = pbEP0Buf[3];
 197   1          bLwIndex = pbEP0Buf[4];
 198   1          bHwIndex = pbEP0Buf[5];
 199   1          bLwLength = pbEP0Buf[6];
 200   1          bHwLength = pbEP0Buf[7];
 201   1      
 202   1              Reg[REG_EP0_FIFO_CTRL]&=~EP0_IN_FIFO_READY;
 203   1              
 204   1              // Deep Setup hook
 205   1              if(EX_CallBackFunction(FUNSEL_DeepSetUpHook)==TRUE){//(pfDeepSetupHook() == TRUE){
 206   2                      return;
 207   2              }       
 208   1              if( (bRequestType & RT_TYPE_MASK) == RT_TYPE_CLASS ){
 209   2                   USBClassCmd();
 210   2              }else if( (bRequestType & RT_TYPE_MASK) == RT_TYPE_STANDARD ){
 211   2                   USBStandardCmd();
 212   2              }else if( (bRequestType & RT_TYPE_MASK) == RT_TYPE_VENDOR ){
 213   2                   USBVendorCmd();
 214   2              }else{  // Unsupport command
 215   2                      Reg[REG_USB_EP_CTRL]|=EP0_STALL;
 216   2              }
 217   1              
 218   1      }
 219          #pragma ot(9,size)
 220          void USBStandardCmd(void)
 221          {
 222   1              BYTE data i;//,j;
 223   1              BOOLEAN idata bHookString;
 224   1              WORD data wSentCnt;
 225   1              WORD data wBytes2Send; // cliffylee; 080310
 226   1              wSentCnt    = 0;
 227   1              wBytes2Send = 0;
 228   1              bHookString = FALSE;
 229   1              //----------------------------------------------------------------
 230   1              // Standard USB bRequest
 231   1              //----------------------------------------------------------------
 232   1              switch( bRequest ) {
 233   2                      case REQ_GET_STATUS:  // 0x00
 234   2                              switch( bRequestType ) {
 235   3                                      case RT_DIR_DEV2HOST|RT_TYPE_STANDARD|RT_RECIPIENT_DEVICE:
 236   3                                              pbEP0Buf[0] = bDeviceStatus;
 237   3                                              // pbEP0Buf[1] = 0x00;
 238   3                                              break;
 239   3                                      case RT_DIR_DEV2HOST|RT_TYPE_STANDARD|RT_RECIPIENT_INTERFACE:
 240   3                                              if(bLwIndex > 2){ // 1) {       //for Audio Revise
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 5   

 241   4                                                      Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 242   4                                                      return;
 243   4                                              }
 244   3                                              pbEP0Buf[0] = 0x00;
 245   3                                              // pbEP0Buf[1] = 0x00;
 246   3                                              break;
 247   3                                      case RT_DIR_DEV2HOST|RT_TYPE_STANDARD|RT_RECIPIENT_ENDPOINT:
 248   3                                              //pbEP0Buf[0] = bEndpoint1Status;
 249   3                                      if(bLwIndex==0x81)//EP1
 250   3                                              pbEP0Buf[0] = bEndpoint1Status;
 251   3                                      else //EP5
 252   3                                              pbEP0Buf[0] = bEndpoint5Status;
 253   3                                      
 254   3      
 255   3                                      break;
 256   3                                      default:
 257   3                                              Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 258   3                                              return;
 259   3                              }
 260   2                              pbEP0Buf[1] = 0x00;
 261   2                              Reg[REG_EP0_FIFO_LEN]=2;
 262   2                              WaitTXEnd();
 263   2                              break;
 264   2                              
 265   2                      case REQ_CLEAR_FEATURE:  // 0x01
 266   2                              if(((bRequestType & RT_RECIPIENT_MASK) == RT_RECIPIENT_DEVICE) && (bLwValue == DEVICE_REMOTE_WAKEUP)) {
 267   3                                      bDeviceStatus &= ~REMOTE_WAKEUP;
 268   3                              } else if(((bRequestType & RT_RECIPIENT_MASK) == RT_RECIPIENT_ENDPOINT) && (bLwValue == ENDPOINT_HALT) 
             -&& (bLwIndex == ENDPOINT1_NB)) {
 269   3                                      bEndpoint1Status &= ~HALT;
 270   3                                      Reg[REG_USB_EP_CTRL]|=RESET_EP1_PKT_COUNT;
 271   3                                      Reg[REG_USB_EP_CTRL]&=~EP1_STALL;
 272   3                              } else if(((bRequestType & RT_RECIPIENT_MASK) == RT_RECIPIENT_ENDPOINT) && (bLwValue == ENDPOINT_HALT) 
             -&& (bLwIndex == 0x85)) {
 273   3                               //EP5
 274   3                               bEndpoint5Status &= ~HALT;
 275   3                                      Reg[REG_USB_EP_CTRL]|=RESET_EP5_PKT_COUNT;
 276   3                                      Reg[REG_USB_EP_CTRL]&=~EP5_STALL;
 277   3                              }else {
 278   3                                      Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 279   3                                      return;
 280   3                              }
 281   2                              Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
 282   2                              while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 283   2                              break;
 284   2      
 285   2                      case REQ_SET_FEATURE:  // 0x03
 286   2                              if((bRequestType & RT_RECIPIENT_MASK) == RT_RECIPIENT_DEVICE){
 287   3                                      if(bLwValue == DEVICE_REMOTE_WAKEUP){
 288   4                                              bDeviceStatus |= REMOTE_WAKEUP;
 289   4                                      }else if(bLwValue == TEST_MODE){
 290   4                                              // 2009,03,30 Lear add begin
 291   4                                              // Pass USB test mode
 292   4                                              // We should disable USB power off function
 293   4                                              // when enter into test mode
 294   4                                              if(Reg[REG_XCVR_ST] & (HIGH_SPEED_MODE)){
 295   5                                                      ClrRegBits(USB_CLK_CTL, ENABLE_USB_CLK_OFF); // for power saving
 296   5                                              }
 297   4                                              // 2009,03,30 Lear add end
 298   4                                          if(bHwIndex == 0x01){   // TEST_J
 299   5                                             //Disable USB power off
 300   5                                                 Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 6   

 301   5                                                 while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 302   5                                                 Reg[REG_XCVR_CTRL]=(OP_MODE1|TEST_J|HW_TEST_MODE);
 303   5                                              }else if(bHwIndex == 0x02){ // TEST_K
 304   5                                                 Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
 305   5                                                 while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 306   5                                                 Reg[REG_XCVR_CTRL]=(OP_MODE1|TEST_K|HW_TEST_MODE);
 307   5                                              }else if(bHwIndex == 0x03){ // TEST_SE0_NAK
 308   5                                                 Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
 309   5                                                 while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 310   5                                                 Reg[REG_XCVR_CTRL]=(TEST_SE0_NAK|HW_TEST_MODE);
 311   5                                              }else if(bHwIndex == 0x04){ // Test_Packet
 312   5                                                 Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
 313   5                                                 while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 314   5                                                 Reg[REG_XCVR_CTRL]=(TEST_PACKET|HW_TEST_MODE);
 315   5                                              }else{
 316   5                                                 Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 317   5                                                 return;
 318   5                                              }
 319   4                                              return;
 320   4                                      } else {
 321   4                                              Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 322   4                                              return;
 323   4                                      }
 324   3                              } else if(((bRequestType & RT_RECIPIENT_MASK) == RT_RECIPIENT_ENDPOINT)
 325   2                                          && (bLwValue == ENDPOINT_HALT) && (bLwIndex == ENDPOINT1_NB)) {
 326   3                                      bEndpoint1Status |= HALT;
 327   3                                      Reg[REG_USB_EP_CTRL]|=EP1_STALL;
 328   3                              } else if(((bRequestType & RT_RECIPIENT_MASK) == RT_RECIPIENT_ENDPOINT)
 329   2                                          && (bLwValue == ENDPOINT_HALT) && (bLwIndex == 0x85)) {
 330   3                                          //EP5
 331   3                                      bEndpoint5Status |= HALT;
 332   3                                      Reg[REG_USB_EP_CTRL]|=EP5_STALL;
 333   3                              }else {
 334   3                                      Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 335   3                                      return;
 336   3                              }
 337   2                              Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
 338   2                              while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 339   2                              break;
 340   2                      case REQ_SET_ADDRESS:  // 0x05
 341   2                              // USB device does not change address until after the status stage is completed successfully.
 342   2                              Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
 343   2                              while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 344   2                              Reg[REG_USB_FUNC_ADDR] = bLwValue;
 345   2                              // Reg[REG_RP_SUSP_CTRL]&=~USB_CONFIG;  // ConfigValue = 1 => Configured state
 346   2                              bConfigValue = 0;       // Default/Address state ???
 347   2                              bAltSetting = 0;
 348   2                              ConstructStreamRelatedInfo(TRUE);
 349   2      #if 0                   
                                       //UARTString("SetAddr");
                                      //P1=bLwValue;
                                      
                                      if( Reg[REG_XCVR_ST] & HIGH_SPEED_MODE ){//Is Hi Speed or Full Speed
                                              xHighSpdMode = TRUE;
                                              //patch the problem: QGain less
                                              // descide the QGain in initial, 2009/06/16
                                              Reg[REG_JQ_GAIN] = (QG_2QX);
                                      }else{
                                              xHighSpdMode = FALSE;
                                              //patch the problem: QGain less
                                              // descide the QGain in initial, 2009/06/16             
                                              Reg[REG_JQ_GAIN] = (QG_1X);
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 7   

                                      }
                          ConstructStreamTable();
                          ConstructDefStremSet();
                          LoadDefaultSetting();
              #endif                  
 368   2                      if(bFWLoadState==FWS_NORM) //When code moving, the clk can't be stoped
 369   2                              SetRegBits(USB_CLK_CTL, ENABLE_USB_CLK_OFF); // for power saving
 370   2                  break;
 371   2                      case REQ_GET_DESCRIPTOR:  // 0x06
 372   2                              if( (bRequestType & RT_RECIPIENT_MASK) == RT_RECIPIENT_INTERFACE ){
 373   3                                 i=(bDMICInput==MICSEL_NONE)? 0x02:0x04;  //HID interface number
 374   3                                if((xEnableHID)&&(bLwIndex==i))
 375   3                                      {   
 376   4      
 377   4                          ExCallBackFun_ToROM();
 378   4                          
 379   4                                              wBytes2Send=pfUSBHIDStandCtrl();
 380   4      
 381   4                          ExCallBackFun_ToRAM();
 382   4                          
 383   4                                              if( wBytes2Send!=0 )
 384   4                                              {
 385   5                                                      goto USBINPRO;
 386   5                                              }
 387   4                                      }
 388   3                                      Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 389   3                              }else if( (bRequestType & RT_RECIPIENT_MASK) == RT_RECIPIENT_DEVICE ){
 390   3                                      switch( bHwValue ){
 391   4                                              case DESC_DEVICE:  // 0x01
 392   4                              SetPtrTabEx(path_DEVDesc); // TODO:
 393   4                                                      wBytes2Send = GetTab(0x0);
 394   4                                                      break;
 395   4                                              case DESC_CONFIGURATION:  // 0x02
 396   4                                                              // 2008,NOV, 03 Lear Modified Begin
 397   4                                                              // Remove stream table constructor to set address procedre
 398   4                                                              // To fix S4 issue, some platform will not get configuration desc again
 399   4                                                  // ConstructStreamTable();
 400   4                                                  // Default Video, Still Format/Frame index will be 1
 401   4                                                  // ConstructDefStremSet();
 402   4                                                  // 2008,NOV, 03 Lear Modified end
 403   4                                              ConstructStreamRelatedInfo(FALSE);
 404   4                                                  if(xHighSpdMode){   //high speed mode
 405   5                                                      SetPtrTabEx(path_HSConfigDesc);
 406   5                              }else{              //full speed mode
 407   5                                                          SetPtrTabEx(path_FSConfigDesc);
 408   5                              }
 409   4                                                      wBytes2Send = GetConfigLength();
 410   4                                                      XmitEp0(wBytes2Send);
 411   4                                                      return;
 412   4                                                      break;
 413   4      
 414   4                                              case DESC_STRING:  // 0x03
 415   4                                                      switch( bLwValue ) {
 416   5                                                              case 0x00: /* String Index0 */
 417   5                                                              case 0x01: /* String Index1 */
 418   5                                                      case 0x02: /* String Index2 */
 419   5                                                      case 0x03: /* String Index3 */
 420   5                                                      case 0x04: /* String Index4 */                                                                                      
 421   5                                                      case 0x05: /* String Index5 */
 422   5                                                                 SetPtrTabEx(path_String0+bLwValue);
 423   5                                                                  break;
 424   5                                                              default:
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 8   

 425   5                                                                      // 2009,04,14 Lear add
 426   5                                                                      // GetStringDesc hook function
 427   5                                                                      if(EX_CallBackFunction(FUNSEL_GetString)==FALSE){//(pfHookGetStringDesc() == FALSE){
 428   6                                                                              Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 429   6                                                                              return;
 430   6                                                                      }else{
 431   6                                                                              bHookString = TRUE;
 432   6                                                                      }
 433   5                                                      }
 434   4                                                      if(bHookString == FALSE){
 435   5                                                       wBytes2Send = GetTab(0x0);
 436   5                                                      }else{
 437   5                                                               wBytes2Send = CBYTE[wTabAddr];
 438   5                                                      }
 439   4                                                      break;
 440   4                                              case DESC_DEVICE_QUALIFIER:  // 0x06
 441   4                                                  SetPtrTabEx(path_DevQualifier);
 442   4                                                  wBytes2Send = GetTab(0x0);
 443   4                                                  break;
 444   4                                              case DESC_OTHER_SPEED_CONFIG:  // 0x07
 445   4                                                  SetPtrTabEx(path_OtherSpeedDesc);
 446   4                                                  wSentCnt = wTabAddr;    // wSentCnt for temporary usage
 447   4                                                  i = GetTab(0x0);
 448   4                                                  SetPtrTabById(i);   // return table address to wTabAddr
 449   4                                                  HiByteOfWord(wBytes2Send) = GetTab(0x3);
 450   4                                                  LoByteOfWord(wBytes2Send) = GetTab(0x2);
 451   4                                                  wTabAddr = wSentCnt;
 452   4                                                  XmitEp0(wBytes2Send);
 453   4                                                  return;
 454   4                                                      break;
 455   4                                              default:
 456   4                                                      Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 457   4                                                      return;
 458   4                                      }
 459   3      USBINPRO:                               
 460   3                                      if( wBytes2Send > wLength ){
 461   4                                              wBytes2Send = wLength;
 462   4                                      }
 463   3                                      wSentCnt = 0;
 464   3                                      while( wBytes2Send ){
 465   4                                          if( wBytes2Send > EP0_BUF_SIZE ){
 466   5                                              for( i = 0 ; i < EP0_BUF_SIZE ; i++ ){
 467   6                                                              if(bHookString == FALSE){
 468   7                                                                 pbEP0Buf[i] = GetTab(wSentCnt+i);
 469   7                                                              }else{
 470   7                                                                  pbEP0Buf[i] = CBYTE[wTabAddr+wSentCnt+i];
 471   7                                                              }
 472   6                                                }
 473   5                                                Reg[REG_EP0_FIFO_LEN]=EP0_BUF_SIZE;
 474   5                                                wSentCnt += EP0_BUF_SIZE;
 475   5                                                wBytes2Send -= EP0_BUF_SIZE;
 476   5                                  }else{
 477   5                                                for( i = 0 ; i < wBytes2Send ; i++ ){
 478   6                                                           if(bHookString == FALSE){
 479   7                                                                  pbEP0Buf[i] = GetTab(wSentCnt + i);
 480   7                                                              }else{
 481   7                                                                  pbEP0Buf[i] = CBYTE[wTabAddr+wSentCnt+i];
 482   7                                                              }
 483   6                                                }
 484   5                                                Reg[REG_EP0_FIFO_LEN]=(BYTE)wBytes2Send;
 485   5      
 486   5                                                // check tx length and send short packet when necessary
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 9   

 487   5                                        // Lear 2008,12,10    
 488   5                                                if(wBytes2Send == EP0_BUF_SIZE){
 489   6                                              Reg[REG_EP0_FIFO_CTRL] = EP0_DATA_OUT_NO_DATA;
 490   6                                            while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 491   6                                                }     
 492   5                                                      
 493   5                                                 wBytes2Send=0;               
 494   5                                      }
 495   4                                              if(!WaitTXEnd()){
 496   5                                                      return;
 497   5                                            }
 498   4                                      }
 499   3                                      WaitTXEnd();
 500   3                              }
 501   2                              break;
 502   2      
 503   2                      case REQ_SET_DESCRIPTOR:  // 0x07
 504   2                              Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 505   2                              break;
 506   2                      case REQ_GET_CONFIGURATION:  // 0x08
 507   2                              pbEP0Buf[0] = bConfigValue;
 508   2                              Reg[REG_EP0_FIFO_LEN] = 1;
 509   2                              WaitTXEnd();
 510   2                              break;
 511   2                      case REQ_SET_CONFIGURATION:  // 0x09
 512   2                              Reg[REG_USB_EP_CTRL] &= ~(EP0_STALL | EP1_STALL);
 513   2                              if( bLwValue == 1 ) {
 514   3                                  // UARTString("SetConfig 1");
 515   3                                      bConfigValue = bLwValue;
 516   3                                      // Reg[REG_RP_SUSP_CTRL] |= USB_CONFIG;  // ConfigValue = 1 => Configured state
 517   3                                      // Reg[REG_EP0_FIFO_CTRL]|= EP0_STATUS_OUT_NO_DATA;
 518   3                                      // while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 519   3                              } else if( bLwValue == 0 ) {
 520   3                                  // UARTString("SetConfig 0");
 521   3                                      bConfigValue = bLwValue;
 522   3                                      // Reg[REG_RP_SUSP_CTRL] &= ~USB_CONFIG;// ConfigValue = 0      => Default/Address state
 523   3                                      // Reg[REG_EP0_FIFO_CTRL] |= EP0_STATUS_OUT_NO_DATA;
 524   3                                      // while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 525   3                              } else {
 526   3                                      Reg[REG_USB_EP_CTRL] |= EP0_STALL;  // Return stall for command error
 527   3                                      return;
 528   3                              }
 529   2                              Reg[REG_EP0_FIFO_CTRL] |= EP0_STATUS_OUT_NO_DATA;
 530   2                              while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 531   2                              break;
 532   2      
 533   2                      case REQ_GET_INTERFACE:  // 0x0A
 534   2                              if(bLwIndex==INTERFACE_NB1)
 535   2                                      pbEP0Buf[0] = bAltSetting;
 536   2                              else if(bLwIndex==INTERFACE_NB3)                //AUDIO_FUN
 537   2                                      pbEP0Buf[0] = bDMICAltSetting;
 538   2                              else 
 539   2                                      pbEP0Buf[0] = 0;
 540   2                      
 541   2                              
 542   2                              Reg[REG_EP0_FIFO_LEN] = 1;
 543   2                              WaitTXEnd();
 544   2                              break;
 545   2                      case REQ_SET_INTERFACE:  // 0x0B
 546   2                              if(bLwIndex==INTERFACE_NB1)// video streaming  interface
 547   2                              {       bAltSetting = bLwValue;
 548   3      
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 10  

 549   3                              // EDWIN Remove
 550   3                              // 2009,10,06 Eric Lee
 551   3                              /*if(bAltSetting >= 1){
 552   3                                      if(xCheckState04 == FALSE){
 553   3                                      Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 554   3                                      return;
 555   3                                      }                    
 556   3                              }*/
 557   3                                      Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
 558   3                                      while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 559   3                                      if( bAltSetting == 0 ){  // alternate setting 0               
 560   4                                              // Set Frame error bit here, it will prevent uncomplete still image issue
 561   4                                              // Lear, 2008,12,08
 562   4                                              //UARTString("Set Close");
 563   4                                              SetRegBits(REG_ISO_IN1_HEADER, FRAME_ERROR_BIT);
 564   4                                              SetNextEvent(Event_Close);
 565   4                                              CompletePrpSaveReq();   // save property value
 566   4                                      }else if( bAltSetting >= 1 ){  //  alternate setting 1, 2, 3, 4, 5,... else
 567   4      
 568   4                                              //UARTString("Set Preview");
 569   4                                              
 570   4                                              SetNextEvent(Event_Preview);
 571   4                                      USBAltBWSwitch();
 572   4                                      
 573   4                                              //__ Set HW frame rate control time
 574   4                                              //wSentCnt=(1000/VideoProbeCommitCtrls.CurFPS);//StrmCurSet.bFrameRate;
 575   4                                              wSentCnt=(1000/StrmCurSet.bFrameRate);
 576   4                                              WriteReg(REG_FRMTIME_H, HiByteOfWord(wSentCnt));
 577   4                                              WriteReg(REG_FRMTIME_L, LoByteOfWord(wSentCnt));
 578   4      
 579   4                          //Patch StillIssue. Eric Added 20100312
 580   4                          if((Reg[REG_ISO_IN1_HEADER]&STILL_IMG_BIT)){
 581   5                                                      xStillIssue=TRUE;
 582   5                                                      //Clr EP2 Transfer length
 583   5                                                      LoByteOfWord(wDumpTrigger)=Reg[REG_ISO_IN1_PL_LO]; //used temporally
 584   5                                                      HiByteOfWord(wDumpTrigger)=Reg[REG_ISO_IN1_PL_HI];
 585   5                                                      Reg[REG_ISO_IN1_PL_HI]=0x00;
 586   5                                                      Reg[REG_ISO_IN1_PL_LO]=0x00;
 587   5                                                      //OpenBuf
 588   5                                                      SetRegBits(REG_DOS, PUSH_VIDEO_BUF);
 589   5                                                      //Clr Ep2 In
 590   5                                                      SetRegBits(REG_EP_NAK_STATUS, EP2DAT0);
 591   5                                                      //Clr frame Start
 592   5                                                      SetRegBits(REG_VIDEOFLAG_MASK, SENSOR_FRAME_START);
 593   5                                                      xFrameStart = FALSE;                                                                    
 594   5                                              }
 595   4                                      }
 596   3                              }                                       
 597   2                              else if(bLwIndex==INTERFACE_NB3) //audio streaming interface
 598   2                              {//AUDIO_FUN
 599   3                                      bDMICAltSetting = bLwValue;
 600   3                                      Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
 601   3                                      while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 602   3                                      if(bDMICAltSetting==0)
 603   3                                      {       //ClrRegBits(REG_AUDIO_CTL, ABUFRDY);  //close audio buf
 604   4                                              //ClrRegBits(REG_END_P2_EN, ENABLE_EP3); //disable EP3
 605   4      
 606   4                                              DisableDMIC();
 607   4                                      }else //if(bDMICAltSetting==1)
 608   3                                      {
 609   4                          if(xHighSpdMode)
 610   4                                                 ClrRegBits(USB_CLK_CTL, ENABLE_USB_CLK_OFF); //disable clock off
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 11  

 611   4                                              
 612   4                      }
 613   3                      
 614   3                              }else if(bLwIndex==INTERFACE_NB0) 
 615   2                              {
 616   3                                      Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
 617   3                                      while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
 618   3                              }
 619   2                              else
 620   2                              {
 621   3                                      Reg[REG_USB_EP_CTRL]|=EP0_STALL;
 622   3                                      
 623   3                              }
 624   2                              break;
 625   2                      default:
 626   2                              Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 627   2                              break;
 628   2              }
 629   1      }
 630          #pragma ot(8,speed)
 631          
 632          void USBClassCmd(void)
 633          {
 634   1              //----------------------------------------------------------------
 635   1              // Class USB bRequest
 636   1              //----------------------------------------------------------------
 637   1              if( bLwIndex == INTERFACE_NB0 ){   //interface 0
 638   2                // VideoControl request
 639   2                      USBVideoControl();
 640   2              }else if( bLwIndex == INTERFACE_NB1 ){  //interface 1
 641   2                // VideoStreaming request
 642   2                      USBVideoStreaming();
 643   2              }
 644   1      //__ Eric add for Audio
 645   1              else if ( bLwIndex == INTERFACE_NB2 ){  //interface 2
 646   2                // AudioStreaming request
 647   2                      USBAudioControl();
 648   2              }
 649   1              else if ( bLwIndex == ENDPOINT3_NB ){  //EP 83
 650   2                // AudioStreaming request
 651   2                      USBAudioStreamingEP();
 652   2              }
 653   1              else{
 654   2                      Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 655   2              }
 656   1      }
 657          
 658          // TODO: Have to remove Vendor command to extension unit control
 659          void USBVendorCmd(void)
 660          {
 661   1                      BYTE data bRecBytesCnt = 0;
 662   1                      WORD data wBytes2Send = 0;
 663   1                      // WORD data wSentCnt; 
 664   1                      BYTE data bTmp;
 665   1                      BYTE data i;
 666   1                      // BYTE data * ptrdata;
 667   1              //----------------------------------------------------------------
 668   1              // Vendor USB bRequest
 669   1              //----------------------------------------------------------------
 670   1              switch( bRequest ) {
 671   2      #if 0       
                              case REQ_REG_READ:
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 12  

                                      wBytes2Send = wLength;
                                      wSentCnt = 0;
                                      while( wBytes2Send ){
                                              if( wBytes2Send > EP0_BUF_SIZE ){
                                                      for( i = 0 ; i < EP0_BUF_SIZE ; i++ ){
                                                              pbEP0Buf[i] = Reg[wValue + wSentCnt + i];
                                  }
                                                      Reg[REG_EP0_FIFO_LEN]=EP0_BUF_SIZE;
                                                      wSentCnt += EP0_BUF_SIZE;
                                                      wBytes2Send -= EP0_BUF_SIZE;
                                              }else{
                                                      for( i = 0 ; i < wBytes2Send ; i++ ){
                                                              pbEP0Buf[i] = Reg[wValue + wSentCnt + i];
                                  }                                           
                                                      Reg[REG_EP0_FIFO_LEN]=(BYTE)wBytes2Send;
                                                      wBytes2Send = 0;
                                              }
                                              while( Reg[REG_EP0_FIFO_CTRL] & EP0_OUT_FIFO_BUSY );
                                      }
                                      WaitTXEnd();
                                      break;
                              case REQ_REG_WRITE:
                                      wBytes2Send = wLength;
                                      wSentCnt = 0;
                                      if(bLwIndex) {  // byte address assign
                                              while( wBytes2Send ) {
                                                      while( !(Reg[REG_EP0_FIFO_CTRL] & EP0_IN_FIFO_READY) );
                                                      bRecBytesCnt = Reg[REG_EP0_FIFO_LEN] & EP0_FIFO_BYTE_LEN_MASK;
                                                      for( i = 0 ; i < bRecBytesCnt ; i += 2 ){
                                                              Reg[((wValue & 0xFF00) | pbEP0Buf[i])]=pbEP0Buf[i + 1];
                                  }                                           
                                                      wSentCnt += bRecBytesCnt;
                                                      wBytes2Send -= bRecBytesCnt;
                                                      Reg[REG_EP0_FIFO_CTRL]&=~EP0_IN_FIFO_READY;
                                              }
                                      } else {  // sequential mode
                                              while( wBytes2Send ) {
                                                      while( !(Reg[REG_EP0_FIFO_CTRL] & EP0_IN_FIFO_READY) );
                                                      bRecBytesCnt = Reg[REG_EP0_FIFO_LEN] & EP0_FIFO_BYTE_LEN_MASK;
                                                      for( i = 0 ; i < bRecBytesCnt ; i++ ){
                                                              Reg[(wValue + wSentCnt + i)]=pbEP0Buf[i];
                                  }                                           
                                                      wSentCnt += bRecBytesCnt;
                                                      wBytes2Send -= bRecBytesCnt;
                                                      Reg[REG_EP0_FIFO_CTRL]&=~EP0_IN_FIFO_READY;
                                              }
                                      }
                                      Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
                                      while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
                                      break;
              
                              case REQ_GET_EEPROM_STATE:
                                      pbEP0Buf[0] = (I2CEEPROMReadData(0x0000, 1, pbIBuf)?FALSE:TRUE);
                                      Reg[REG_EP0_FIFO_LEN]=1;
                                      WaitTXEnd();
                                      break;
              
                              case REQ_EEPROM_READ:
                                      I2CEEPROMReadData(wValue, bLwLength, pbEP0Buf);
                                      Reg[REG_EP0_FIFO_LEN]=bLwLength;
                                      WaitTXEnd();
                                      break;
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 13  

              
                              case REQ_EEPROM_WRITE:
                                      while( !(Reg[REG_EP0_FIFO_CTRL] & EP0_IN_FIFO_READY) );
                                      bRecBytesCnt = Reg[REG_EP0_FIFO_LEN] & EP0_FIFO_BYTE_LEN_MASK;
                                      Reg[REG_EP0_FIFO_CTRL]&=~EP0_IN_FIFO_READY;
                                      I2CEEPROMWriteData(wValue, bRecBytesCnt, pbEP0Buf);
                                      Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
                                      while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
                                      break;
              
                              case REQ_IIC_READ:
                                         pfSensorI2CReadData(wValue, bLwLength, (void*)pbEP0Buf);
                                      Reg[REG_EP0_FIFO_LEN]=bLwLength;
                                      WaitTXEnd();
                                      break;
              
                              case REQ_IIC_WRITE:
                                      while( !(Reg[REG_EP0_FIFO_CTRL] & EP0_IN_FIFO_READY) );
                                      bRecBytesCnt = Reg[REG_EP0_FIFO_LEN] & EP0_FIFO_BYTE_LEN_MASK;
                                      Reg[REG_EP0_FIFO_CTRL]&=~EP0_IN_FIFO_READY;
                                      pfSensorI2CWriteData(wValue, bRecBytesCnt, (void*)pbEP0Buf);
                                      Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
                                      while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
                                      break;
                              case REQ_CODE_READ:
                              case REQ_8051_READ://cliffy add for get bdata
                                      wBytes2Send = wLength;
                                      if ( wLength>EP0_BUF_SIZE ){
                                              wBytes2Send = EP0_BUF_SIZE;
                          }                           
                                      for( i = 0 ; i < wBytes2Send ; i++ ){
                                              if ( bRequest==REQ_8051_READ ){
                                                      pbEP0Buf[i] = DBYTE[wValue +i];
                                              }else{
                                                      pbEP0Buf[i] = CBYTE[wValue +i];
                              }                                       
                                      }
                                      Reg[REG_EP0_FIFO_LEN]=(BYTE)wBytes2Send;
                                      while( Reg[REG_EP0_FIFO_CTRL] & EP0_OUT_FIFO_BUSY );
                          break;
              
                              case REQ_8051_WRITE://cliffy add for set bdata
                                      wBytes2Send = wLength;
                                      wSentCnt = 0;
                                      ptrdata = 0;
                                      while( wBytes2Send ) {
                                              while( !(Reg[REG_EP0_FIFO_CTRL] & EP0_IN_FIFO_READY) );
                                              bRecBytesCnt = Reg[REG_EP0_FIFO_LEN] & EP0_FIFO_BYTE_LEN_MASK;
                                              for( i = 0 ; i < bRecBytesCnt ; i++ ){
                                                      ptrdata[(wValue + wSentCnt + i)]=pbEP0Buf[i];
                              }                                       
                                              wSentCnt += bRecBytesCnt;
                                              wBytes2Send -= bRecBytesCnt;
                                              Reg[REG_EP0_FIFO_CTRL]&=~EP0_IN_FIFO_READY;
                                      }
                                      Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
                                      while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
                          break;
              
                              case REQ_SET_LED:
                                      Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
                                      while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 14  

                                      break;
              #endif                  
 799   2              case REQ_GETDevID:
 800   2                  for(i=0;i<2;i++){  //right rotate 2 bit
 801   3                      bTmp=(BYTE)wValue;
 802   3                      wValue=wValue>>1;
 803   3                      if(bTmp&0x01){
 804   4                          wValue|=0x8000;
 805   4                      }
 806   3                  }
 807   2                  wValue=wValue+0x16CE;
 808   2                  wValue=~wValue;
 809   2                  pbEP0Buf[0]=LoByteOfWord(wValue);
 810   2                  pbEP0Buf[1]=HiByteOfWord(wValue);
 811   2                  Reg[REG_EP0_FIFO_LEN]=2;
 812   2                  WaitTXEnd();
 813   2                  break;
 814   2                  
 815   2              case REQ_BusStatus:
 816   2                  if(xHighSpdMode){
 817   3                      pbEP0Buf[0]=0x01;     //Bus high speed}
 818   3                  }else{
 819   3                      pbEP0Buf[0]=0x00;     //Bus full speed
 820   3                  }
 821   2                  Reg[REG_EP0_FIFO_LEN]=1;
 822   2                  WaitTXEnd();
 823   2                  break;
 824   2                      default:
 825   2                  Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 826   2                  break;
 827   2              }
 828   1      }
 829          void USBAltBWSwitch(void)
 830          {
 831   1          WORD data wSizeTemp;
 832   1              BYTE data bTransTemp;
 833   1              if( bAltSetting ){
 834   2                      if(xHighSpdMode){
 835   3                              switch( bAltSetting ){
 836   4                                      case IF1_ALTERNATE1:
 837   4                      case IF1_ALTERNATE2:
 838   4                      case IF1_ALTERNATE3:
 839   4                      case IF1_ALTERNATE4:                    
 840   4                          SetPtrTabEx(path_HSEP2ALT1+bAltSetting-1);
 841   4                                              break;
 842   4                              }
 843   3                              LoByteOfWord(wSizeTemp) = GetTab(0x4);
 844   3                              HiByteOfWord(wSizeTemp) = GetTab(0x5);
 845   3                              bTransTemp = ((BYTE)(wSizeTemp >> 11) & 0x03);  //count transaction number at per microframe
 846   3                              wSizeTemp &= 0x07FF;    //bit0 - bit 10 packet size
 847   3                      }else{
 848   3                              switch( bAltSetting ){
 849   4                                      case IF1_ALTERNATE1:
 850   4                      case IF1_ALTERNATE2:
 851   4                      case IF1_ALTERNATE3:
 852   4                      case IF1_ALTERNATE4:                    
 853   4                          SetPtrTabEx(path_FSEP2ALT1+bAltSetting-1);
 854   4                                              break;
 855   4                                      default:
 856   4                                              return;
 857   4                              }
 858   3                  LoByteOfWord(wSizeTemp) = GetTab(0x4);
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 15  

 859   3                              HiByteOfWord(wSizeTemp) = GetTab(0x5);
 860   3                              bTransTemp = EP2_1TRANS;
 861   3                              wSizeTemp &= 0x03FF;
 862   3                      }
 863   2                      Reg[REG_ISO_IN1_PL_LO] = (BYTE)wSizeTemp;
 864   2                      Reg[REG_ISO_IN1_PL_HI] = (BYTE)(wSizeTemp >> 8);
 865   2                      Reg[REG_ISO_IN1_DPNMF] = bTransTemp; // TODO: setting remove to state machine
 866   2                      Reg[REG_ISO_IN1_HEADER] = (PL_HD_SCR|PL_HD_PTS);
 867   2              }
 868   1      }    
 869          void USBVideoControl(void)
 870          {
 871   1              switch(bHwIndex){
 872   2                      case PU_ID:             // Processing Unit Control
 873   2                              if( bRequest == REQ_SET_CUR){  //Set VC Cmd
 874   3                                      USBVideoPUSetControl();
 875   3                              }else{
 876   3                                      USBVideoPUGetControl();     //Get VC Cmd
 877   3            }             
 878   2                              break;
 879   2                      case EXTEN_ID:  // Extension Unit Control
 880   2                              if( bRequest == REQ_SET_CUR){       //Set Cmd
 881   3                                      ExtensionUnitSetControl();
 882   3                              }else{
 883   3                                      ExtensionUnitGetControl();     //Get Cmd
 884   3                              }
 885   2                              break;          
 886   2                      case CT_ID:     // Camera Termal control
 887   2                              if(bRequest == REQ_SET_CUR){
 888   3                                      CameraTermSetCtrl();
 889   3                              }else{
 890   3                                      CameraTermGetCtrl();
 891   3                              }
 892   2      /*
 893   2                              if(bRequest == REQ_SET_CUR){
 894   2                              if(xSupportPrivacy ==TRUE){
 895   2                                  PrivacyCtrl();
 896   2                              }else{
 897   2                                  InvalidCtrlandStall();
 898   2                              }
 899   2                          }else{
 900   2                              InvalidCtrlandStall();
 901   2                          }
 902   2      
 903   2      */
 904   2                              break;
 905   2                      case OT_ID:     // Output terminal control
 906   2                              InvalidCtrlandStall();
 907   2                              break;                                          
 908   2                      case NP_ID:
 909   2                              if(bHwValue == CTRL_VC_REQUEST_ERR_CODE){
 910   3                                      //NP_ID is NOT PRESENTED ID and
 911   3                                      //bHwValue is control select point to CtlVcRequest Error code
 912   3                                      if(bRequest == REQ_GET_CUR){     //only support Get_CUR and Get_Info
 913   4                                              pbEP0Buf[0] = bRequestErrorCode;
 914   4                                      }else if(bRequest == REQ_GET_INFO){    //Get_Info only support Get
 915   4                                              pbEP0Buf[0] = INFO_SUP_GET_VAL_BIT;   //so, report to Host only support Get
 916   4                                      }else{
 917   4                                              InvalidRequestandStall();
 918   4                                              return;
 919   4                                      }
 920   3                                      Reg[REG_EP0_FIFO_LEN]=1;
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 16  

 921   3                                      WaitTXEnd();
 922   3                                      
 923   3                              }else{
 924   3                                      bRequestErrorCode = EC_INVALID_UNIT;
 925   3                                      Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 926   3                              }
 927   2                              break;                  
 928   2              }
 929   1      }
 930          
 931          /*
 932          void USBVideoControl(void)
 933          {                                //bHwIndex is unit_ID  or interface number
 934                  if(bHwIndex == PU_ID){    //process unit ID
 935                          if( bRequest == REQ_SET_CUR){  //Set VC Cmd
 936                              USBVideoPUSetControl();
 937                          }else{
 938                              USBVideoPUGetControl();     //Get VC Cmd
 939                  }                   
 940                  }else if(bHwIndex == EXTEN_ID){ //Exension Unit ID
 941                          if( bRequest == REQ_SET_CUR){       //Set Cmd
 942                              ExtensionUnitSetControl();
 943                          }else{
 944                              ExtensionUnitGetControl();     //Get Cmd
 945                  }                   
 946                  }else if((bHwIndex == CT_ID) || (bHwIndex == OT_ID)){   //INPUT ID or OUTPUT ID
 947                          InvalidCtrlandStall();
 948                  }else if((bHwIndex == NP_ID) && (bHwValue == CTRL_VC_REQUEST_ERR_CODE)){  
 949                      //NP_ID is NOT PRESENTED ID and
 950                      //bHwValue is control select point to CtlVcRequest Error code
 951                          if(bRequest == REQ_GET_CUR){     //only support Get_CUR and Get_Info
 952                                  pbEP0Buf[0] = bRequestErrorCode;
 953                          }else if(bRequest == REQ_GET_INFO){    //Get_Info only support Get
 954                                  pbEP0Buf[0] = INFO_SUP_GET_VAL_BIT;   //so, report to Host only support Get
 955                          }else{
 956                                  InvalidRequestandStall();
 957                                  return;
 958                          }
 959                          Reg[REG_EP0_FIFO_LEN]=1;
 960                          WaitTXEnd();
 961                  }else{
 962                          bRequestErrorCode = EC_INVALID_UNIT;
 963                          Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
 964                  }
 965          }
 966          */
 967          static BOOLEAN PUSetControl(BYTE CtrlPath, void * pwData, BOOLEAN bSigned)
 968          {
 969   1          VCTRL_TYPE data CurType;   //union declare max data length is 2 bytes
 970   1              WORD data wMinTmp, wMaxTmp;
 971   1              INT16 data wsMin, wsMax;
 972   1              
 973   1          SetPtrTabEx(CtrlPath);
 974   1      
 975   1      #ifndef DISABLE_WHITEBALANCE_COMP  
                  if(CtrlPath == path_WhiteBC){
                      LoByteOfWord(CurType.wCurrent) = pbIBuf[0];
                      HiByteOfWord(CurType.wCurrent) = pbIBuf[1];
                      SetPtrTabEx(path_WhiteBC);
                      if(bLwLength == 2) {
                                      wMinTmp = GetTabW(0x1);
                                  wMaxTmp = GetTabW(0x5);
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 17  

                                      if(((CurType.wCurrent < wMinTmp) || (CurType.wCurrent > wMaxTmp)) && (CurType.wCurrent != 5000)) {
                                              OutofRangeCtrlandStall();
                                              return FALSE;
                                      }
                                      if(bWBCompAuto) {
                                              bRequestErrorCode = EC_WRONG_STATE;
                                              Reg[REG_USB_EP_CTRL] |= EP0_STALL;  // Return stall for command error
                                              return FALSE;
                                      }
                                      wWBCompBlue = CurType.wCurrent;
                                      if((wWBCompBlue == WBCompCtrl.wMinB) && !xWBCompIncrease){
                                              wWBCompRed = WBCompCtrl.wMinR;  //  fake default wWBCompRed value
                          }
                                      if(xWBCompIncrease && wWBCompRed == WBCompCtrl.wMaxR){
                                              xWBCompIncrease = FALSE;
                          }                           
                      }else{
                          wMinTmp = GetTabW(0x1);
                                  wMaxTmp = GetTabW(0x5);                     
                                      if((CurType.wCurrent < wMinTmp) || (CurType.wCurrent > wMaxTmp)) {
                                              OutofRangeCtrlandStall();
                                              return FALSE;
                                      }
                                      LoByteOfWord(CurType.wCurrent) = pbIBuf[2];
                                      HiByteOfWord(CurType.wCurrent) = pbIBuf[3];
                          wMinTmp = GetTabW(0x3);
                                  wMaxTmp = GetTabW(0x7);                     
                                      if((CurType.wCurrent < wMinTmp) || (CurType.wCurrent > wMaxTmp)) {
                                              OutofRangeCtrlandStall();
                                              return FALSE;
                                      }
                                      if(bWBCompAuto) {
                                              bRequestErrorCode = EC_WRONG_STATE;
                                              Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
                                              return FALSE;
                                      }
                                      LoByteOfWord(wWBCompBlue) = pbIBuf[0];
                                      HiByteOfWord(wWBCompBlue) = pbIBuf[1];
                                      wWBCompRed = CurType.wCurrent;
                      }                
                  }
                  else
              #endif // DISABLE_WHITEBALANCE_COMP  
1026   1          {
1027   2              if(bSigned == TRUE){
1028   3                  LoByteOfWord(CurType.n16Current) = pbIBuf[0];
1029   3                  HiByteOfWord(CurType.n16Current) = pbIBuf[1];
1030   3                  wsMin = GetTabW(0x1);
1031   3                  wsMax = GetTabW(0x3);
1032   3                  if((CurType.n16Current < wsMin) || (CurType.n16Current > wsMax)) {
1033   4                      OutofRangeCtrlandStall();
1034   4                      return FALSE;
1035   4                  }
1036   3                  *((XINT16 *)pwData) = CurType.n16Current;
1037   3              }else{
1038   3                  LoByteOfWord(CurType.wCurrent) = pbIBuf[0];
1039   3                  HiByteOfWord(CurType.wCurrent) = pbIBuf[1];
1040   3                  wMinTmp = GetTabW(0x1);
1041   3                  wMaxTmp = GetTabW(0x3);
1042   3                  if((CurType.wCurrent < wMinTmp) || (CurType.wCurrent > wMaxTmp)){
1043   4                      OutofRangeCtrlandStall();
1044   4                      return FALSE;
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 18  

1045   4                  }
1046   3                  *((WORD*)pwData) = CurType.wCurrent;
1047   3              } 
1048   2          }      
1049   1          // Queue Property Value save request
1050   1          QueuePrpSaveReq();  
1051   1          return TRUE;
1052   1      }    
1053          
1054          void USBVideoPUSetControl(void)
1055          {
1056   1              BYTE data bRecBytesCnt = 0;//,i; 
1057   1      
1058   1              // VCTRL_TYPE data CurType;   //union declare max data length is 2 bytes
1059   1              // WORD data wMinTmp, wMaxTmp;
1060   1              // INT16 data wsMin, wsMax;
1061   1      
1062   1              while( !(Reg[REG_EP0_FIFO_CTRL] & EP0_IN_FIFO_READY) );
1063   1              
1064   1              bRecBytesCnt = Reg[REG_EP0_FIFO_LEN] & EP0_FIFO_BYTE_LEN_MASK;
1065   1              
1066   1              //for( i = 0 ; i < bRecBytesCnt ; i++ ){
1067   1              //      pbIBuf[i] = pbEP0Buf[i];
1068   1          //}                 
1069   1              memcpy(pbIBuf,pbEP0Buf,bRecBytesCnt);   
1070   1              
1071   1              Reg[REG_EP0_FIFO_CTRL]&=~EP0_IN_FIFO_READY;
1072   1              if(bHwValue == CTRL_PU_BACKLIGHT_COMPS) {   // Backlight comp
1073   2                      if(PUSetControl(path_Backlight, &wBacklight, FALSE) == FALSE){
1074   3                          return;
1075   3                  }    
1076   2                      xSetPropertyBackLight = TRUE;
1077   2              } else if(bHwValue == CTRL_PU_BRIGHTNESS) {
1078   2                      if(PUSetControl(path_Bright, &n16Brightness, TRUE) == FALSE){
1079   3                          return;
1080   3                  }    
1081   2                      xSetPropertyBrightness = TRUE;
1082   2              } else if(bHwValue == CTRL_PU_CONTRAST) {
1083   2                      if(PUSetControl(path_Contrast, &wContrast, FALSE) == FALSE){
1084   3                          return;
1085   3                  }    
1086   2                      xSetPropertyContrast = TRUE;
1087   2              } else if(bHwValue == CTRL_PU_POWER_LINE_FREQ) {
1088   2                      if(pbIBuf[0] > 2) {
1089   3                              OutofRangeCtrlandStall();
1090   3                              return;
1091   3                      }
1092   2                      bPwrLine = pbIBuf[0];
1093   2                      xSetPropertyPwrLine = TRUE;
1094   2                      // Queue Property Value save request
1095   2                      QueuePrpSaveReq();  
1096   2              } else if(bHwValue == CTRL_PU_HUE) {
1097   2                      if(PUSetControl(path_Hue, &n16Hue, TRUE) == FALSE){
1098   3                          return;
1099   3                  }    
1100   2                      xSetPropertyHue = TRUE;
1101   2              } else if(bHwValue == CTRL_PU_SATURATION) {
1102   2                      if(PUSetControl(path_Saturation, &wSaturation, FALSE) == FALSE){
1103   3                          return;
1104   3                  }    
1105   2                      xSetPropertySaturation = TRUE;
1106   2              } else if(bHwValue == CTRL_PU_SHARPNESS) {
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 19  

1107   2                      if(PUSetControl(path_Sharpness, &wSharpness, FALSE) == FALSE){
1108   3                          return;
1109   3                  }    
1110   2                      xSetPropertySharpness = TRUE;
1111   2              } else if(bHwValue == CTRL_PU_GAMMA) {
1112   2                      if(PUSetControl(path_Gamma, &wGamma, FALSE) == FALSE){
1113   3                          return;
1114   3                  }    
1115   2                      xSetPropertyGamma = TRUE;
1116   2              } else if(bHwValue == CTRL_PU_WB_TEMP) {
1117   2                      if(bWBTempAuto) {
1118   3                              bRequestErrorCode = EC_WRONG_STATE;
1119   3                              Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
1120   3                              return;
1121   3                      }
1122   2                      if(PUSetControl(path_WhiteBT, &wWBTemp, FALSE) == FALSE){
1123   3                              return;
1124   3                   }          
1125   2                      xSetPropertyWBColorTemp = TRUE;
1126   2              } else if(bHwValue == CTRL_PU_WB_TEMP_AUTO) {
1127   2                      if(pbIBuf[0] > 1) {
1128   3                              OutofRangeCtrlandStall();
1129   3                              return;
1130   3                      }
1131   2                      if(bWBTempAuto != pbIBuf[0]){
1132   3                              xWBTempInfoChange = TRUE;
1133   3                      }
1134   2                      bWBTempAuto = pbIBuf[0];
1135   2                      xSetPropertyWBCTAuto = TRUE;
1136   2                      // Queue Property Value save request
1137   2                      QueuePrpSaveReq();  
1138   2              }else if(bHwValue == CTRL_PU_GAIN){
1139   2                      // 2009,05,25 Gain Control
1140   2                      // Gain Control SET_CUR
1141   2                      if(PUSetControl(path_Gain, &wGain, FALSE) == FALSE){
1142   3                          return;
1143   3                  }    
1144   2                      xSetPropertyGain = TRUE;
1145   2                      // Queue Property Value save request
1146   2              QueuePrpSaveReq();  
1147   2              }
1148   1      #ifndef DISABLE_WHITEBALANCE_COMP       
                       else if(bHwValue == CTRL_PU_WB_COMPONENT) {
                      /***  USB CV bug!!!  merely to be UVC Test compliance  ***/
                              if(bLwLength == 2) {  //  USB CV bug!!!  merely to be UVC Test compliance
                                  if(PUSetControl(path_WhiteBC, NULL, FALSE) == FALSE){
                                      return;
                                  }    
                              } else {
                          /***  USB CV bug!!!  merely to be UVC Test compliance  ***/
                          if(PUSetControl(path_WhiteBC, NULL, FALSE) == FALSE){
                                      return;
                                  }    
                                      xSetPropertyWBComponent = TRUE;
                              }
                              // Queue Property Value save request
                      QueuePrpSaveReq();  
                      } else if(bHwValue == CTRL_PU_WB_COMPONENT_AUTO) {
                              if(pbIBuf[0] > 1) {
                                      OutofRangeCtrlandStall();
                                      return;
                              }
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 20  

                              if(bWBCompAuto != pbIBuf[0]){
                                      xWBCompInfoChange = TRUE;
                      }                       
                              bWBCompAuto = pbIBuf[0];
                              xSetPropertyWBComAuto = TRUE;
                              // Queue Property Value save request
                      QueuePrpSaveReq();  
                      }
              #endif  // DISABLE_WHITEBALANCE_COMP    
1178   1              else{
1179   2                      InvalidCtrlandStall();
1180   2                      return;
1181   2              }
1182   1      
1183   1              bRequestErrorCode = EC_NO_ERROR;
1184   1              Reg[REG_EP0_FIFO_CTRL]=EP0_STATUS_OUT_NO_DATA;
1185   1              while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
1186   1              if(xWBTempInfoChange) {
1187   2                      xWBTempInfoChange = FALSE;
1188   2                      /*if(bWBTempAuto && xWBTValInterrupt)
1189   2                      {
1190   2                              SetPtrTabEx(path_WhiteBT);                      
1191   2                              if(wWBTemp!=GetTabW(0x7))       //auto mode, the value set default
1192   2                              //if(xWBTValChaInterrupt==TRUE)
1193   2                              {
1194   2                              //wWBTemp=GetTabW(0x7);
1195   2                               while ((ReadReg(REG_EP1_FIFO_CTRL)&EP1_FIFO_BUSY)&&(Reg[REG_EP1_FIFO_LEN] !=0));
1196   2                              pbEP1Buf[0] = SC_VIDEO_CONTROL;
1197   2                              pbEP1Buf[1] = PU_ID;
1198   2                              pbEP1Buf[2] = CONTROL_CHANGE;
1199   2                              pbEP1Buf[3] = CTRL_PU_WB_TEMP;
1200   2                              pbEP1Buf[4] = CONTROL_VAL_CHANGE;
1201   2                              pbEP1Buf[5] = LoByteOfWord(wWBTemp);
1202   2                              pbEP1Buf[6] = HiByteOfWord(wWBTemp);
1203   2                              Reg[REG_EP1_FIFO_LEN]=7;
1204   2                              }
1205   2                      }       */
1206   2                              
1207   2                      //the order don't revise for UVC Test
1208   2                       while ((ReadReg(REG_EP1_FIFO_CTRL)&EP1_FIFO_BUSY)&&(Reg[REG_EP1_FIFO_LEN] !=0));
1209   2                      pbEP1Buf[0] = SC_VIDEO_CONTROL;
1210   2                      pbEP1Buf[1] = PU_ID;
1211   2                      pbEP1Buf[2] = CONTROL_CHANGE;
1212   2                      pbEP1Buf[3] = CTRL_PU_WB_TEMP;
1213   2                      pbEP1Buf[4] = CONTROL_INFO_CHANGE;
1214   2                      if(bWBTempAuto){
1215   3                              pbEP1Buf[5] = WBTempCtrl.bmInfo | INFO_DISABLE_BIT ;
1216   3                      }else{
1217   3                              pbEP1Buf[5] = WBTempCtrl.bmInfo & (~(INFO_DISABLE_BIT));
1218   3                      }                       
1219   2                      Reg[REG_EP1_FIFO_LEN]=6;                
1220   2      
1221   2                      if(bWBTempAuto)
1222   2                      {     //for pass uvc test
1223   3                              while ((ReadReg(REG_EP1_FIFO_CTRL)&EP1_FIFO_BUSY)&&(Reg[REG_EP1_FIFO_LEN] !=0));
1224   3                              Reg[REG_EP1_FIFO_LEN]=6;
1225   3                      }
1226   2              }       
1227   1              
1228   1      #ifndef DISABLE_WHITEBALANCE_COMP
                      if(xWBCompInfoChange) {
                              xWBCompInfoChange = FALSE;
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 21  

                              if(bWBCompAuto) {
                                      while( Reg[REG_EP1_FIFO_CTRL] & EP1_FIFO_BUSY );
                                      pbEP1Buf[0] = SC_VIDEO_CONTROL;
                                      pbEP1Buf[1] = PU_ID;
                                      pbEP1Buf[2] = CONTROL_CHANGE;
                                      pbEP1Buf[3] = CTRL_PU_WB_COMPONENT;
                                      pbEP1Buf[4] = CONTROL_VAL_CHANGE;
                                      pbEP1Buf[5] = LoByteOfWord(wWBCompBlue);
                                      pbEP1Buf[6] = HiByteOfWord(wWBCompBlue);
                                      pbEP1Buf[7] = LoByteOfWord(wWBCompRed);
                                      pbEP1Buf[8] = HiByteOfWord(wWBCompRed);
                                      Reg[REG_EP1_FIFO_LEN]=9;
                              }
                              while( Reg[REG_EP1_FIFO_CTRL] & EP1_FIFO_BUSY );
                              pbEP1Buf[0] = SC_VIDEO_CONTROL;
                              pbEP1Buf[1] = PU_ID;
                              pbEP1Buf[2] = CONTROL_CHANGE;
                              pbEP1Buf[3] = CTRL_PU_WB_COMPONENT;
                              pbEP1Buf[4] = CONTROL_INFO_CHANGE;
                              if(bWBCompAuto){
                                      pbEP1Buf[5] = WBCompCtrl.bmInfo | INFO_DISABLE_BIT;
                              }else{
                                      pbEP1Buf[5] = WBCompCtrl.bmInfo & (~INFO_DISABLE_BIT);
                      }                       
                              Reg[REG_EP1_FIFO_LEN]=6;
                      }
              #endif // DISABLE_WHITEBALANCE_COMP 
1258   1      }
1259          
1260          #pragma ot(9,size)
1261          
1262          static void  PUGetControl(BYTE CtrlPath, void * pwData, BOOLEAN bSigned)
1263          {
1264   1      
1265   1          VCTRL_SET   xdata * data pCtrlSet;
1266   1          
1267   1          pCtrlSet = (VCTRL_SET *)&pbVctrl_set;
1268   1          SetPtrTabEx(CtrlPath);
1269   1      
1270   1          if(bSigned == TRUE){
1271   2              pCtrlSet->RangeType.VCtrlParaSigned.bmInfo = GetTab(0x0);
1272   2              pCtrlSet->RangeType.VCtrlParaSigned.n16Min = GetTabW(0x1);
1273   2              pCtrlSet->RangeType.VCtrlParaSigned.n16Max = GetTabW(0x3);
1274   2              pCtrlSet->RangeType.VCtrlParaSigned.n16Res = GetTabW(0x5);
1275   2              pCtrlSet->RangeType.VCtrlParaSigned.n16Def = GetTabW(0x7);
1276   2              pCtrlSet->CurType.n16Current = *((XINT16 *)pwData);
1277   2          }else{
1278   2              pCtrlSet->RangeType.VCtrlParaUnsigned.bmInfo = GetTab(0x0);
1279   2              pCtrlSet->RangeType.VCtrlParaUnsigned.wMin = GetTabW(0x1);
1280   2              pCtrlSet->RangeType.VCtrlParaUnsigned.wMax = GetTabW(0x3);
1281   2              pCtrlSet->RangeType.VCtrlParaUnsigned.wRes = GetTabW(0x5);
1282   2              pCtrlSet->RangeType.VCtrlParaUnsigned.wDef = GetTabW(0x7);
1283   2              if(CtrlPath != path_PwrLine){
1284   3                  pCtrlSet->CurType.wCurrent = *((WORD*)pwData);
1285   3              }else{
1286   3                  pCtrlSet->CurType.bCurrent = bPwrLine;
1287   3              }            
1288   2          }
1289   1      }    
1290          
1291          void USBVideoPUGetControl(void)
1292          {
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 22  

1293   1          VCTRL_SET   xdata * data pCtrlSet;
1294   1          VCTRL_PARA_RANGE_WBC    xdata * data pWBC;
1295   1          WORD    data  wbmControls;
1296   1          
1297   1              BYTE data bAutoCtrl = FALSE;
1298   1              BYTE data bSupport=0, bTmp;
1299   1              // Get bmControls from ProcessUnit descriptor
1300   1              if(xHighSpdMode){
1301   2                  SetPtrTabEx(path_HSProcessUnitDesc);
1302   2          }else{
1303   2              SetPtrTabEx(path_FSProcessUnitDesc);
1304   2          }       
1305   1          LoByteOfWord(wbmControls) = GetTab(0x8);
1306   1          HiByteOfWord(wbmControls) = GetTab(0x9);
1307   1          pCtrlSet = (VCTRL_SET *)pbVctrl_set;
1308   1          pWBC = (VCTRL_PARA_RANGE_WBC*)pbVctrl_WBC;
1309   1              //mush modify pEXFW=0;
1310   1              if(bHwValue == CTRL_PU_BACKLIGHT_COMPS){//0x01
1311   2                  if(!(wbmControls & BACKLIGHT_COMP_ENABLE)){
1312   3                      InvalidCtrlandStall();
1313   3                  return;
1314   3              }
1315   2              PUGetControl(path_Backlight, &wBacklight, FALSE);
1316   2              }else if(bHwValue == CTRL_PU_BRIGHTNESS){//0x02
1317   2                  if(!(wbmControls & BRIGHTNESS_ENABLE)){
1318   3                      InvalidCtrlandStall();
1319   3                  return;
1320   3              }            
1321   2              PUGetControl(path_Bright, &n16Brightness, TRUE);
1322   2              }else if(bHwValue == CTRL_PU_CONTRAST){//0x03
1323   2                  if(!(wbmControls & CONTRAST_ENABLE)){
1324   3                      InvalidCtrlandStall();
1325   3                  return;
1326   3              }            
1327   2              PUGetControl(path_Contrast, &wContrast, FALSE);
1328   2              }else if(bHwValue == CTRL_PU_POWER_LINE_FREQ){
1329   2                  if(!(wbmControls & POWERLINE_FREQ_ENABLE)){
1330   3                      InvalidCtrlandStall();
1331   3                  return;
1332   3              }            
1333   2                  PUGetControl(path_PwrLine, NULL, FALSE);
1334   2              }else if(bHwValue == CTRL_PU_HUE){//0x06
1335   2                  if(!(wbmControls & HUE_ENABLE)){
1336   3                      InvalidCtrlandStall();
1337   3                  return;
1338   3              }            
1339   2                      PUGetControl(path_Hue, &n16Hue, TRUE);
1340   2              }else if(bHwValue == CTRL_PU_SATURATION){//0x07
1341   2                  if(!(wbmControls & SATURATION_ENABLE)){
1342   3                      InvalidCtrlandStall();
1343   3                  return;
1344   3              }            
1345   2                      PUGetControl(path_Saturation, &wSaturation, FALSE);
1346   2              }else if(bHwValue == CTRL_PU_SHARPNESS){//0x08
1347   2                  if(!(wbmControls & SHARPNESS_ENABLE)){
1348   3                      InvalidCtrlandStall();
1349   3                  return;
1350   3              }            
1351   2                      PUGetControl(path_Sharpness, &wSharpness, FALSE);
1352   2              }else if(bHwValue == CTRL_PU_GAMMA){//0x09
1353   2                  if(!(wbmControls & GAMMA_ENABLE)){
1354   3                      InvalidCtrlandStall();
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 23  

1355   3                  return;
1356   3              }            
1357   2                      PUGetControl(path_Gamma, &wGamma, FALSE);
1358   2              }else if(bHwValue == CTRL_PU_WB_TEMP){             //0x0A
1359   2                  if(!(wbmControls & WHITE_BALANCE_TEMP_ENABLE)){
1360   3                      InvalidCtrlandStall();
1361   3                  return;
1362   3              }            
1363   2                 PUGetControl(path_WhiteBT, &wWBTemp, FALSE);
1364   2                 if(bRequest==REQ_GET_CUR)
1365   2                      Reg[REG_EP1_FIFO_LEN]=0; 
1366   2              }else if(bHwValue == CTRL_PU_WB_TEMP_AUTO){       //0x0B
1367   2              if(!(wbmControls & WHITE_BALANCE_TEMP_AUTO_ENABLE)){
1368   3                      InvalidCtrlandStall();
1369   3                      return;
1370   3              }
1371   2                  SetPtrTabEx(path_WTBTAuto);
1372   2              bAutoCtrl = TRUE;
1373   2              pCtrlSet->RangeType.VCtrlParaAuto.bmInfo = GetTab(0x0);
1374   2              pCtrlSet->RangeType.VCtrlParaAuto.bDef = GetTab(0x1);
1375   2              pCtrlSet->CurType.bCurrent = bWBTempAuto;
1376   2              }else if(bHwValue == CTRL_PU_GAIN){
1377   2                      if(!(wbmControls & GAIN_ENABLE)){
1378   3                      InvalidCtrlandStall();
1379   3                  return;
1380   3              }            
1381   2                      PUGetControl(path_Gain, &wGain, FALSE);
1382   2              }       
1383   1      #ifndef DISABLE_WHITEBALANCE_COMP
                      else if(bHwValue == CTRL_PU_WB_COMPONENT){       //0x0C
                          if(!(wbmControls & WHITE_BALANCE_COMP_ENABLE)){
                              InvalidCtrlandStall();
                              return;
                      }
                          SetPtrTabEx(path_WhiteBC);
                      pWBC->bmInfo = GetTab(0x0);
                      pWBC->wMinB = GetTabW(0x1);
                              pWBC->wMinR = GetTabW(0x3);
                              pWBC->wMaxB = GetTabW(0x5);
                              pWBC->wMaxR = GetTabW(0x7);
                              pWBC->wResB = GetTabW(0x9);
                              pWBC->wResR = GetTabW(0xB);
                              pWBC->wDefB = GetTabW(0xD);
                      pWBC->wDefR = GetTabW(0xF);
                          
                      }else if(bHwValue == CTRL_PU_WB_COMPONENT_AUTO){  //0x0D
                          if(!(wbmControls & WHITE_BALANCE_COMP_AUTO_ENABLE)){
                          InvalidCtrlandStall();
                          return;
                      }
                      SetPtrTabEx(path_WTBCAuto);
                      bAutoCtrl = TRUE;
                      pCtrlSet->RangeType.VCtrlParaAuto.bmInfo = GetTab(0x0);
                      pCtrlSet->RangeType.VCtrlParaAuto.bDef = GetTab(0x1);
                      pCtrlSet->CurType.bCurrent = bWBCompAuto;
                      
                  }
              #endif // DISABLE_WHITEBALANCE_COMP 
1413   1           else{
1414   2                      InvalidCtrlandStall();
1415   2                      return;
1416   2           }
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 24  

1417   1      
1418   1              switch( bRequest ){
1419   2                      case REQ_GET_CUR:       //0x81
1420   2                              if(bAutoCtrl == TRUE){
1421   3                                      pbEP0Buf[0] = pCtrlSet->CurType.bCurrent;
1422   3                                      bTmp=1;
1423   3                              }
1424   2      #ifndef DISABLE_WHITEBALANCE_COMP       
                                      else if(bHwValue == CTRL_PU_WB_COMPONENT){
                                          pbEP0Buf[0] = LoByteOfWord(wWBCompBlue);
                                          pbEP0Buf[1] = HiByteOfWord(wWBCompBlue);
                                          pbEP0Buf[2] = LoByteOfWord(wWBCompRed);
                                          pbEP0Buf[3] = HiByteOfWord(wWBCompRed);
                                          bTmp=bLwLength;
              /***  USB CV bug!!!  merely to be UVC Test compliance  ***/
              //Reg[REG_EP0_FIFO_LEN]=bLwLength;  //  USB CV bug!!!  merely to be UVC Test compliance
                              if(bLwLength == 2){
                                                      if(wWBCompBlue == pWBC->wMaxB){
                                                              xWBCompIncrease = TRUE;
                                                      }else if((bLwLength == 2) && xWBCompIncrease){
                                                              wWBCompRed++;  //  fake default wWBCompRed value increases 1
                                                      }
                                                      bRequestErrorCode = EC_UNKNOW;
                                                      return;
                                              }
              /***  USB CV bug!!!  merely to be UVC Test compliance  ***/
                                      }
              #endif // DISABLE_WHITEBALANCE_COMP
1445   2                              else{
1446   3                                      if(bHwValue == CTRL_PU_POWER_LINE_FREQ){
1447   4                                          pbEP0Buf[0] = pCtrlSet->CurType.bCurrent;
1448   4                                          bTmp=1;
1449   4                                      }else{
1450   4                                          pbEP0Buf[0] = LoByteOfWord(pCtrlSet->CurType.wCurrent);
1451   4                                          pbEP0Buf[1] = HiByteOfWord(pCtrlSet->CurType.wCurrent);
1452   4                                          bTmp=2;
1453   4                                      }
1454   3                              }
1455   2                              Reg[REG_EP0_FIFO_LEN]=bTmp;
1456   2                              break;
1457   2                      case REQ_GET_MIN:   //0x82
1458   2                              if(bAutoCtrl == TRUE){
1459   3                                      InvalidRequestandStall();
1460   3                                      return;
1461   3                              }
1462   2      #ifndef DISABLE_WHITEBALANCE_COMP                       
                                      else if(bHwValue == CTRL_PU_WB_COMPONENT){
                                              pbEP0Buf[0] = LoByteOfWord(pWBC->wMinB);
                                              pbEP0Buf[1] = HiByteOfWord(pWBC->wMinB);
                                              pbEP0Buf[2] = LoByteOfWord(pWBC->wMinR);
                                              pbEP0Buf[3] = HiByteOfWord(pWBC->wMinR);
                                              bTmp=4;
                                      }
              #endif // DISABLE_WHITEBALANCE_COMP
1471   2                              else{
1472   3                                      if(bHwValue == CTRL_PU_POWER_LINE_FREQ){
1473   4                                         pbEP0Buf[0] = LoByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wMin);
1474   4                                         bTmp=1;
1475   4      
1476   4                                      }else{
1477   4                                         pbEP0Buf[0] = LoByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wMin);
1478   4                                         pbEP0Buf[1] = HiByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wMin);
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 25  

1479   4                                         bTmp=2;
1480   4                                      }
1481   3                              }
1482   2                              Reg[REG_EP0_FIFO_LEN]=bTmp;
1483   2                              break;
1484   2                      case REQ_GET_MAX:   //0x83
1485   2                              if(bAutoCtrl == TRUE) {
1486   3                                      InvalidRequestandStall();
1487   3                                      return;
1488   3                              }
1489   2      #ifndef DISABLE_WHITEBALANCE_COMP                       
                                      else if(bHwValue == CTRL_PU_WB_COMPONENT) {
                                              pbEP0Buf[0] = LoByteOfWord(pWBC->wMaxB);
                                              pbEP0Buf[1] = HiByteOfWord(pWBC->wMaxB);
                                              pbEP0Buf[2] = LoByteOfWord(pWBC->wMaxR);
                                              pbEP0Buf[3] = HiByteOfWord(pWBC->wMaxR);
                                              bTmp=4;
                                      }
              #endif // DISABLE_WHITEBALANCE_COMP
1498   2                              else {
1499   3                                      if(bHwValue == CTRL_PU_POWER_LINE_FREQ){
1500   4                                         pbEP0Buf[0] = LoByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wMax);
1501   4                                         bTmp=1;
1502   4                                      }else{
1503   4                                         pbEP0Buf[0] = LoByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wMax);
1504   4                                         pbEP0Buf[1] = HiByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wMax);
1505   4                                         bTmp=2;
1506   4                                      }
1507   3                              }
1508   2                              Reg[REG_EP0_FIFO_LEN]=bTmp;
1509   2                              break;
1510   2                      case REQ_GET_RES:   //0x84
1511   2                              if(bAutoCtrl == TRUE) {
1512   3                                      InvalidRequestandStall();
1513   3                                      return;
1514   3                              }
1515   2      #ifndef DISABLE_WHITEBALANCE_COMP
                                      else if(bHwValue == CTRL_PU_WB_COMPONENT) {
                                              pbEP0Buf[0] = LoByteOfWord(pWBC->wResB);
                                              pbEP0Buf[1] = HiByteOfWord(pWBC->wResB);
                                              pbEP0Buf[2] = LoByteOfWord(pWBC->wResR);
                                              pbEP0Buf[3] = HiByteOfWord(pWBC->wResR);
                                              bTmp=4;
                                      }
              #endif // DISABLE_WHITEBALANCE_COMP
1524   2                              else {
1525   3                                      if(bHwValue == CTRL_PU_POWER_LINE_FREQ){
1526   4                                         pbEP0Buf[0] = LoByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wRes);
1527   4                                         bTmp=1;
1528   4                                      }else{
1529   4                                         pbEP0Buf[0] = LoByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wRes);
1530   4                                         pbEP0Buf[1] = HiByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wRes);
1531   4                                         bTmp=2;
1532   4                                      }
1533   3                              }
1534   2                              Reg[REG_EP0_FIFO_LEN]=bTmp;
1535   2                              break;
1536   2                      case REQ_GET_INFO:   //0x86
1537   2                              if(bAutoCtrl == TRUE){
1538   3                                      pbEP0Buf[0] = pCtrlSet->RangeType.VCtrlParaAuto.bmInfo;
1539   3                              }
1540   2      #ifndef DISABLE_WHITEBALANCE_COMP
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 26  

                                      else if(bHwValue == CTRL_PU_WB_COMPONENT){
                                              if(bWBCompAuto){
                                                 pbEP0Buf[0] = pWBC->bmInfo | INFO_DISABLE_BIT;
                                              }else{
                                                 pbEP0Buf[0] = pWBC->bmInfo & (~INFO_DISABLE_BIT);
                              }                                  
                                      }
              #endif // DISABLE_WHITEBALANCE_COMP
1549   2                              else{
1550   3                                      if(bHwValue == CTRL_PU_WB_TEMP) {
1551   4                                              if(bWBTempAuto){
1552   5                                                      pCtrlSet->RangeType.VCtrlParaAuto.bmInfo |= INFO_DISABLE_BIT;
1553   5                                              }else{
1554   5                                                      pCtrlSet->RangeType.VCtrlParaAuto.bmInfo &= (~(INFO_DISABLE_BIT));
1555   5                          }                                           
1556   4                                      }
1557   3                                      pbEP0Buf[0] = pCtrlSet->RangeType.VCtrlParaUnsigned.bmInfo;
1558   3                              }
1559   2                              Reg[REG_EP0_FIFO_LEN]=1;
1560   2                              break;
1561   2                      case REQ_GET_DEF:   //0x87
1562   2                              if(bAutoCtrl == TRUE) {
1563   3                                      pbEP0Buf[0] = pCtrlSet->RangeType.VCtrlParaAuto.bDef;
1564   3                                      bTmp=1;
1565   3                              }
1566   2      #ifndef DISABLE_WHITEBALANCE_COMP
                                      else if(bHwValue == CTRL_PU_WB_COMPONENT) {
                                              pbEP0Buf[0] = LoByteOfWord(pWBC->wDefB);
                                              pbEP0Buf[1] = HiByteOfWord(pWBC->wDefB);
                                              pbEP0Buf[2] = LoByteOfWord(pWBC->wDefR);
                                              pbEP0Buf[3] = HiByteOfWord(pWBC->wDefR);
                                              bTmp=4;
                                      }
              #endif // DISABLE_WHITEBALANCE_COMP
1575   2                              else{
1576   3                                      if(bHwValue == CTRL_PU_POWER_LINE_FREQ){
1577   4                                         pbEP0Buf[0] = LoByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wDef);
1578   4                                         bTmp=1;
1579   4                                      }else{
1580   4                                         pbEP0Buf[0] = LoByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wDef);
1581   4                                         pbEP0Buf[1] = HiByteOfWord(pCtrlSet->RangeType.VCtrlParaUnsigned.wDef);
1582   4                                         bTmp=2;
1583   4                                      }
1584   3                              }
1585   2                              Reg[REG_EP0_FIFO_LEN]=bTmp;
1586   2                              break;
1587   2                      default:
1588   2                              InvalidRequestandStall();
1589   2                              return;
1590   2              }
1591   1              bRequestErrorCode = EC_NO_ERROR;
1592   1              WaitTXEnd();
1593   1      }
1594          #pragma ot(8,speed)
1595          static void VSProbeCommitGet(BYTE bRequest, BOOLEAN bStill)
1596          {
1597   1          BYTE data i;
1598   1          WORD data wBytes2Send;
1599   1          DWORD data dwTemp, dwTemp1;
1600   1          WORD data wTemp;
1601   1          if(bStill == FALSE){
1602   2              // VS Probe/Commit Get Control
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 27  

1603   2              wBytes2Send = 26;   // UVC spec 1.0, Probe/Commit length is 26 bytes
1604   2              pbTmpBuf[0x0] = 0x1; //bmHint, D0:1 dwFrameInterval
1605   2              pbTmpBuf[0x1] = 0x0;
1606   2              pbTmpBuf[0x2] = VideoProbeCommitCtrls.bFormatIndex;  // bFormatIndex
1607   2              pbTmpBuf[0x3] = VideoProbeCommitCtrls.bFrameIndex;   // bFrameIndex
1608   2              // 0x4, 0x5, 0x6, 0x7 ;dwFrameInterval
1609   2              for(i=8;i<18;i++){
1610   3                  pbTmpBuf[i] = 0x0;
1611   3              }    
1612   2              // 0x18, 0x19, 0x20, 0x21; dwMaxVideoFrameSize
1613   2              i = VideoProbeCommitCtrls.bResIdx;
1614   2                  wTemp = GetExResTable(i, GET_WIDTH);
1615   2                  dwTemp = GetExResTable(i, GET_HEIGHT);
1616   2                  dwTemp = dwTemp*wTemp;
1617   2              if(StrmCurSet.bVFormat == FMT_YUY2){
1618   3                  // wTemp = GetExResTable(i, GET_WIDTH);
1619   3                  // dwTemp = GetExResTable(i, GET_HEIGHT);
1620   3                  // dwTemp = dwTemp*wTemp;
1621   3                  dwTemp = dwTemp*2;
1622   3                   
1623   3                              //if(xFrameRateV2 == FALSE){
1624   3                          //i = CaculateFrmRate(i, MODE_YUV);
1625   3                              //}else{
1626   3                          i = CaculateFrmRateV2(i, MODE_YUV);                 
1627   3                              //}
1628   3                              
1629   3                              //SetPtrTabEx must be under CaculateFrmTareV2
1630   3                       if(xHighSpdMode){
1631   4                      SetPtrTabEx(path_HSYUYProb);
1632   4                  }else{
1633   4                      SetPtrTabEx(path_FSYUYProb);
1634   4                  }  
1635   3                              
1636   3              }else{
1637   3                  // wTemp = GetExResTable(i, GET_WIDTH);
1638   3                  // dwTemp = GetExResTable(i, GET_HEIGHT);
1639   3                  // dwTemp = dwTemp*wTemp;
1640   3                  dwTemp = dwTemp*3;
1641   3                                 
1642   3                              //if(xFrameRateV2 == FALSE){
1643   3                              //      i = CaculateFrmRate(i, MODE_MJPEG);
1644   3                              //}else{
1645   3                                  i = CaculateFrmRateV2(i, MODE_MJPEG);
1646   3                              //}
1647   3                              
1648   3                       if(xHighSpdMode){
1649   4                      SetPtrTabEx(path_HSMJProb);
1650   4                  }else{
1651   4                      SetPtrTabEx(path_FSMJProb);
1652   4                  }   
1653   3                              
1654   3              }
1655   2              switch (bRequest){
1656   3                  case REQ_GET_MIN:
1657   3                      dwTemp1 = FI_1;
1658   3                      break;
1659   3                  case REQ_GET_MAX:
1660   3                  case REQ_GET_DEF:
1661   3                      i = Interval_Idx_Tab[i].FrmRate[0];
1662   3                      dwTemp1 = FPS_Table[GetFPSTableIndex(i)];
1663   3                      break;
1664   3                  case REQ_GET_CUR:
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 28  

1665   3                      dwTemp1 = FPS_Table[GetFPSTableIndex(VideoProbeCommitCtrls.CurFPS)];
1666   3                      break;
1667   3              }
1668   2              // dwFrameInterval
1669   2              pbTmpBuf[0x4] = Byte0OfDWord(dwTemp1);
1670   2              pbTmpBuf[0x5] = Byte1OfDWord(dwTemp1);
1671   2              pbTmpBuf[0x6] = Byte2OfDWord(dwTemp1);
1672   2              pbTmpBuf[0x7] = Byte3OfDWord(dwTemp1);
1673   2              // dwMaxVideoFrameSize
1674   2              pbTmpBuf[0x12] = Byte0OfDWord(dwTemp);
1675   2              pbTmpBuf[0x13] = Byte1OfDWord(dwTemp);
1676   2              pbTmpBuf[0x14] = Byte2OfDWord(dwTemp);
1677   2              pbTmpBuf[0x15] = Byte3OfDWord(dwTemp);
1678   2              // dwMaxPayloadTransferSize
1679   2              pbTmpBuf[0x16] = GetTab(0x0);
1680   2              pbTmpBuf[0x17] = GetTab(0x1);
1681   2              pbTmpBuf[0x18] = GetTab(0x2);
1682   2              pbTmpBuf[0x19] = GetTab(0x3);
1683   2          }else{
1684   2              // VS Still Probe/Commit Get Control
1685   2              wBytes2Send = 0xB;
1686   2              pbTmpBuf[0x0] = StillProbeCommitCtrls.bFormatIndex;  // bFormatIndex
1687   2              pbTmpBuf[0x1] = StillProbeCommitCtrls.bFrameIndex;   // bFrameIndex
1688   2              pbTmpBuf[0x2] = 0x0; // bCompressionIndex
1689   2              // 0x3, 0x4, 0x5, 0x6 ; dwMaxVideoFrameSize
1690   2              i = StillProbeCommitCtrls.bResIdx;
1691   2              wTemp = GetExResTable(i, GET_WIDTH);
1692   2              dwTemp = GetExResTable(i, GET_HEIGHT);
1693   2              dwTemp = dwTemp*wTemp;
1694   2      
1695   2              if(StrmCurSet.bSFormat == FMT_YUY2){
1696   3                  if(xHighSpdMode){
1697   4                      SetPtrTabEx(path_HSYUYProb);            
1698   4                  }else{
1699   4                      SetPtrTabEx(path_FSYUYProb);
1700   4                  }    
1701   3                  dwTemp = dwTemp*2;
1702   3              }else{
1703   3                  if(xHighSpdMode){
1704   4                      SetPtrTabEx(path_HSMJProb);
1705   4                  }else{
1706   4                      SetPtrTabEx(path_FSMJProb);
1707   4                  }                    
1708   3                  dwTemp = dwTemp*3;
1709   3              }    
1710   2                      
1711   2              pbTmpBuf[0x3] = Byte0OfDWord(dwTemp);
1712   2              pbTmpBuf[0x4] = Byte1OfDWord(dwTemp);
1713   2              pbTmpBuf[0x5] = Byte2OfDWord(dwTemp);
1714   2              pbTmpBuf[0x6] = Byte3OfDWord(dwTemp);
1715   2              // 0x7, 0x8, 0x9, 0xA ; dwMaxPayloadTransferSize
1716   2                      
1717   2              pbTmpBuf[0x7] = GetTab(0x0);
1718   2              pbTmpBuf[0x8] = GetTab(0x1);
1719   2              pbTmpBuf[0x9] = GetTab(0x2);
1720   2              pbTmpBuf[0xA] = GetTab(0x3);
1721   2          }
1722   1          if( wBytes2Send > wLength ){
1723   2              wBytes2Send = wLength;
1724   2          }   
1725   1      /*      
1726   1          for( i = 0 ; i < wBytes2Send ; i++ ){
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 29  

1727   1              pbEP0Buf[i] = pbTmpBuf[i];
1728   1          }
1729   1      */
1730   1              memcpy(pbEP0Buf, pbTmpBuf, wBytes2Send);
1731   1          Reg[REG_EP0_FIFO_LEN]=wBytes2Send;
1732   1      
1733   1          WaitTXEnd();
1734   1      }    
1735          
1736          void USBVideoStreaming(void)
1737          {
1738   1              //BYTE data i, bRecBytesCnt=0,bTmp;
1739   1              //WORD data wSentCnt=0, wBytes2Send=0;
1740   1              BYTE data bRecBytesCnt, i;
1741   1              switch( bRequest ) {
1742   2                      case REQ_SET_CUR:
1743   2                              switch( bHwValue ) {
1744   3                                      case CTRL_VS_PROBE:  // 0x01
1745   3                                      case CTRL_VS_COMMIT: // 0x02
1746   3                                              while( !(Reg[REG_EP0_FIFO_CTRL] & EP0_IN_FIFO_READY) );
1747   3                                              bRecBytesCnt = Reg[REG_EP0_FIFO_LEN] & EP0_FIFO_BYTE_LEN_MASK;
1748   3                                              for( i = 0 ; i < bRecBytesCnt ; i++ ){
1749   4                                                  pbIBuf[i] = pbEP0Buf[i];
1750   4                                      }
1751   3                                      Reg[REG_EP0_FIFO_CTRL]&=~EP0_IN_FIFO_READY;
1752   3                                      // VideoProbeCommitCtrls.bFormatIndex = pbEP0Buf[2];
1753   3                                              // VideoProbeCommitCtrls.bFrameIndex  = pbEP0Buf[3];
1754   3                                               ConstructStrmCurSet(FALSE);
1755   3                                              break;
1756   3                                      case CTRL_VS_STILL_PROBE:  // 0x03
1757   3                                      case CTRL_VS_STILL_COMMIT: // 0x04
1758   3                                              while( !(Reg[REG_EP0_FIFO_CTRL] & EP0_IN_FIFO_READY) );
1759   3                                              bRecBytesCnt = Reg[REG_EP0_FIFO_LEN] & EP0_FIFO_BYTE_LEN_MASK;
1760   3                                              for( i = 0 ; i < bRecBytesCnt ; i++ ){
1761   4                                                  pbIBuf[i] = pbEP0Buf[i];
1762   4                                      }
1763   3                                              Reg[REG_EP0_FIFO_CTRL]&=~EP0_IN_FIFO_READY;
1764   3                                              // StillProbeCommitCtrls.bFormatIndex = pbEP0Buf[0];
1765   3                                              // StillProbeCommitCtrls.bFrameIndex  = pbEP0Buf[1];
1766   3                                              ConstructStrmCurSet(TRUE);
1767   3                                              break;
1768   3                                      case CTRL_VS_STILL_IMG_TRIG: // 0x05
1769   3                                              while( !(Reg[REG_EP0_FIFO_CTRL] & EP0_IN_FIFO_READY) );
1770   3                                              bRecBytesCnt = Reg[REG_EP0_FIFO_LEN] & EP0_FIFO_BYTE_LEN_MASK;
1771   3                                              for( i = 0 ; i < bRecBytesCnt ; i++ ){
1772   4                                                  pbIBuf[i] = pbEP0Buf[i];
1773   4                          }
1774   3                                              Reg[REG_EP0_FIFO_CTRL]&=~EP0_IN_FIFO_READY;   //clear RX disable
1775   3                                              if(pbIBuf[0] == TRANSMIT_STILL) {
1776   4                                                      if (bCtrlFlowState ==(State_StreamReady|Event_Preview)){
1777   5                                                              //UARTString("Set SnapShot");
1778   5                                                              SetNextStateAndEvent(State_StreamOff|Event_SnapShot);
1779   5                                                      }
1780   4                                              }
1781   3                                              break;
1782   3                                      default:
1783   3                                              Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
1784   3                                              return;
1785   3                              }
1786   2                              Reg[REG_EP0_FIFO_CTRL]|=EP0_STATUS_OUT_NO_DATA;
1787   2                              while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
1788   2                              break;
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 30  

1789   2                      case REQ_GET_MIN:
1790   2                      case REQ_GET_MAX:
1791   2                      case REQ_GET_DEF:
1792   2                      case REQ_GET_CUR:
1793   2                              switch( bHwValue ) {
1794   3                                      case CTRL_VS_PROBE:   // 0x01
1795   3                                      case CTRL_VS_COMMIT:  // 0x02
1796   3                                          VSProbeCommitGet(bRequest, FALSE);
1797   3                                              break;
1798   3                                      case CTRL_VS_STILL_PROBE:  // 0x03
1799   3                                      case CTRL_VS_STILL_COMMIT:  // 0x04
1800   3                                          VSProbeCommitGet(bRequest, TRUE);
1801   3                                              break;
1802   3                                      default:
1803   3                                              Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
1804   3                                              return;
1805   3                              }
1806   2                              //WaitTXEnd();
1807   2                              break;
1808   2      
1809   2                      default:
1810   2                              Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
1811   2                              return;
1812   2              }
1813   1      }
1814          
1815          void InvalidCtrlandStall(void)
1816          {
1817   1           bRequestErrorCode = EC_INVALID_CONTROL;  //INPUT or OUTPUT control all not support
1818   1           Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
1819   1      }
1820          
1821          void OutofRangeCtrlandStall(void)
1822          {
1823   1           bRequestErrorCode = EC_OUT_OF_RANGE;
1824   1           Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
1825   1      }
1826          
1827          void InvalidRequestandStall(void)
1828          {
1829   1           bRequestErrorCode = EC_INVALID_REQUEST;
1830   1           Reg[REG_USB_EP_CTRL]|=EP0_STALL;  // Return stall for command error
1831   1      }
1832          
1833          BOOLEAN WaitTXEnd(void)
1834          {
1835   1             while( Reg[REG_EP0_FIFO_CTRL] & EP0_OUT_FIFO_BUSY )
1836   1              {               RESET_WDT();
1837   2                              if(bInt0State)
1838   2                                      return FALSE;
1839   2              }
1840   1              return TRUE;
1841   1      }
1842          
1843          void XmitEp0(WORD TotalLen)
1844          {
1845   1          WORD idata wAddr;
1846   1          BYTE idata EP0BUFIdx, Idx, DescLen, i, j,bDMICStage,bSupFormat;
1847   1          BOOLEAN idata bAutoGenState,bAudioGen,bCustomDescState;
1848   1          BYTE idata k;
1849   1      
1850   1          if(wLength > TotalLen){
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 31  

1851   2                      wLength = TotalLen;
1852   2          }
1853   1              wAddr = wTabAddr; // Store index collection table start address
1854   1              EP0BUFIdx = 0;
1855   1              bAutoGenState = FALSE;
1856   1              bCustomDescState = FALSE;
1857   1              j = 0;
1858   1      
1859   1            //audio function  
1860   1              bDMICStage=0;
1861   1              bAudioGen=FALSE;
1862   1              bSupFormat=0xFF;
1863   1          
1864   1              do{
1865   2                  // Get table index
1866   2                  if(bAutoGenState == FALSE){
1867   3                              if(bCustomDescState == FALSE){
1868   4                              Idx = GetTabMapByte(wAddr);
1869   4                              }
1870   3                }else{
1871   3                      Idx = pbFmtTab[sizeof(VS_STREAM_FMT_TAB)+j];
1872   3                      j++;
1873   3                      if(Idx == 0xFF){
1874   4                          wAddr++;
1875   4                          bAutoGenState = FALSE;
1876   4                          continue;
1877   4                      }    
1878   3                 }            
1879   2                
1880   2                  if(bCustomDescState == FALSE){                    
1881   3                      if( (j!=0) && ((Idx==FULL_CONFIG_DESC)||(Idx==OTHERSP_CONF_DESC)))
1882   3                              {  //audio function     //only MIC
1883   4                            if(bDMICInput==MICSEL_NONE)  
1884   4                            {// NO AUDIO
1885   5                                Idx=GET_AU_VOLUMN_MIC;  //for get HID function
1886   5      
1887   5                            }else
1888   4                                {   // SetPtrTabEx(path_AU_IAD_MIC);
1889   5                                    // Idx=AU_IAD_DESC_MIC;   
1890   5                                    //Patch AU IAD desc in setting file problem 
1891   5                                    //Revised by Eric,20100304
1892   5                                if(xSetFileExist == TRUE){
1893   6                                      // Mapping to external setting table
1894   6                                              wTabAddr = wSetStartAddr + path_AU_IAD_MIC + UPGRADE_RAM_START_ADDR;
1895   6                                }else{
1896   6                                      // Mapping to internal setting table
1897   6                                      wTabAddr = (WORD)&InternalIdxTable[path_AU_IAD_MIC];
1898   6                                }  
1899   5                                Idx=GetTabMapByte(wTabAddr);          
1900   5                                                              
1901   5                                    wAddr=wTabAddr;
1902   5                                
1903   5                            }
1904   4                              }
1905   3                          
1906   3                              if(((Idx >=CS_VS_INTF_DESC) && (Idx<=VS_MJ_STILL_DESC))||
1907   3                                  (Idx == HIGH_CONFIG_DESC) || (Idx == FULL_CONFIG_DESC))
1908   3                              { //video auto generate
1909   4                                              AutoGenDesc(Idx);
1910   4                              }else if((Idx== AU_DMIC_GENER_DESC))
1911   3                              {//audio auto generate
1912   4                                      AudioDescGen(bDMICStage++);
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 32  

1913   4                                      bAudioGen=TRUE;
1914   4                                      bSupFormat=bNumOfSup;
1915   4                              }else if(Idx==GET_AU_VOLUMN_MIC)
1916   3                              {   //After getting all Audio Desc                     
1917   4                              Idx=HIGH_CONFIG_DESC; //for copy data from pbTmpBuf in full speed
1918   4      
1919   4                              DescLen=EX_CallBackFunction(FUNSEL_HIDConfig);////pfUSBHIDConfigDesc();
1920   4      
1921   4                              goto TRANCONF;
1922   4                      }else{
1923   4                                     SetPtrTabById(Idx);
1924   4                          }
1925   3                      
1926   3                          if((Idx == HIGH_CONFIG_DESC) || (Idx == FULL_CONFIG_DESC) 
1927   3                              || (bAutoGenState == TRUE)|| (bAudioGen == TRUE)){                      
1928   4                              DescLen = GetTabXdata(0);       
1929   4                          }else if(Idx == VS_AUTOMATIC_FMTGEN){
1930   4                              // Construct CS VS Input header, format ,frame and still descriptor index collection tabl
             -e in
1931   4                              // pbCacheBuf
1932   4                              bAutoGenState = TRUE;
1933   4                              continue;
1934   4                      }else{
1935   4                            DescLen = GetTab(0);              
1936   4                      }
1937   3                        
1938   3                }else{
1939   3                              // DescLen = GetTab(0);              
1940   3                      DescLen = CBYTE[wTabAddr];
1941   3                } 
1942   2      
1943   2      TRANCONF:    
1944   2              for(i=0; i<DescLen; i++){
1945   3                              if(bCustomDescState == TRUE){
1946   4                                  pbEP0Buf[EP0BUFIdx] = CBYTE[wTabAddr+i];     
1947   4                              }else{
1948   4                                      if((Idx == HIGH_CONFIG_DESC) || (Idx == FULL_CONFIG_DESC) 
1949   4                                      || (bAutoGenState == TRUE)|| (bAudioGen == TRUE)){
1950   5                                          pbEP0Buf[EP0BUFIdx] = GetTabXdata(i);                    
1951   5                                  }else{
1952   5                                   pbEP0Buf[EP0BUFIdx] = GetTab(i);     
1953   5                             }
1954   4                              }
1955   3                                          
1956   3                              wLength -= 1;
1957   3                              EP0BUFIdx++;
1958   3                              if(EP0BUFIdx==EP0_BUF_SIZE){   //ep0 max 64 bytes
1959   4                                      Reg[REG_EP0_FIFO_LEN]= EP0_BUF_SIZE;
1960   4                                        if(!WaitTXEnd())
1961   4                                        {                     return;
1962   5                                        }
1963   4                                      EP0BUFIdx=0;
1964   4                              }
1965   3                              if(wLength == 0){
1966   4                                      if(EP0BUFIdx){   // If EP0Bufidx==0 already TX to host
1967   5                                              Reg[REG_EP0_FIFO_LEN] = EP0BUFIdx;
1968   5                                      }else{
1969   5                                          Reg[REG_EP0_FIFO_CTRL] = EP0_DATA_OUT_NO_DATA;
1970   5                                          while( Reg[REG_EP0_FIFO_CTRL] & EP0_STATUS_OUT_NO_DATA );
1971   5                                      }
1972   4                                      break;
1973   4                              }
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 33  

1974   3              }
1975   2              
1976   2                      if(wLength==0){
1977   3                          break;
1978   3                      }
1979   2      
1980   2                      if((bDMICStage/5)==(bSupFormat>>4))     
1981   2                      {
1982   3                              bDMICStage=0;
1983   3                              bAudioGen=FALSE;
1984   3                      }
1985   2                      // Get next table index ID
1986   2                      // 2009,04,14 Lear add
1987   2                      // Add Customize Descriptor
1988   2                      if((bAutoGenState == FALSE) && (bAudioGen == FALSE))
1989   2                      {
1990   3                              bCustomDescState = FALSE;
1991   3                              if(pCustomizeDesc != 0x0)
1992   3                              {
1993   4                                      for(k=0; k<pCustomizeDesc->bCnt; k++)
1994   4                                      {
1995   5                                              if(pCustomizeDesc->stIDAddr[k].bReported == FALSE)
1996   5                                              {
1997   6                                                      if(Idx == pCustomizeDesc->stIDAddr[k].FollowingID)  //descide next is the added desc
1998   6                                                      {
1999   7                                                              bCustomDescState = TRUE;
2000   7                                                              wTabAddr = pCustomizeDesc->stIDAddr[k].wDescAddr;
2001   7                                                              pCustomizeDesc->stIDAddr[k].bReported = TRUE;
2002   7                                                              break;
2003   7                                                      }
2004   6                                              }
2005   5                                      }
2006   4                              }
2007   3                              if(bCustomDescState == FALSE){
2008   4                                      wAddr++;
2009   4                              }else{
2010   4                                      continue;
2011   4                              }
2012   3              }               
2013   2          }while(1);    
2014   1          WaitTXEnd();
2015   1              // Clear AddDesc report flag
2016   1              if(pCustomizeDesc != 0x0){
2017   2                      for(k=0; k<pCustomizeDesc->bCnt; k++){
2018   3                              pCustomizeDesc->stIDAddr[k].bReported = FALSE;
2019   3                      }
2020   2              }
2021   1      }    
2022          void GetVCControlDef(void)
2023          {
2024   1      
2025   1              SetPtrTabEx(path_Backlight);
2026   1              // wBacklight=*(WORD*)&pCdPtr[7];
2027   1              wBacklight = GetTabW(0x7);
2028   1              
2029   1              SetPtrTabEx(path_Bright);
2030   1              // n16Brightness=*(WORD*)&pCdPtr[7];
2031   1              n16Brightness = GetTabW(0x7);
2032   1      
2033   1              SetPtrTabEx(path_Contrast);
2034   1              // wContrast=*(WORD*)&pCdPtr[7];
2035   1              wContrast = GetTabW(0x7);
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 34  

2036   1      
2037   1              SetPtrTabEx(path_PwrLine);
2038   1              // bPwrLine=(BYTE)*(WORD*)&pCdPtr[7];
2039   1              bPwrLine=(BYTE)GetTabW(0x7);
2040   1      
2041   1              SetPtrTabEx(path_Hue);
2042   1              // n16Hue=*(WORD*)&pCdPtr[7];
2043   1              n16Hue = GetTabW(0x7);
2044   1      
2045   1              SetPtrTabEx(path_Saturation);
2046   1              // wSaturation=*(WORD*)&pCdPtr[7];
2047   1              wSaturation = GetTabW(0x7);
2048   1      
2049   1              SetPtrTabEx(path_Sharpness);
2050   1              // wSharpness=*(WORD*)&pCdPtr[7];
2051   1              wSharpness = GetTabW(0x7);
2052   1      
2053   1              SetPtrTabEx(path_Gamma);
2054   1              // wGamma=*(WORD*)&pCdPtr[7];
2055   1              wGamma = GetTabW(0x7);
2056   1      
2057   1              SetPtrTabEx(path_WhiteBT);
2058   1              // wWBTemp=*(WORD*)&pCdPtr[7];
2059   1              wWBTemp = GetTabW(0x7);
2060   1      
2061   1              SetPtrTabEx(path_WTBTAuto);
2062   1              // bWBTempAuto=pCdPtr[1];   //Def value
2063   1              bWBTempAuto = GetTab(0x1);   //Def value
2064   1              // 2009,05,25 remove WB component control, replace with Gain control
2065   1              // Lear removed
2066   1              SetPtrTabEx(path_Gain);
2067   1      
2068   1              wGain = GetTabW(7);
2069   1              // Remove WB component control
2070   1              // wWBCompRed = GetTabW(15);
2071   1              wWBCompRed = 0x0;
2072   1              bWBCompAuto = 0x0;
2073   1              // reset Mirror, Flip to OFF
2074   1              bExtenUnitCtrl = 0;
2075   1              xSetPropertyMirror = FALSE;
2076   1              xSetPropertyFlip = FALSE;
2077   1      }
2078          // (StrmCurSet.wVWidth);
2079          // (StrmCurSet.wVHeight);
2080          
2081          // 2009,06,15 Lear create
2082          void ConstructStreamRelatedInfo(BOOLEAN bForceBuild)
2083          {
2084   1              if(bForceBuild == FALSE){
2085   2                      if(Reg[REG_USB_FUNC_ADDR] != 0){
2086   3                              if(xHighSpdMode == TRUE){
2087   4                                      if( Reg[REG_XCVR_ST] & HIGH_SPEED_MODE ){
2088   5                                              return;
2089   5                                      }
2090   4                              }else{
2091   4                                      if( Reg[REG_XCVR_ST] & FULL_SPEED_MODE ){
2092   5                                              return;
2093   5                                      }
2094   4                              }
2095   3                      }
2096   2              }
2097   1              if( Reg[REG_XCVR_ST] & HIGH_SPEED_MODE ){
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 35  

2098   2                      xHighSpdMode = TRUE;
2099   2                      //patch the problem: QGain less
2100   2                      // descide the QGain in initial, 2009/06/16
2101   2                      Reg[REG_JQ_GAIN] = (QG_2QX);
2102   2              }else{
2103   2                      xHighSpdMode = FALSE;
2104   2                      //patch the problem: QGain less
2105   2                      // descide the QGain in initial, 2009/06/16             
2106   2                      Reg[REG_JQ_GAIN] = (QG_1X);
2107   2              }
2108   1          ConstructStreamTable();
2109   1          ConstructDefStremSet();
2110   1          LoadDefaultSetting();
2111   1      }
2112          #endif  //  #ifndef     __usbif_c__
2113          
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 36  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Com022F (BEGIN)
0000         L?0560:
0000 E500        R     MOV     A,pCtrlSet+01H
0002 2403              ADD     A,#03H
0004         L?0561:
0004 FF                MOV     R7,A
0005 E4                CLR     A
0006 3500        R     ADDC    A,pCtrlSet
0008 FA                MOV     R2,A
0009 A907              MOV     R1,AR7
000B         L?0562:
000B 7B01              MOV     R3,#01H
000D 900001            MOV     DPTR,#01H
0010 020000      E     LJMP    ?C?CLDOPTR
0013         L?0563:
0013         L?0564:
0013 F582              MOV     DPL,A
0015 E4                CLR     A
0016 3500        R     ADDC    A,pCtrlSet
0018 F583              MOV     DPH,A
001A         L?0565:
001A E0                MOVX    A,@DPTR
001B 900000      E     MOV     DPTR,#pbEP0Buf+01H
001E F0                MOVX    @DPTR,A
001F 750002      R     MOV     bTmp,#02H
0022 22                RET     
0023         L?0566:
0023 E500        E     MOV     A,wValue+01H
0025 F0                MOVX    @DPTR,A
0026         L?0567:
0026 900002            MOV     DPTR,#02H
0029 E0                MOVX    A,@DPTR
002A 4440              ORL     A,#040H
002C 22                RET     
002D         L?0568:
002D 900000      E     MOV     DPTR,#pbEP0Buf
0030 F0                MOVX    @DPTR,A
0031         L?0569:
0031 850082      R     MOV     DPL,pCtrlSet+01H
0034 850083      R     MOV     DPH,pCtrlSet
0037 22                RET     
0038         L?0570:
0038 E500        E     MOV     A,wTabAddr+01H
003A 2500        R     ADD     A,wSentCnt+01H
003C FF                MOV     R7,A
003D E500        E     MOV     A,wTabAddr
003F 3500        R     ADDC    A,wSentCnt
0041 FE                MOV     R6,A
0042 7C00              MOV     R4,#00H
0044 EF                MOV     A,R7
0045 2500        R     ADD     A,i
0047 FF                MOV     R7,A
0048 EC                MOV     A,R4
0049 3E                ADDC    A,R6
004A 8F82              MOV     DPL,R7
004C F583              MOV     DPH,A
004E E4                CLR     A
004F 93                MOVC    A,@A+DPTR
0050 22                RET     
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 37  

0051         L?0571:
0051         L?0572:
0051 900000      E     MOV     DPTR,#pbEP0Buf
0054 F0                MOVX    @DPTR,A
0055 750001      R     MOV     bTmp,#01H
0058 22                RET     
0059         L?0573:
0059 7400        E     MOV     A,#LOW pbEP0Buf
005B 2500        R     ADD     A,i
005D F582              MOV     DPL,A
005F E4                CLR     A
0060 3400        E     ADDC    A,#HIGH pbEP0Buf
0062 F583              MOV     DPH,A
0064 22                RET     
0065         L?0574:
0065 E0                MOVX    A,@DPTR
0066         L?0575:
0066 850082      R     MOV     DPL,pCtrlSet+01H
0069 850083      R     MOV     DPH,pCtrlSet
006C 22                RET     
006D         L?0576:
006D         L?0577:
006D 900000      E     MOV     DPTR,#pbEP0Buf
0070 F0                MOVX    @DPTR,A
0071 E500        R     MOV     A,pCtrlSet+01H
0073 22                RET     
             ; FUNCTION Com022F (END)

             ; FUNCTION USBCmd (BEGIN)
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
                                           ; SOURCE LINE # 175
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002 120000      E     LCALL   _EX_CallBackFunction
0005 EF                MOV     A,R7
0006 6401              XRL     A,#01H
0008 6073              JZ      ?C0002
                                           ; SOURCE LINE # 177
000A         ?C0001:
                                           ; SOURCE LINE # 179
000A 900003            MOV     DPTR,#03H
000D E0                MOVX    A,@DPTR
000E 547F              ANL     A,#07FH
0010 FF                MOV     R7,A
0011 BF0807            CJNE    R7,#08H,?C0004
0014 900002            MOV     DPTR,#02H
0017 E0                MOVX    A,@DPTR
0018 20E709            JB      ACC.7,?C0003
001B         ?C0004:
                                           ; SOURCE LINE # 180
001B 900002            MOV     DPTR,#02H
001E E0                MOVX    A,@DPTR
001F 54FE              ANL     A,#0FEH
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 181
0022 8052              SJMP    ?C0479
                                           ; SOURCE LINE # 183
0024         ?C0003:
                                           ; SOURCE LINE # 185
0024 900000      E     MOV     DPTR,#pbEP0Buf
0027 E0                MOVX    A,@DPTR
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 38  

0028 F500        E     MOV     bRequestType,A
                                           ; SOURCE LINE # 186
002A A3                INC     DPTR
002B E0                MOVX    A,@DPTR
002C F500        E     MOV     bRequest,A
                                           ; SOURCE LINE # 195
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 F500        E     MOV     wValue+01H,A
                                           ; SOURCE LINE # 196
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 F500        E     MOV     wValue,A
                                           ; SOURCE LINE # 197
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 F500        E     MOV     wIndex+01H,A
                                           ; SOURCE LINE # 198
003A A3                INC     DPTR
003B E0                MOVX    A,@DPTR
003C F500        E     MOV     wIndex,A
                                           ; SOURCE LINE # 199
003E A3                INC     DPTR
003F E0                MOVX    A,@DPTR
0040 F500        E     MOV     wLength+01H,A
                                           ; SOURCE LINE # 200
0042 A3                INC     DPTR
0043 E0                MOVX    A,@DPTR
0044 F500        E     MOV     wLength,A
                                           ; SOURCE LINE # 202
0046 900002            MOV     DPTR,#02H
0049 E0                MOVX    A,@DPTR
004A 54FE              ANL     A,#0FEH
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 205
004D 7F01              MOV     R7,#01H
004F 120000      E     LCALL   _EX_CallBackFunction
0052 EF                MOV     A,R7
0053 6401              XRL     A,#01H
0055 6026              JZ      ?C0002
                                           ; SOURCE LINE # 207
0057         ?C0005:
                                           ; SOURCE LINE # 208
0057 E500        E     MOV     A,bRequestType
0059 5460              ANL     A,#060H
005B FF                MOV     R7,A
005C BF2003            CJNE    R7,#020H,?C0006
                                           ; SOURCE LINE # 209
005F 020000      R     LJMP    USBClassCmd
                                           ; SOURCE LINE # 210
0062         ?C0006:
0062 E500        E     MOV     A,bRequestType
0064 5460              ANL     A,#060H
0066 7003              JNZ     ?C0008
                                           ; SOURCE LINE # 211
0068 020000      R     LJMP    USBStandardCmd
                                           ; SOURCE LINE # 212
006B         ?C0008:
006B E500        E     MOV     A,bRequestType
006D 5460              ANL     A,#060H
006F FF                MOV     R7,A
0070 BF4003            CJNE    R7,#040H,?C0010
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 39  

                                           ; SOURCE LINE # 213
0073 020000      R     LJMP    USBVendorCmd
                                           ; SOURCE LINE # 214
0076         ?C0010:
                                           ; SOURCE LINE # 215
0076         ?C0479:
0076 900001            MOV     DPTR,#01H
0079 E0                MOVX    A,@DPTR
007A 4401              ORL     A,#01H
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 218
007D         ?C0002:
007D 22                RET     
             ; FUNCTION USBCmd (END)

             ; FUNCTION USBStandardCmd (BEGIN)
                                           ; SOURCE LINE # 220
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 226
0000 E4                CLR     A
0001 F500        R     MOV     wSentCnt,A
0003 F500        R     MOV     wSentCnt+01H,A
                                           ; SOURCE LINE # 227
0005 F500        R     MOV     wBytes2Send,A
0007 F500        R     MOV     wBytes2Send+01H,A
                                           ; SOURCE LINE # 228
0009 7800        R     MOV     R0,#LOW bHookString
000B F6                MOV     @R0,A
                                           ; SOURCE LINE # 232
000C E500        E     MOV     A,bRequest
000E 120000      E     LCALL   ?C?CCASE
0011 0000        R     DW      ?C0013
0013 00                DB      00H
0014 0000        R     DW      ?C0023
0016 01                DB      01H
0017 0000        R     DW      ?C0032
0019 03                DB      03H
001A 0000        R     DW      ?C0062
001C 05                DB      05H
001D 0000        R     DW      ?C0066
001F 06                DB      06H
0020 0000        R     DW      ?C0115
0022 07                DB      07H
0023 0000        R     DW      ?C0116
0025 08                DB      08H
0026 0000        R     DW      ?C0117
0028 09                DB      09H
0029 0000        R     DW      ?C0124
002B 0A                DB      0AH
002C 0000        R     DW      ?C0129
002E 0B                DB      0BH
002F 0000              DW      00H
0031 0000        R     DW      ?C0115
                                           ; SOURCE LINE # 233
0033         ?C0013:
                                           ; SOURCE LINE # 234
0033 E500        E     MOV     A,bRequestType
0035 247F              ADD     A,#07FH
0037 600C              JZ      ?C0016
0039 14                DEC     A
003A 6016              JZ      ?C0019
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 40  

003C 2402              ADD     A,#02H
003E 7026              JNZ     ?C0022
                                           ; SOURCE LINE # 235
0040         ?C0015:
                                           ; SOURCE LINE # 236
0040 900000      E     MOV     DPTR,#bDeviceStatus
                                           ; SOURCE LINE # 238
0043 801A              SJMP    ?C0484
                                           ; SOURCE LINE # 239
0045         ?C0016:
                                           ; SOURCE LINE # 240
0045 E500        E     MOV     A,wIndex+01H
0047 D3                SETB    C
0048 9402              SUBB    A,#02H
004A 4003              JC      ?C0017
                                           ; SOURCE LINE # 241
004C 020000      R     LJMP    ?C0505
                                           ; SOURCE LINE # 243
004F         ?C0017:
                                           ; SOURCE LINE # 244
004F E4                CLR     A
                                           ; SOURCE LINE # 246
0050 800E              SJMP    ?C0486
                                           ; SOURCE LINE # 247
0052         ?C0019:
                                           ; SOURCE LINE # 249
0052 E500        E     MOV     A,wIndex+01H
0054 B48105            CJNE    A,#081H,?C0020
                                           ; SOURCE LINE # 250
0057 900000      E     MOV     DPTR,#bEndpoint1Status
005A 8003              SJMP    ?C0480
005C         ?C0020:
                                           ; SOURCE LINE # 252
005C 900000      E     MOV     DPTR,#bEndpoint5Status
005F         ?C0480:
005F         ?C0484:
005F E0                MOVX    A,@DPTR
0060         ?C0486:
0060 900000      E     MOV     DPTR,#pbEP0Buf
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
0064 8003              SJMP    ?C0014
                                           ; SOURCE LINE # 256
0066         ?C0022:
                                           ; SOURCE LINE # 257
0066         ?C0485:
0066 020000      R     LJMP    ?C0505
                                           ; SOURCE LINE # 259
0069         ?C0014:
                                           ; SOURCE LINE # 260
0069 E4                CLR     A
006A 900000      E     MOV     DPTR,#pbEP0Buf+01H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 261
006E 900003            MOV     DPTR,#03H
0071 7402              MOV     A,#02H
                                           ; SOURCE LINE # 262
                                           ; SOURCE LINE # 263
0073 020000      R     LJMP    ?C0488
                                           ; SOURCE LINE # 265
0076         ?C0023:
                                           ; SOURCE LINE # 266
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 41  

0076 E500        E     MOV     A,bRequestType
0078 541F              ANL     A,#01FH
007A FD                MOV     R5,A
007B 700E              JNZ     ?C0024
007D E500        E     MOV     A,wValue+01H
007F B40109            CJNE    A,#01H,?C0024
                                           ; SOURCE LINE # 267
0082 900000      E     MOV     DPTR,#bDeviceStatus
0085 E0                MOVX    A,@DPTR
0086 54FD              ANL     A,#0FDH
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
0089 804A              SJMP    ?C0025
008B         ?C0024:
008B ED                MOV     A,R5
008C 6402              XRL     A,#02H
008E 701D              JNZ     ?C0026
0090 E500        E     MOV     A,wValue+01H
0092 7019              JNZ     ?C0026
0094 E500        E     MOV     A,wIndex+01H
0096 B48114            CJNE    A,#081H,?C0026
                                           ; SOURCE LINE # 269
0099 900000      E     MOV     DPTR,#bEndpoint1Status
009C E0                MOVX    A,@DPTR
009D 54FE              ANL     A,#0FEH
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 270
00A0 900001            MOV     DPTR,#01H
00A3 E0                MOVX    A,@DPTR
00A4 4408              ORL     A,#08H
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 271
00A7 E0                MOVX    A,@DPTR
00A8 54FB              ANL     A,#0FBH
00AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 272
00AB 8028              SJMP    ?C0025
00AD         ?C0026:
00AD E500        E     MOV     A,bRequestType
00AF 541F              ANL     A,#01FH
00B1 6402              XRL     A,#02H
00B3 701D              JNZ     ?C0028
00B5 E500        E     MOV     A,wValue+01H
00B7 7019              JNZ     ?C0028
00B9 E500        E     MOV     A,wIndex+01H
00BB B48514            CJNE    A,#085H,?C0028
                                           ; SOURCE LINE # 274
00BE 900000      E     MOV     DPTR,#bEndpoint5Status
00C1 E0                MOVX    A,@DPTR
00C2 54FE              ANL     A,#0FEH
00C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 275
00C5 900001            MOV     DPTR,#01H
00C8 E0                MOVX    A,@DPTR
00C9 4480              ORL     A,#080H
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 276
00CC E0                MOVX    A,@DPTR
00CD 54BF              ANL     A,#0BFH
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 277
00D0 8003              SJMP    ?C0025
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 42  

00D2         ?C0028:
                                           ; SOURCE LINE # 278
00D2         ?C0487:
00D2 020000      R     LJMP    ?C0505
                                           ; SOURCE LINE # 280
00D5         ?C0025:
                                           ; SOURCE LINE # 281
00D5 120000      R     LCALL   L?0567
00D8 F0                MOVX    @DPTR,A
00D9         ?C0030:
                                           ; SOURCE LINE # 282
00D9 900002            MOV     DPTR,#02H
00DC E0                MOVX    A,@DPTR
00DD 20E603            JB      ACC.6,$ + 6H
00E0 020000      R     LJMP    ?C0018
00E3 80F4              SJMP    ?C0030
                                           ; SOURCE LINE # 283
                                           ; SOURCE LINE # 285
00E5         ?C0032:
                                           ; SOURCE LINE # 286
00E5 E500        E     MOV     A,bRequestType
00E7 541F              ANL     A,#01FH
00E9 FD                MOV     R5,A
00EA 6003              JZ      $ + 5H
00EC 020000      R     LJMP    ?C0033
                                           ; SOURCE LINE # 287
00EF E500        E     MOV     A,wValue+01H
00F1 B4010A            CJNE    A,#01H,?C0034
                                           ; SOURCE LINE # 288
00F4 900000      E     MOV     DPTR,#bDeviceStatus
00F7 E0                MOVX    A,@DPTR
00F8 4402              ORL     A,#02H
00FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 289
00FB 020000      R     LJMP    ?C0055
00FE         ?C0034:
00FE E500        E     MOV     A,wValue+01H
0100 6402              XRL     A,#02H
0102 706D              JNZ     ?C0036
                                           ; SOURCE LINE # 294
0104 900008            MOV     DPTR,#08H
0107 E0                MOVX    A,@DPTR
0108 30E007            JNB     ACC.0,?C0037
                                           ; SOURCE LINE # 295
010B 900016            MOV     DPTR,#016H
010E E0                MOVX    A,@DPTR
010F 54EF              ANL     A,#0EFH
0111 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 296
0112         ?C0037:
                                           ; SOURCE LINE # 298
0112 E500        E     MOV     A,wIndex
0114 B40112            CJNE    A,#01H,?C0038
                                           ; SOURCE LINE # 300
0117 120000      R     LCALL   L?0567
011A F0                MOVX    @DPTR,A
011B         ?C0039:
                                           ; SOURCE LINE # 301
011B 900002            MOV     DPTR,#02H
011E E0                MOVX    A,@DPTR
011F 20E6F9            JB      ACC.6,?C0039
0122         ?C0040:
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 43  

                                           ; SOURCE LINE # 302
0122 900009            MOV     DPTR,#09H
0125 7483              MOV     A,#083H
0127 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 303
0128 22                RET     
0129         ?C0038:
0129 E500        E     MOV     A,wIndex
012B B40212            CJNE    A,#02H,?C0042
                                           ; SOURCE LINE # 304
012E 120000      R     LCALL   L?0567
0131 F0                MOVX    @DPTR,A
0132         ?C0043:
                                           ; SOURCE LINE # 305
0132 900002            MOV     DPTR,#02H
0135 E0                MOVX    A,@DPTR
0136 20E6F9            JB      ACC.6,?C0043
0139         ?C0044:
                                           ; SOURCE LINE # 306
0139 900009            MOV     DPTR,#09H
013C 7485              MOV     A,#085H
013E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 307
013F 22                RET     
0140         ?C0042:
0140 E500        E     MOV     A,wIndex
0142 B40312            CJNE    A,#03H,?C0046
                                           ; SOURCE LINE # 308
0145 120000      R     LCALL   L?0567
0148 F0                MOVX    @DPTR,A
0149         ?C0047:
                                           ; SOURCE LINE # 309
0149 900002            MOV     DPTR,#02H
014C E0                MOVX    A,@DPTR
014D 20E6F9            JB      ACC.6,?C0047
0150         ?C0048:
                                           ; SOURCE LINE # 310
0150 900009            MOV     DPTR,#09H
0153 7407              MOV     A,#07H
0155 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 311
0156 22                RET     
0157         ?C0046:
0157 E500        E     MOV     A,wIndex
0159 B40412            CJNE    A,#04H,?C0050
                                           ; SOURCE LINE # 312
015C 120000      R     LCALL   L?0567
015F F0                MOVX    @DPTR,A
0160         ?C0051:
                                           ; SOURCE LINE # 313
0160 900002            MOV     DPTR,#02H
0163 E0                MOVX    A,@DPTR
0164 20E6F9            JB      ACC.6,?C0051
0167         ?C0052:
                                           ; SOURCE LINE # 314
0167 900009            MOV     DPTR,#09H
016A 7409              MOV     A,#09H
016C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
016D 22                RET     
016E         ?C0050:
                                           ; SOURCE LINE # 316
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 44  

016E         ?C0489:
016E 020000      R     LJMP    ?C0505
                                           ; SOURCE LINE # 318
                                           ; SOURCE LINE # 320
0171         ?C0036:
                                           ; SOURCE LINE # 321
0171         ?C0490:
0171 020000      R     LJMP    ?C0505
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
0174         ?C0033:
                                           ; SOURCE LINE # 325
0174 BD0219            CJNE    R5,#02H,?C0056
0177 E500        E     MOV     A,wValue+01H
0179 7015              JNZ     ?C0056
017B E500        E     MOV     A,wIndex+01H
017D B48110            CJNE    A,#081H,?C0056
                                           ; SOURCE LINE # 326
0180 900000      E     MOV     DPTR,#bEndpoint1Status
0183 E0                MOVX    A,@DPTR
0184 4401              ORL     A,#01H
0186 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 327
0187 900001            MOV     DPTR,#01H
018A E0                MOVX    A,@DPTR
018B 4404              ORL     A,#04H
018D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 328
018E 8024              SJMP    ?C0055
0190         ?C0056:
                                           ; SOURCE LINE # 329
0190 E500        E     MOV     A,bRequestType
0192 541F              ANL     A,#01FH
0194 FF                MOV     R7,A
0195 BF0219            CJNE    R7,#02H,?C0058
0198 E500        E     MOV     A,wValue+01H
019A 7015              JNZ     ?C0058
019C E500        E     MOV     A,wIndex+01H
019E B48510            CJNE    A,#085H,?C0058
                                           ; SOURCE LINE # 331
01A1 900000      E     MOV     DPTR,#bEndpoint5Status
01A4 E0                MOVX    A,@DPTR
01A5 4401              ORL     A,#01H
01A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 332
01A8 900001            MOV     DPTR,#01H
01AB E0                MOVX    A,@DPTR
01AC 4440              ORL     A,#040H
01AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 333
01AF 8003              SJMP    ?C0055
01B1         ?C0058:
                                           ; SOURCE LINE # 334
01B1         ?C0491:
01B1 020000      R     LJMP    ?C0505
                                           ; SOURCE LINE # 336
01B4         ?C0055:
                                           ; SOURCE LINE # 337
01B4 120000      R     LCALL   L?0567
01B7 F0                MOVX    @DPTR,A
01B8         ?C0060:
                                           ; SOURCE LINE # 338
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 45  

01B8 900002            MOV     DPTR,#02H
01BB E0                MOVX    A,@DPTR
01BC 20E603            JB      ACC.6,$ + 6H
01BF 020000      R     LJMP    ?C0018
01C2 80F4              SJMP    ?C0060
                                           ; SOURCE LINE # 339
                                           ; SOURCE LINE # 340
01C4         ?C0062:
                                           ; SOURCE LINE # 342
01C4 120000      R     LCALL   L?0567
01C7 F0                MOVX    @DPTR,A
01C8         ?C0063:
                                           ; SOURCE LINE # 343
01C8 900002            MOV     DPTR,#02H
01CB E0                MOVX    A,@DPTR
01CC 20E6F9            JB      ACC.6,?C0063
01CF         ?C0064:
                                           ; SOURCE LINE # 344
01CF 900000            MOV     DPTR,#00H
01D2 E500        E     MOV     A,wValue+01H
01D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 346
01D5 E4                CLR     A
01D6 900000      E     MOV     DPTR,#bConfigValue
01D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 347
01DA 900000      E     MOV     DPTR,#bAltSetting
01DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 348
01DE 7F01              MOV     R7,#01H
01E0 120000      R     LCALL   _ConstructStreamRelatedInfo
                                           ; SOURCE LINE # 368
01E3 E500        E     MOV     A,bFWLoadState
01E5 6003              JZ      $ + 5H
01E7 020000      R     LJMP    ?C0018
                                           ; SOURCE LINE # 369
01EA 900016            MOV     DPTR,#016H
01ED E0                MOVX    A,@DPTR
01EE 4410              ORL     A,#010H
01F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
01F1 22                RET     
                                           ; SOURCE LINE # 371
01F2         ?C0066:
                                           ; SOURCE LINE # 372
01F2 E500        E     MOV     A,bRequestType
01F4 541F              ANL     A,#01FH
01F6 6401              XRL     A,#01H
01F8 7039              JNZ     ?C0067
                                           ; SOURCE LINE # 373
01FA 900000      E     MOV     DPTR,#bDMICInput
01FD E0                MOVX    A,@DPTR
01FE 7004              JNZ     ?C0068
0200 7F02              MOV     R7,#02H
0202 8002              SJMP    ?C0069
0204         ?C0068:
0204 7F04              MOV     R7,#04H
0206         ?C0069:
0206 8F00        R     MOV     i,R7
                                           ; SOURCE LINE # 374
0208 300025      E     JNB     xEnableHID,?C0070
020B E500        E     MOV     A,wIndex+01H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 46  

020D B50020      R     CJNE    A,i,?C0070
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 377
0210 120000      E     LCALL   ExCallBackFun_ToROM
                                           ; SOURCE LINE # 379
0213 900000      E     MOV     DPTR,#pfUSBHIDStandCtrl
0216 E0                MOVX    A,@DPTR
0217 FE                MOV     R6,A
0218 A3                INC     DPTR
0219 E0                MOVX    A,@DPTR
021A AA06              MOV     R2,AR6
021C F9                MOV     R1,A
021D 120000      E     LCALL   ?C?ICALL
0220 8E00        R     MOV     wBytes2Send,R6
0222 8F00        R     MOV     wBytes2Send+01H,R7
                                           ; SOURCE LINE # 381
0224 120000      E     LCALL   ExCallBackFun_ToRAM
                                           ; SOURCE LINE # 383
0227 E500        R     MOV     A,wBytes2Send+01H
0229 4500        R     ORL     A,wBytes2Send
022B 6003              JZ      $ + 5H
022D 020000      R     LJMP    USBINPRO
                                           ; SOURCE LINE # 384
                                           ; SOURCE LINE # 385
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
0230         ?C0070:
                                           ; SOURCE LINE # 388
0230         ?C0492:
                                           ; SOURCE LINE # 389
0230 020000      R     LJMP    ?C0505
0233         ?C0067:
0233 E500        E     MOV     A,bRequestType
0235 541F              ANL     A,#01FH
0237 6003              JZ      $ + 5H
0239 020000      R     LJMP    ?C0018
                                           ; SOURCE LINE # 390
023C E500        E     MOV     A,wValue
023E 24FE              ADD     A,#0FEH
0240 6015              JZ      ?C0077
0242 14                DEC     A
0243 602C              JZ      ?C0080
0245 24FD              ADD     A,#0FDH
0247 605F              JZ      ?C0093
0249 14                DEC     A
024A 606E              JZ      ?C0094
024C 2406              ADD     A,#06H
024E 6003              JZ      $ + 5H
0250 020000      R     LJMP    ?C0095
                                           ; SOURCE LINE # 391
0253         ?C0076:
                                           ; SOURCE LINE # 392
0253 E4                CLR     A
0254 FF                MOV     R7,A
                                           ; SOURCE LINE # 393
                                           ; SOURCE LINE # 394
0255 8053              SJMP    ?C0494
                                           ; SOURCE LINE # 395
0257         ?C0077:
                                           ; SOURCE LINE # 403
0257 E4                CLR     A
0258 FF                MOV     R7,A
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 47  

0259 120000      R     LCALL   _ConstructStreamRelatedInfo
                                           ; SOURCE LINE # 404
025C 300004      E     JNB     xHighSpdMode,?C0078
                                           ; SOURCE LINE # 405
025F 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 406
0261 8002              SJMP    ?C0495
0263         ?C0078:
                                           ; SOURCE LINE # 407
0263 7F15              MOV     R7,#015H
0265         ?C0495:
0265 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 408
0268         ?C0079:
                                           ; SOURCE LINE # 409
0268 120000      E     LCALL   GetConfigLength
026B 8E00        R     MOV     wBytes2Send,R6
026D 8F00        R     MOV     wBytes2Send+01H,R7
                                           ; SOURCE LINE # 410
026F 8079              SJMP    ?C0496
                                           ; SOURCE LINE # 412
                                           ; SOURCE LINE # 414
0271         ?C0080:
                                           ; SOURCE LINE # 415
0271 E500        E     MOV     A,wValue+01H
0273 24FA              ADD     A,#0FAH
0275 5002              JNC     ?C0087
0277 800A              SJMP    ?C0088
                                           ; SOURCE LINE # 416
                                           ; SOURCE LINE # 417
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 419
                                           ; SOURCE LINE # 420
                                           ; SOURCE LINE # 421
0279         ?C0087:
                                           ; SOURCE LINE # 422
0279 E500        E     MOV     A,wValue+01H
027B 242F              ADD     A,#02FH
027D FF                MOV     R7,A
027E 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 423
0281 800F              SJMP    ?C0081
                                           ; SOURCE LINE # 424
0283         ?C0088:
                                           ; SOURCE LINE # 427
0283 7F02              MOV     R7,#02H
0285 120000      E     LCALL   _EX_CallBackFunction
0288 EF                MOV     A,R7
0289 7003              JNZ     ?C0089
                                           ; SOURCE LINE # 428
028B         ?C0493:
028B 020000      R     LJMP    ?C0505
                                           ; SOURCE LINE # 430
028E         ?C0089:
                                           ; SOURCE LINE # 431
028E 7800        R     MOV     R0,#LOW bHookString
0290 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
0292         ?C0081:
                                           ; SOURCE LINE # 434
0292 7800        R     MOV     R0,#LOW bHookString
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 48  

0294 E6                MOV     A,@R0
0295 7002              JNZ     ?C0091
                                           ; SOURCE LINE # 435
                                           ; SOURCE LINE # 436
0297 8015              SJMP    ?C0498
0299         ?C0091:
                                           ; SOURCE LINE # 437
0299 850082      E     MOV     DPL,wTabAddr+01H
029C 850083      E     MOV     DPH,wTabAddr
029F E4                CLR     A
02A0 93                MOVC    A,@A+DPTR
02A1 750000      R     MOV     wBytes2Send,#00H
02A4 F500        R     MOV     wBytes2Send+01H,A
                                           ; SOURCE LINE # 438
                                           ; SOURCE LINE # 439
02A6 8048              SJMP    USBINPRO
                                           ; SOURCE LINE # 440
02A8         ?C0093:
                                           ; SOURCE LINE # 441
02A8 7F35              MOV     R7,#035H
02AA         ?C0494:
02AA 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 442
02AD E4                CLR     A
02AE         ?C0498:
02AE FF                MOV     R7,A
02AF FE                MOV     R6,A
02B0 120000      E     LCALL   _GetTab
02B3 750000      R     MOV     wBytes2Send,#00H
02B6 8F00        R     MOV     wBytes2Send+01H,R7
                                           ; SOURCE LINE # 443
02B8 8036              SJMP    USBINPRO
                                           ; SOURCE LINE # 444
02BA         ?C0094:
                                           ; SOURCE LINE # 445
02BA 7F29              MOV     R7,#029H
02BC 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 446
02BF 850000      R     MOV     wSentCnt,wTabAddr
02C2 850000      R     MOV     wSentCnt+01H,wTabAddr+01H
                                           ; SOURCE LINE # 447
02C5 E4                CLR     A
02C6 FF                MOV     R7,A
02C7 FE                MOV     R6,A
02C8 120000      E     LCALL   _GetTab
02CB 8F00        R     MOV     i,R7
                                           ; SOURCE LINE # 448
02CD 120000      E     LCALL   _SetPtrTabById
                                           ; SOURCE LINE # 449
02D0 7F03              MOV     R7,#03H
02D2 7E00              MOV     R6,#00H
02D4 120000      E     LCALL   _GetTab
02D7 8F00        R     MOV     wBytes2Send,R7
                                           ; SOURCE LINE # 450
02D9 7F02              MOV     R7,#02H
02DB 7E00              MOV     R6,#00H
02DD 120000      E     LCALL   _GetTab
02E0 8F00        R     MOV     wBytes2Send+01H,R7
                                           ; SOURCE LINE # 451
02E2 850000      E     MOV     wTabAddr,wSentCnt
02E5 850000      E     MOV     wTabAddr+01H,wSentCnt+01H
                                           ; SOURCE LINE # 452
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 49  

02E8 AE00        R     MOV     R6,wBytes2Send
02EA         ?C0496:
02EA 020000      R     LJMP    _XmitEp0
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
02ED         ?C0095:
                                           ; SOURCE LINE # 456
02ED         ?C0497:
02ED 020000      R     LJMP    ?C0505
                                           ; SOURCE LINE # 458
                                           ; SOURCE LINE # 459
02F0         USBINPRO:
                                           ; SOURCE LINE # 460
02F0 D3                SETB    C
02F1 E500        R     MOV     A,wBytes2Send+01H
02F3 9500        E     SUBB    A,wLength+01H
02F5 E500        R     MOV     A,wBytes2Send
02F7 9500        E     SUBB    A,wLength
02F9 4006              JC      ?C0096
                                           ; SOURCE LINE # 461
02FB 850000      R     MOV     wBytes2Send,wLength
02FE 850000      R     MOV     wBytes2Send+01H,wLength+01H
                                           ; SOURCE LINE # 462
0301         ?C0096:
                                           ; SOURCE LINE # 463
0301 E4                CLR     A
0302 F500        R     MOV     wSentCnt,A
0304 F500        R     MOV     wSentCnt+01H,A
0306         ?C0097:
                                           ; SOURCE LINE # 464
0306 E500        R     MOV     A,wBytes2Send+01H
0308 4500        R     ORL     A,wBytes2Send
030A 7003              JNZ     $ + 5H
030C 020000      R     LJMP    ?C0502
                                           ; SOURCE LINE # 465
030F D3                SETB    C
0310 E500        R     MOV     A,wBytes2Send+01H
0312 9440              SUBB    A,#040H
0314 E500        R     MOV     A,wBytes2Send
0316 9400              SUBB    A,#00H
0318 4046              JC      ?C0099
                                           ; SOURCE LINE # 466
031A E4                CLR     A
031B F500        R     MOV     i,A
031D         ?C0100:
                                           ; SOURCE LINE # 467
031D 7800        R     MOV     R0,#LOW bHookString
031F E6                MOV     A,@R0
0320 700F              JNZ     ?C0103
                                           ; SOURCE LINE # 468
0322 FE                MOV     R6,A
0323 E500        R     MOV     A,wSentCnt+01H
0325 2500        R     ADD     A,i
0327 FF                MOV     R7,A
0328 EE                MOV     A,R6
0329 3500        R     ADDC    A,wSentCnt
032B FE                MOV     R6,A
032C 120000      E     LCALL   _GetTab
                                           ; SOURCE LINE # 469
032F 8004              SJMP    ?C0481
0331         ?C0103:
                                           ; SOURCE LINE # 470
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 50  

0331 120000      R     LCALL   L?0570
0334 FF                MOV     R7,A
0335         ?C0481:
0335 120000      R     LCALL   L?0573
0338 EF                MOV     A,R7
0339 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
033A         ?C0102:
033A 0500        R     INC     i
033C E500        R     MOV     A,i
033E C3                CLR     C
033F 9440              SUBB    A,#040H
0341 40DA              JC      ?C0100
0343         ?C0101:
                                           ; SOURCE LINE # 473
0343 900003            MOV     DPTR,#03H
0346 7440              MOV     A,#040H
0348 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0349 2500        R     ADD     A,wSentCnt+01H
034B F500        R     MOV     wSentCnt+01H,A
034D E4                CLR     A
034E 3500        R     ADDC    A,wSentCnt
0350 F500        R     MOV     wSentCnt,A
                                           ; SOURCE LINE # 475
0352 74C0              MOV     A,#0C0H
0354 2500        R     ADD     A,wBytes2Send+01H
0356 F500        R     MOV     wBytes2Send+01H,A
0358 74FF              MOV     A,#0FFH
035A 3500        R     ADDC    A,wBytes2Send
035C F500        R     MOV     wBytes2Send,A
                                           ; SOURCE LINE # 476
035E 804D              SJMP    ?C0105
0360         ?C0099:
                                           ; SOURCE LINE # 477
0360 E4                CLR     A
0361 F500        R     MOV     i,A
0363         ?C0106:
0363 AF00        R     MOV     R7,i
0365 7E00              MOV     R6,#00H
0367 C3                CLR     C
0368 EF                MOV     A,R7
0369 9500        R     SUBB    A,wBytes2Send+01H
036B EE                MOV     A,R6
036C 9500        R     SUBB    A,wBytes2Send
036E 501F              JNC     ?C0107
                                           ; SOURCE LINE # 478
0370 7800        R     MOV     R0,#LOW bHookString
0372 E6                MOV     A,@R0
0373 700D              JNZ     ?C0109
                                           ; SOURCE LINE # 479
0375 E500        R     MOV     A,wSentCnt+01H
0377 2F                ADD     A,R7
0378 FF                MOV     R7,A
0379 EE                MOV     A,R6
037A 3500        R     ADDC    A,wSentCnt
037C FE                MOV     R6,A
037D 120000      E     LCALL   _GetTab
                                           ; SOURCE LINE # 480
0380 8004              SJMP    ?C0482
0382         ?C0109:
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 51  

                                           ; SOURCE LINE # 481
0382 120000      R     LCALL   L?0570
0385 FF                MOV     R7,A
0386         ?C0482:
0386 120000      R     LCALL   L?0573
0389 EF                MOV     A,R7
038A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 482
                                           ; SOURCE LINE # 483
038B         ?C0108:
038B 0500        R     INC     i
038D 80D4              SJMP    ?C0106
038F         ?C0107:
                                           ; SOURCE LINE # 484
038F 900003            MOV     DPTR,#03H
0392 E500        R     MOV     A,wBytes2Send+01H
0394 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 488
0395 6440              XRL     A,#040H
0397 4500        R     ORL     A,wBytes2Send
0399 700D              JNZ     ?C0111
                                           ; SOURCE LINE # 489
039B 900002            MOV     DPTR,#02H
039E 7450              MOV     A,#050H
03A0 F0                MOVX    @DPTR,A
03A1         ?C0112:
                                           ; SOURCE LINE # 490
03A1 900002            MOV     DPTR,#02H
03A4 E0                MOVX    A,@DPTR
03A5 20E6F9            JB      ACC.6,?C0112
                                           ; SOURCE LINE # 491
03A8         ?C0111:
                                           ; SOURCE LINE # 493
03A8 E4                CLR     A
03A9 F500        R     MOV     wBytes2Send,A
03AB F500        R     MOV     wBytes2Send+01H,A
                                           ; SOURCE LINE # 494
03AD         ?C0105:
                                           ; SOURCE LINE # 495
03AD 120000      R     LCALL   WaitTXEnd
03B0 EF                MOV     A,R7
03B1 6003              JZ      $ + 5H
03B3 020000      R     LJMP    ?C0097
03B6 22                RET     
                                           ; SOURCE LINE # 497
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 503
03B7         ?C0115:
                                           ; SOURCE LINE # 504
03B7         ?C0499:
                                           ; SOURCE LINE # 505
03B7 020000      R     LJMP    ?C0505
                                           ; SOURCE LINE # 506
03BA         ?C0116:
                                           ; SOURCE LINE # 507
03BA 900000      E     MOV     DPTR,#bConfigValue
03BD E0                MOVX    A,@DPTR
03BE 900000      E     MOV     DPTR,#pbEP0Buf
03C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
03C2 900003            MOV     DPTR,#03H
03C5 7401              MOV     A,#01H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 52  

03C7         ?C0488:
03C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 509
03C8         ?C0500:
                                           ; SOURCE LINE # 510
03C8 8052              SJMP    ?C0502
                                           ; SOURCE LINE # 511
03CA         ?C0117:
                                           ; SOURCE LINE # 512
03CA 900001            MOV     DPTR,#01H
03CD E0                MOVX    A,@DPTR
03CE 54FA              ANL     A,#0FAH
03D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 513
03D1 E500        E     MOV     A,wValue+01H
03D3 B40106            CJNE    A,#01H,?C0118
                                           ; SOURCE LINE # 515
03D6 900000      E     MOV     DPTR,#bConfigValue
03D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 519
03DA 800F              SJMP    ?C0119
03DC         ?C0118:
03DC E500        E     MOV     A,wValue+01H
03DE 7008              JNZ     ?C0120
                                           ; SOURCE LINE # 521
03E0 900000      E     MOV     DPTR,#bConfigValue
03E3 E500        E     MOV     A,wValue+01H
03E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
03E6 8003              SJMP    ?C0119
03E8         ?C0120:
                                           ; SOURCE LINE # 526
03E8         ?C0501:
03E8 020000      R     LJMP    ?C0505
                                           ; SOURCE LINE # 528
03EB         ?C0119:
                                           ; SOURCE LINE # 529
03EB 120000      R     LCALL   L?0567
03EE F0                MOVX    @DPTR,A
03EF         ?C0122:
                                           ; SOURCE LINE # 530
03EF 900002            MOV     DPTR,#02H
03F2 E0                MOVX    A,@DPTR
03F3 20E603            JB      ACC.6,$ + 6H
03F6 020000      R     LJMP    ?C0018
03F9 80F4              SJMP    ?C0122
                                           ; SOURCE LINE # 531
                                           ; SOURCE LINE # 533
03FB         ?C0124:
                                           ; SOURCE LINE # 534
03FB E500        E     MOV     A,wIndex+01H
03FD B40106            CJNE    A,#01H,?C0125
                                           ; SOURCE LINE # 535
0400 900000      E     MOV     DPTR,#bAltSetting
0403 E0                MOVX    A,@DPTR
0404 800C              SJMP    ?C0504
0406         ?C0125:
                                           ; SOURCE LINE # 536
0406 E500        E     MOV     A,wIndex+01H
0408 B40306            CJNE    A,#03H,?C0127
                                           ; SOURCE LINE # 537
040B 900000      E     MOV     DPTR,#bDMICAltSetting
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 53  

040E E0                MOVX    A,@DPTR
040F 8001              SJMP    ?C0483
0411         ?C0127:
                                           ; SOURCE LINE # 539
0411 E4                CLR     A
0412         ?C0483:
0412         ?C0504:
0412 900000      E     MOV     DPTR,#pbEP0Buf
0415 F0                MOVX    @DPTR,A
0416         ?C0126:
                                           ; SOURCE LINE # 542
0416 900003            MOV     DPTR,#03H
0419 7401              MOV     A,#01H
041B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 543
041C         ?C0502:
041C 020000      R     LJMP    WaitTXEnd
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
041F         ?C0129:
                                           ; SOURCE LINE # 546
041F E500        E     MOV     A,wIndex+01H
0421 6401              XRL     A,#01H
0423 6003              JZ      $ + 5H
0425 020000      R     LJMP    ?C0130
                                           ; SOURCE LINE # 547
0428 900000      E     MOV     DPTR,#bAltSetting
                                           ; SOURCE LINE # 557
042B 120000      R     LCALL   L?0566
042E F0                MOVX    @DPTR,A
042F         ?C0131:
                                           ; SOURCE LINE # 558
042F 900002            MOV     DPTR,#02H
0432 E0                MOVX    A,@DPTR
0433 20E6F9            JB      ACC.6,?C0131
0436         ?C0132:
                                           ; SOURCE LINE # 559
0436 900000      E     MOV     DPTR,#bAltSetting
0439 E0                MOVX    A,@DPTR
043A 7012              JNZ     ?C0133
                                           ; SOURCE LINE # 563
043C 900014            MOV     DPTR,#014H
043F E0                MOVX    A,@DPTR
0440 4440              ORL     A,#040H
0442 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
0443 E500        E     MOV     A,bCtrlFlowState
0445 54E0              ANL     A,#0E0H
0447 440C              ORL     A,#0CH
0449 F500        E     MOV     bNextFlowState,A
                                           ; SOURCE LINE # 565
044B 020000      E     LJMP    CompletePrpSaveReq
                                           ; SOURCE LINE # 566
044E         ?C0133:
044E 900000      E     MOV     DPTR,#bAltSetting
0451 E0                MOVX    A,@DPTR
0452 C3                CLR     C
0453 9401              SUBB    A,#01H
0455 5003              JNC     $ + 5H
0457 020000      R     LJMP    ?C0018
                                           ; SOURCE LINE # 570
045A E500        E     MOV     A,bCtrlFlowState
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 54  

045C 54E0              ANL     A,#0E0H
045E 4404              ORL     A,#04H
0460 F500        E     MOV     bNextFlowState,A
                                           ; SOURCE LINE # 571
0462 120000      R     LCALL   USBAltBWSwitch
                                           ; SOURCE LINE # 575
0465 E500        E     MOV     A,StrmCurSet+05H
0467 FD                MOV     R5,A
0468 7C00              MOV     R4,#00H
046A 7E03              MOV     R6,#03H
046C 7FE8              MOV     R7,#0E8H
046E 120000      E     LCALL   ?C?UIDIV
0471 8E00        R     MOV     wSentCnt,R6
0473 8F00        R     MOV     wSentCnt+01H,R7
                                           ; SOURCE LINE # 576
0475 90004F            MOV     DPTR,#04FH
0478 E500        R     MOV     A,wSentCnt
047A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 577
047B 90004E            MOV     DPTR,#04EH
047E E500        R     MOV     A,wSentCnt+01H
0480 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 580
0481 900014            MOV     DPTR,#014H
0484 E0                MOVX    A,@DPTR
0485 30E573            JNB     ACC.5,?C0018
                                           ; SOURCE LINE # 581
0488 D200        E     SETB    xStillIssue
                                           ; SOURCE LINE # 583
048A 900011            MOV     DPTR,#011H
048D E0                MOVX    A,@DPTR
048E 900000      E     MOV     DPTR,#wDumpTrigger+01H
0491 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
0492 900012            MOV     DPTR,#012H
0495 E0                MOVX    A,@DPTR
0496 900000      E     MOV     DPTR,#wDumpTrigger
0499 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
049A 900012            MOV     DPTR,#012H
049D E4                CLR     A
049E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 586
049F 900011            MOV     DPTR,#011H
04A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
04A3 900051            MOV     DPTR,#051H
04A6 E0                MOVX    A,@DPTR
04A7 4420              ORL     A,#020H
04A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
04AA 900006            MOV     DPTR,#06H
04AD E0                MOVX    A,@DPTR
04AE 4404              ORL     A,#04H
04B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
04B1 900057            MOV     DPTR,#057H
04B4 E0                MOVX    A,@DPTR
04B5 4401              ORL     A,#01H
04B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 593
04B8 C200        E     CLR     xFrameStart
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 55  

                                           ; SOURCE LINE # 594
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
04BA 22                RET     
04BB         ?C0130:
                                           ; SOURCE LINE # 597
04BB E500        E     MOV     A,wIndex+01H
04BD 6403              XRL     A,#03H
04BF 7022              JNZ     ?C0138
                                           ; SOURCE LINE # 598
                                           ; SOURCE LINE # 599
04C1 900000      E     MOV     DPTR,#bDMICAltSetting
                                           ; SOURCE LINE # 600
04C4 120000      R     LCALL   L?0566
04C7 F0                MOVX    @DPTR,A
04C8         ?C0139:
                                           ; SOURCE LINE # 601
04C8 900002            MOV     DPTR,#02H
04CB E0                MOVX    A,@DPTR
04CC 20E6F9            JB      ACC.6,?C0139
04CF         ?C0140:
                                           ; SOURCE LINE # 602
04CF 900000      E     MOV     DPTR,#bDMICAltSetting
04D2 E0                MOVX    A,@DPTR
04D3 7003              JNZ     ?C0141
                                           ; SOURCE LINE # 603
                                           ; SOURCE LINE # 606
04D5 020000      E     LJMP    DisableDMIC
                                           ; SOURCE LINE # 607
04D8         ?C0141:
                                           ; SOURCE LINE # 608
                                           ; SOURCE LINE # 609
04D8 300020      E     JNB     xHighSpdMode,?C0018
                                           ; SOURCE LINE # 610
04DB 900016            MOV     DPTR,#016H
04DE E0                MOVX    A,@DPTR
04DF 54EF              ANL     A,#0EFH
04E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 612
                                           ; SOURCE LINE # 614
04E2 22                RET     
04E3         ?C0138:
04E3 E500        E     MOV     A,wIndex+01H
04E5 700D              JNZ     ?C0145
                                           ; SOURCE LINE # 615
                                           ; SOURCE LINE # 616
04E7 120000      R     LCALL   L?0567
04EA F0                MOVX    @DPTR,A
04EB         ?C0146:
                                           ; SOURCE LINE # 617
04EB 900002            MOV     DPTR,#02H
04EE E0                MOVX    A,@DPTR
04EF 30E609            JNB     ACC.6,?C0018
04F2 80F7              SJMP    ?C0146
                                           ; SOURCE LINE # 618
04F4         ?C0145:
                                           ; SOURCE LINE # 620
                                           ; SOURCE LINE # 621
04F4         ?C0503:
                                           ; SOURCE LINE # 623
                                           ; SOURCE LINE # 624
                                           ; SOURCE LINE # 625
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 56  

04F4         ?C0505:
04F4 900001            MOV     DPTR,#01H
04F7 E0                MOVX    A,@DPTR
04F8 4401              ORL     A,#01H
04FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 627
                                           ; SOURCE LINE # 628
                                           ; SOURCE LINE # 629
04FB         ?C0018:
04FB 22                RET     
             ; FUNCTION USBStandardCmd (END)

             ; FUNCTION USBClassCmd (BEGIN)
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 633
                                           ; SOURCE LINE # 637
0000 E500        E     MOV     A,wIndex+01H
0002 7003              JNZ     ?C0150
                                           ; SOURCE LINE # 639
0004 020000      R     LJMP    USBVideoControl
                                           ; SOURCE LINE # 640
0007         ?C0150:
0007 E500        E     MOV     A,wIndex+01H
0009 B40103            CJNE    A,#01H,?C0152
                                           ; SOURCE LINE # 642
000C 020000      R     LJMP    USBVideoStreaming
                                           ; SOURCE LINE # 643
000F         ?C0152:
                                           ; SOURCE LINE # 645
000F E500        E     MOV     A,wIndex+01H
0011 B40203            CJNE    A,#02H,?C0154
                                           ; SOURCE LINE # 647
0014 020000      E     LJMP    USBAudioControl
                                           ; SOURCE LINE # 648
0017         ?C0154:
                                           ; SOURCE LINE # 649
0017 E500        E     MOV     A,wIndex+01H
0019 B48303            CJNE    A,#083H,?C0156
                                           ; SOURCE LINE # 651
001C 020000      E     LJMP    USBAudioStreamingEP
                                           ; SOURCE LINE # 652
001F         ?C0156:
                                           ; SOURCE LINE # 653
                                           ; SOURCE LINE # 654
001F 900001            MOV     DPTR,#01H
0022 E0                MOVX    A,@DPTR
0023 4401              ORL     A,#01H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 655
                                           ; SOURCE LINE # 656
0026         ?C0158:
0026 22                RET     
             ; FUNCTION USBClassCmd (END)

             ; FUNCTION USBVendorCmd (BEGIN)
                                           ; SOURCE LINE # 659
                                           ; SOURCE LINE # 660
                                           ; SOURCE LINE # 661
0000 E4                CLR     A
0001 F500        R     MOV     bRecBytesCnt,A
                                           ; SOURCE LINE # 662
0003 F500        R     MOV     wBytes2Send,A
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 57  

0005 F500        R     MOV     wBytes2Send+01H,A
                                           ; SOURCE LINE # 670
0007 E500        E     MOV     A,bRequest
0009 247E              ADD     A,#07EH
000B 6040              JZ      ?C0165
000D 04                INC     A
000E 7056              JNZ     ?C0168
                                           ; SOURCE LINE # 799
0010         ?C0160:
                                           ; SOURCE LINE # 800
;---- Variable 'i' assigned to Register 'R5' ----
0010 E4                CLR     A
0011 FD                MOV     R5,A
0012         ?C0161:
                                           ; SOURCE LINE # 801
;---- Variable 'bTmp' assigned to Register 'R4' ----
0012 AC00        E     MOV     R4,wValue+01H
                                           ; SOURCE LINE # 802
0014 E500        E     MOV     A,wValue
0016 C3                CLR     C
0017 13                RRC     A
0018 F500        E     MOV     wValue,A
001A E500        E     MOV     A,wValue+01H
001C 13                RRC     A
001D F500        E     MOV     wValue+01H,A
                                           ; SOURCE LINE # 803
001F EC                MOV     A,R4
0020 30E003            JNB     ACC.0,?C0163
                                           ; SOURCE LINE # 804
0023 430080      E     ORL     wValue,#080H
                                           ; SOURCE LINE # 805
                                           ; SOURCE LINE # 806
0026         ?C0163:
0026 0D                INC     R5
0027 BD02E8            CJNE    R5,#02H,?C0161
002A         ?C0162:
                                           ; SOURCE LINE # 807
002A 74CE              MOV     A,#0CEH
002C 2500        E     ADD     A,wValue+01H
002E F500        E     MOV     wValue+01H,A
0030 7416              MOV     A,#016H
0032 3500        E     ADDC    A,wValue
0034 F500        E     MOV     wValue,A
                                           ; SOURCE LINE # 808
0036 6300FF      E     XRL     wValue+01H,#0FFH
0039 6300FF      E     XRL     wValue,#0FFH
                                           ; SOURCE LINE # 809
003C 900000      E     MOV     DPTR,#pbEP0Buf
003F E500        E     MOV     A,wValue+01H
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 810
0042 A3                INC     DPTR
0043 E500        E     MOV     A,wValue
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 811
0046 900003            MOV     DPTR,#03H
0049 7402              MOV     A,#02H
                                           ; SOURCE LINE # 812
                                           ; SOURCE LINE # 813
004B 8015              SJMP    ?C0506
                                           ; SOURCE LINE # 815
004D         ?C0165:
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 58  

                                           ; SOURCE LINE # 816
004D 300008      E     JNB     xHighSpdMode,?C0166
                                           ; SOURCE LINE # 817
0050 900000      E     MOV     DPTR,#pbEP0Buf
0053 7401              MOV     A,#01H
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 818
0056 8005              SJMP    ?C0167
0058         ?C0166:
                                           ; SOURCE LINE # 819
0058 E4                CLR     A
0059 900000      E     MOV     DPTR,#pbEP0Buf
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 820
005D         ?C0167:
                                           ; SOURCE LINE # 821
005D 900003            MOV     DPTR,#03H
0060 7401              MOV     A,#01H
0062         ?C0506:
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 822
0063 020000      R     LJMP    WaitTXEnd
                                           ; SOURCE LINE # 823
                                           ; SOURCE LINE # 824
0066         ?C0168:
                                           ; SOURCE LINE # 825
0066 900001            MOV     DPTR,#01H
0069 E0                MOVX    A,@DPTR
006A 4401              ORL     A,#01H
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 826
                                           ; SOURCE LINE # 827
                                           ; SOURCE LINE # 828
006D         ?C0169:
006D 22                RET     
             ; FUNCTION USBVendorCmd (END)

             ; FUNCTION USBAltBWSwitch (BEGIN)
                                           ; SOURCE LINE # 829
                                           ; SOURCE LINE # 830
                                           ; SOURCE LINE # 833
0000 900000      E     MOV     DPTR,#bAltSetting
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 606E              JZ      ?C0184
                                           ; SOURCE LINE # 834
0007 30002E      E     JNB     xHighSpdMode,?C0171
                                           ; SOURCE LINE # 835
000A 14                DEC     A
000B 24FC              ADD     A,#0FCH
000D 5002              JNC     ?C0176
000F 8007              SJMP    ?C0172
                                           ; SOURCE LINE # 836
                                           ; SOURCE LINE # 837
                                           ; SOURCE LINE # 838
                                           ; SOURCE LINE # 839
0011         ?C0176:
                                           ; SOURCE LINE # 840
0011 EF                MOV     A,R7
0012 240D              ADD     A,#0DH
0014 FF                MOV     R7,A
0015 120000      E     LCALL   _SetPtrTabEx
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 59  

                                           ; SOURCE LINE # 841
                                           ; SOURCE LINE # 842
0018         ?C0172:
                                           ; SOURCE LINE # 843
0018 7F04              MOV     R7,#04H
001A 7E00              MOV     R6,#00H
001C 120000      E     LCALL   _GetTab
001F 8F00        R     MOV     wSizeTemp+01H,R7
                                           ; SOURCE LINE # 844
0021 7F05              MOV     R7,#05H
0023 7E00              MOV     R6,#00H
0025 120000      E     LCALL   _GetTab
0028 8F00        R     MOV     wSizeTemp,R7
                                           ; SOURCE LINE # 845
002A E500        R     MOV     A,wSizeTemp
002C 13                RRC     A
002D 13                RRC     A
002E 13                RRC     A
002F 5403              ANL     A,#03H
0031 F500        R     MOV     bTransTemp,A
                                           ; SOURCE LINE # 846
0033 530007      R     ANL     wSizeTemp,#07H
                                           ; SOURCE LINE # 847
0036 802B              SJMP    ?C0177
0038         ?C0171:
                                           ; SOURCE LINE # 848
0038 900000      E     MOV     DPTR,#bAltSetting
003B E0                MOVX    A,@DPTR
003C FF                MOV     R7,A
003D 14                DEC     A
003E 24FC              ADD     A,#0FCH
0040 5002              JNC     ?C0182
0042 8031              SJMP    ?C0184
                                           ; SOURCE LINE # 849
                                           ; SOURCE LINE # 850
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 852
0044         ?C0182:
                                           ; SOURCE LINE # 853
0044 EF                MOV     A,R7
0045 2421              ADD     A,#021H
0047 FF                MOV     R7,A
0048 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 855
                                           ; SOURCE LINE # 857
004B         ?C0178:
                                           ; SOURCE LINE # 858
004B 7F04              MOV     R7,#04H
004D 7E00              MOV     R6,#00H
004F 120000      E     LCALL   _GetTab
0052 8F00        R     MOV     wSizeTemp+01H,R7
                                           ; SOURCE LINE # 859
0054 7F05              MOV     R7,#05H
0056 7E00              MOV     R6,#00H
0058 120000      E     LCALL   _GetTab
005B 8F00        R     MOV     wSizeTemp,R7
                                           ; SOURCE LINE # 860
005D E4                CLR     A
005E F500        R     MOV     bTransTemp,A
                                           ; SOURCE LINE # 861
0060 530003      R     ANL     wSizeTemp,#03H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 60  

                                           ; SOURCE LINE # 862
0063         ?C0177:
                                           ; SOURCE LINE # 863
0063 900011            MOV     DPTR,#011H
0066 E500        R     MOV     A,wSizeTemp+01H
0068 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 864
0069 E500        R     MOV     A,wSizeTemp
006B A3                INC     DPTR
006C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 865
006D A3                INC     DPTR
006E E500        R     MOV     A,bTransTemp
0070 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 866
0071 A3                INC     DPTR
0072 740C              MOV     A,#0CH
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 867
                                           ; SOURCE LINE # 868
0075         ?C0184:
0075 22                RET     
             ; FUNCTION USBAltBWSwitch (END)

             ; FUNCTION USBVideoControl (BEGIN)
                                           ; SOURCE LINE # 869
                                           ; SOURCE LINE # 870
                                           ; SOURCE LINE # 871
0000 E500        E     MOV     A,wIndex
0002 6033              JZ      ?C0196
0004 14                DEC     A
0005 6022              JZ      ?C0192
0007 24FE              ADD     A,#0FEH
0009 6029              JZ      ?C0195
000B 24FD              ADD     A,#0FDH
000D 600F              JZ      ?C0189
000F 2404              ADD     A,#04H
0011 705F              JNZ     ?C0202
                                           ; SOURCE LINE # 872
0013         ?C0186:
                                           ; SOURCE LINE # 873
0013 E500        E     MOV     A,bRequest
0015 B40103            CJNE    A,#01H,?C0187
                                           ; SOURCE LINE # 874
0018 020000      R     LJMP    USBVideoPUSetControl
                                           ; SOURCE LINE # 875
001B         ?C0187:
                                           ; SOURCE LINE # 876
001B 020000      R     LJMP    USBVideoPUGetControl
                                           ; SOURCE LINE # 877
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 879
001E         ?C0189:
                                           ; SOURCE LINE # 880
001E E500        E     MOV     A,bRequest
0020 B40103            CJNE    A,#01H,?C0190
                                           ; SOURCE LINE # 881
0023 020000      E     LJMP    ExtensionUnitSetControl
                                           ; SOURCE LINE # 882
0026         ?C0190:
                                           ; SOURCE LINE # 883
0026 020000      E     LJMP    ExtensionUnitGetControl
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 61  

                                           ; SOURCE LINE # 884
                                           ; SOURCE LINE # 885
                                           ; SOURCE LINE # 886
0029         ?C0192:
                                           ; SOURCE LINE # 887
0029 E500        E     MOV     A,bRequest
002B B40103            CJNE    A,#01H,?C0193
                                           ; SOURCE LINE # 888
002E 020000      E     LJMP    CameraTermSetCtrl
                                           ; SOURCE LINE # 889
0031         ?C0193:
                                           ; SOURCE LINE # 890
0031 020000      E     LJMP    CameraTermGetCtrl
                                           ; SOURCE LINE # 891
                                           ; SOURCE LINE # 904
                                           ; SOURCE LINE # 905
0034         ?C0195:
                                           ; SOURCE LINE # 906
0034 020000      R     LJMP    InvalidCtrlandStall
                                           ; SOURCE LINE # 907
                                           ; SOURCE LINE # 908
0037         ?C0196:
                                           ; SOURCE LINE # 909
0037 E500        E     MOV     A,wValue
0039 6402              XRL     A,#02H
003B 7028              JNZ     ?C0197
                                           ; SOURCE LINE # 912
003D E500        E     MOV     A,bRequest
003F B4810A            CJNE    A,#081H,?C0198
                                           ; SOURCE LINE # 913
0042 900000      E     MOV     DPTR,#bRequestErrorCode
0045 E0                MOVX    A,@DPTR
0046 900000      E     MOV     DPTR,#pbEP0Buf
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 914
004A 8010              SJMP    ?C0199
004C         ?C0198:
004C E500        E     MOV     A,bRequest
004E B48608            CJNE    A,#086H,?C0200
                                           ; SOURCE LINE # 915
0051 900000      E     MOV     DPTR,#pbEP0Buf
0054 7401              MOV     A,#01H
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 916
0057 8003              SJMP    ?C0199
0059         ?C0200:
                                           ; SOURCE LINE # 917
0059 020000      R     LJMP    InvalidRequestandStall
                                           ; SOURCE LINE # 919
005C         ?C0199:
                                           ; SOURCE LINE # 920
005C 900003            MOV     DPTR,#03H
005F 7401              MOV     A,#01H
0061 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 921
0062 020000      R     LJMP    WaitTXEnd
                                           ; SOURCE LINE # 923
0065         ?C0197:
                                           ; SOURCE LINE # 924
0065 900000      E     MOV     DPTR,#bRequestErrorCode
0068 7405              MOV     A,#05H
006A F0                MOVX    @DPTR,A
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 62  

                                           ; SOURCE LINE # 925
006B 900001            MOV     DPTR,#01H
006E E0                MOVX    A,@DPTR
006F 4401              ORL     A,#01H
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 926
                                           ; SOURCE LINE # 927
                                           ; SOURCE LINE # 928
                                           ; SOURCE LINE # 929
0072         ?C0202:
0072 22                RET     
             ; FUNCTION USBVideoControl (END)

             ; FUNCTION _PUSetControl (BEGIN)
                                           ; SOURCE LINE # 967
0000 8B00        R     MOV     pwData,R3
0002 8A00        R     MOV     pwData+01H,R2
0004 8900        R     MOV     pwData+02H,R1
;---- Variable 'CtrlPath' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 968
                                           ; SOURCE LINE # 973
0006 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 1026
                                           ; SOURCE LINE # 1027
0009 E500        R     MOV     A,bSigned
000B 6401              XRL     A,#01H
000D 704D              JNZ     ?C0204
                                           ; SOURCE LINE # 1028
000F 900000      E     MOV     DPTR,#pbIBuf
0012 E0                MOVX    A,@DPTR
0013 F500        R     MOV     CurType+01H,A
                                           ; SOURCE LINE # 1029
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 F500        R     MOV     CurType,A
                                           ; SOURCE LINE # 1030
0019 7F01              MOV     R7,#01H
001B 7E00              MOV     R6,#00H
001D 120000      E     LCALL   _GetTabW
0020 8E00        R     MOV     wsMin,R6
0022 8F00        R     MOV     wsMin+01H,R7
                                           ; SOURCE LINE # 1031
0024 7F03              MOV     R7,#03H
0026 7E00              MOV     R6,#00H
0028 120000      E     LCALL   _GetTabW
;---- Variable 'wsMax' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1032
002B C3                CLR     C
002C E500        R     MOV     A,CurType+01H
002E 9500        R     SUBB    A,wsMin+01H
0030 E500        R     MOV     A,wsMin
0032 6480              XRL     A,#080H
0034 F8                MOV     R0,A
0035 E500        R     MOV     A,CurType
0037 6480              XRL     A,#080H
0039 98                SUBB    A,R0
003A 4050              JC      ?C0507
003C D3                SETB    C
003D E500        R     MOV     A,CurType+01H
003F 9F                SUBB    A,R7
0040 EE                MOV     A,R6
0041 6480              XRL     A,#080H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 63  

0043 F8                MOV     R0,A
0044 E500        R     MOV     A,CurType
0046 6480              XRL     A,#080H
0048 98                SUBB    A,R0
0049 4002              JC      ?C0205
004B         ?C0206:
                                           ; SOURCE LINE # 1033
                                           ; SOURCE LINE # 1034
004B 803F              SJMP    ?C0507
                                           ; SOURCE LINE # 1035
004D         ?C0205:
                                           ; SOURCE LINE # 1036
004D 850082      R     MOV     DPL,pwData+02H
0050 850083      R     MOV     DPH,pwData+01H
0053 E500        R     MOV     A,CurType
0055 F0                MOVX    @DPTR,A
0056 A3                INC     DPTR
0057 E500        R     MOV     A,CurType+01H
0059 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1037
005A 8044              SJMP    ?C0208
005C         ?C0204:
                                           ; SOURCE LINE # 1038
005C 900000      E     MOV     DPTR,#pbIBuf
005F E0                MOVX    A,@DPTR
0060 F500        R     MOV     CurType+01H,A
                                           ; SOURCE LINE # 1039
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 F500        R     MOV     CurType,A
                                           ; SOURCE LINE # 1040
0066 7F01              MOV     R7,#01H
0068 7E00              MOV     R6,#00H
006A 120000      E     LCALL   _GetTabW
006D 8E00        R     MOV     wMinTmp,R6
006F 8F00        R     MOV     wMinTmp+01H,R7
                                           ; SOURCE LINE # 1041
0071 7F03              MOV     R7,#03H
0073 7E00              MOV     R6,#00H
0075 120000      E     LCALL   _GetTabW
;---- Variable 'wMaxTmp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1042
0078 C3                CLR     C
0079 E500        R     MOV     A,CurType+01H
007B 9500        R     SUBB    A,wMinTmp+01H
007D E500        R     MOV     A,CurType
007F 9500        R     SUBB    A,wMinTmp
0081 4009              JC      ?C0210
0083 D3                SETB    C
0084 E500        R     MOV     A,CurType+01H
0086 9F                SUBB    A,R7
0087 E500        R     MOV     A,CurType
0089 9E                SUBB    A,R6
008A 4006              JC      ?C0209
008C         ?C0210:
                                           ; SOURCE LINE # 1043
008C         ?C0507:
008C 120000      R     LCALL   OutofRangeCtrlandStall
                                           ; SOURCE LINE # 1044
008F 7F00              MOV     R7,#00H
0091 22                RET     
                                           ; SOURCE LINE # 1045
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 64  

0092         ?C0209:
                                           ; SOURCE LINE # 1046
0092 AB00        R     MOV     R3,pwData
0094 AA00        R     MOV     R2,pwData+01H
0096 A900        R     MOV     R1,pwData+02H
0098 E500        R     MOV     A,CurType
009A 8500F0      R     MOV     B,CurType+01H
009D 120000      E     LCALL   ?C?ISTPTR
                                           ; SOURCE LINE # 1047
00A0         ?C0208:
                                           ; SOURCE LINE # 1048
                                           ; SOURCE LINE # 1050
00A0 120000      E     LCALL   QueuePrpSaveReq
                                           ; SOURCE LINE # 1051
00A3 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1052
00A5         ?C0207:
00A5 22                RET     
             ; FUNCTION _PUSetControl (END)

             ; FUNCTION USBVideoPUSetControl (BEGIN)
                                           ; SOURCE LINE # 1054
                                           ; SOURCE LINE # 1055
                                           ; SOURCE LINE # 1056
;---- Variable 'bRecBytesCnt' assigned to Register 'R7' ----
0000 E4                CLR     A
0001 FF                MOV     R7,A
0002         ?C0211:
                                           ; SOURCE LINE # 1062
0002 900002            MOV     DPTR,#02H
0005 E0                MOVX    A,@DPTR
0006 30E0F9            JNB     ACC.0,?C0211
0009         ?C0212:
                                           ; SOURCE LINE # 1064
0009 900003            MOV     DPTR,#03H
000C E0                MOVX    A,@DPTR
000D 547F              ANL     A,#07FH
000F FF                MOV     R7,A
                                           ; SOURCE LINE # 1069
0010 7E00              MOV     R6,#00H
0012 7800        E     MOV     R0,#LOW pbIBuf
0014 7C00        E     MOV     R4,#HIGH pbIBuf
0016 7D01              MOV     R5,#01H
0018 7B01              MOV     R3,#01H
001A 7A00        E     MOV     R2,#HIGH pbEP0Buf
001C 7900        E     MOV     R1,#LOW pbEP0Buf
001E 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1071
0021 900002            MOV     DPTR,#02H
0024 E0                MOVX    A,@DPTR
0025 54FE              ANL     A,#0FEH
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1072
0028 E500        E     MOV     A,wValue
002A B40119            CJNE    A,#01H,?C0213
                                           ; SOURCE LINE # 1073
002D 7B01              MOV     R3,#01H
002F 7A00        E     MOV     R2,#HIGH wBacklight
0031 7900        E     MOV     R1,#LOW wBacklight
0033 E4                CLR     A
0034 F500        R     MOV     ?_PUSetControl?BYTE+04H,A
0036 7F40              MOV     R7,#040H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 65  

0038 120000      R     LCALL   _PUSetControl
003B EF                MOV     A,R7
003C 7003              JNZ     $ + 5H
003E 020000      R     LJMP    ?C0215
                                           ; SOURCE LINE # 1075
0041         ?C0214:
                                           ; SOURCE LINE # 1076
0041 D200        E     SETB    xSetPropertyBackLight
                                           ; SOURCE LINE # 1077
0043 020000      R     LJMP    ?C0216
0046         ?C0213:
0046 E500        E     MOV     A,wValue
0048 B40219            CJNE    A,#02H,?C0217
                                           ; SOURCE LINE # 1078
004B 7B01              MOV     R3,#01H
004D 7A00        E     MOV     R2,#HIGH n16Brightness
004F 7900        E     MOV     R1,#LOW n16Brightness
0051 750001      R     MOV     ?_PUSetControl?BYTE+04H,#01H
0054 7F38              MOV     R7,#038H
0056 120000      R     LCALL   _PUSetControl
0059 EF                MOV     A,R7
005A 7003              JNZ     $ + 5H
005C 020000      R     LJMP    ?C0215
                                           ; SOURCE LINE # 1080
005F         ?C0218:
                                           ; SOURCE LINE # 1081
005F D200        E     SETB    xSetPropertyBrightness
                                           ; SOURCE LINE # 1082
0061 020000      R     LJMP    ?C0216
0064         ?C0217:
0064 E500        E     MOV     A,wValue
0066 B40319            CJNE    A,#03H,?C0220
                                           ; SOURCE LINE # 1083
0069 7B01              MOV     R3,#01H
006B 7A00        E     MOV     R2,#HIGH wContrast
006D 7900        E     MOV     R1,#LOW wContrast
006F E4                CLR     A
0070 F500        R     MOV     ?_PUSetControl?BYTE+04H,A
0072 7F39              MOV     R7,#039H
0074 120000      R     LCALL   _PUSetControl
0077 EF                MOV     A,R7
0078 7003              JNZ     $ + 5H
007A 020000      R     LJMP    ?C0215
                                           ; SOURCE LINE # 1085
007D         ?C0221:
                                           ; SOURCE LINE # 1086
007D D200        E     SETB    xSetPropertyContrast
                                           ; SOURCE LINE # 1087
007F 020000      R     LJMP    ?C0216
0082         ?C0220:
0082 E500        E     MOV     A,wValue
0084 B40519            CJNE    A,#05H,?C0223
                                           ; SOURCE LINE # 1088
0087 900000      E     MOV     DPTR,#pbIBuf
008A E0                MOVX    A,@DPTR
008B D3                SETB    C
008C 9402              SUBB    A,#02H
008E 4003              JC      ?C0224
                                           ; SOURCE LINE # 1089
0090 020000      R     LJMP    ?C0509
                                           ; SOURCE LINE # 1091
0093         ?C0224:
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 66  

                                           ; SOURCE LINE # 1092
0093 900000      E     MOV     DPTR,#pbIBuf
0096 E0                MOVX    A,@DPTR
0097 900000      E     MOV     DPTR,#bPwrLine
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1093
009B D200        E     SETB    xSetPropertyPwrLine
                                           ; SOURCE LINE # 1095
                                           ; SOURCE LINE # 1096
009D 020000      R     LJMP    ?C0511
00A0         ?C0223:
00A0 E500        E     MOV     A,wValue
00A2 B40619            CJNE    A,#06H,?C0226
                                           ; SOURCE LINE # 1097
00A5 7B01              MOV     R3,#01H
00A7 7A00        E     MOV     R2,#HIGH n16Hue
00A9 7900        E     MOV     R1,#LOW n16Hue
00AB 750001      R     MOV     ?_PUSetControl?BYTE+04H,#01H
00AE 7F3A              MOV     R7,#03AH
00B0 120000      R     LCALL   _PUSetControl
00B3 EF                MOV     A,R7
00B4 7003              JNZ     $ + 5H
00B6 020000      R     LJMP    ?C0215
                                           ; SOURCE LINE # 1099
00B9         ?C0227:
                                           ; SOURCE LINE # 1100
00B9 D200        E     SETB    xSetPropertyHue
                                           ; SOURCE LINE # 1101
00BB 020000      R     LJMP    ?C0216
00BE         ?C0226:
00BE E500        E     MOV     A,wValue
00C0 B40719            CJNE    A,#07H,?C0229
                                           ; SOURCE LINE # 1102
00C3 7B01              MOV     R3,#01H
00C5 7A00        E     MOV     R2,#HIGH wSaturation
00C7 7900        E     MOV     R1,#LOW wSaturation
00C9 E4                CLR     A
00CA F500        R     MOV     ?_PUSetControl?BYTE+04H,A
00CC 7F3B              MOV     R7,#03BH
00CE 120000      R     LCALL   _PUSetControl
00D1 EF                MOV     A,R7
00D2 7003              JNZ     $ + 5H
00D4 020000      R     LJMP    ?C0215
                                           ; SOURCE LINE # 1104
00D7         ?C0230:
                                           ; SOURCE LINE # 1105
00D7 D200        E     SETB    xSetPropertySaturation
                                           ; SOURCE LINE # 1106
00D9 020000      R     LJMP    ?C0216
00DC         ?C0229:
00DC E500        E     MOV     A,wValue
00DE B40819            CJNE    A,#08H,?C0232
                                           ; SOURCE LINE # 1107
00E1 7B01              MOV     R3,#01H
00E3 7A00        E     MOV     R2,#HIGH wSharpness
00E5 7900        E     MOV     R1,#LOW wSharpness
00E7 E4                CLR     A
00E8 F500        R     MOV     ?_PUSetControl?BYTE+04H,A
00EA 7F3C              MOV     R7,#03CH
00EC 120000      R     LCALL   _PUSetControl
00EF EF                MOV     A,R7
00F0 7003              JNZ     $ + 5H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 67  

00F2 020000      R     LJMP    ?C0215
                                           ; SOURCE LINE # 1109
00F5         ?C0233:
                                           ; SOURCE LINE # 1110
00F5 D200        E     SETB    xSetPropertySharpness
                                           ; SOURCE LINE # 1111
00F7 020000      R     LJMP    ?C0216
00FA         ?C0232:
00FA E500        E     MOV     A,wValue
00FC B40918            CJNE    A,#09H,?C0235
                                           ; SOURCE LINE # 1112
00FF 7B01              MOV     R3,#01H
0101 7A00        E     MOV     R2,#HIGH wGamma
0103 7900        E     MOV     R1,#LOW wGamma
0105 E4                CLR     A
0106 F500        R     MOV     ?_PUSetControl?BYTE+04H,A
0108 7F3D              MOV     R7,#03DH
010A 120000      R     LCALL   _PUSetControl
010D EF                MOV     A,R7
010E 7003              JNZ     $ + 5H
0110 020000      R     LJMP    ?C0215
                                           ; SOURCE LINE # 1114
0113         ?C0236:
                                           ; SOURCE LINE # 1115
0113 D200        E     SETB    xSetPropertyGamma
                                           ; SOURCE LINE # 1116
0115 807E              SJMP    ?C0216
0117         ?C0235:
0117 E500        E     MOV     A,wValue
0119 640A              XRL     A,#0AH
011B 702C              JNZ     ?C0238
                                           ; SOURCE LINE # 1117
011D 900000      E     MOV     DPTR,#bWBTempAuto
0120 E0                MOVX    A,@DPTR
0121 600E              JZ      ?C0239
                                           ; SOURCE LINE # 1118
0123 900000      E     MOV     DPTR,#bRequestErrorCode
0126 7402              MOV     A,#02H
0128 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1119
0129 900001            MOV     DPTR,#01H
012C E0                MOVX    A,@DPTR
012D 4401              ORL     A,#01H
012F F0                MOVX    @DPTR,A
0130 22                RET     
                                           ; SOURCE LINE # 1121
0131         ?C0239:
                                           ; SOURCE LINE # 1122
0131 7B01              MOV     R3,#01H
0133 7A00        E     MOV     R2,#HIGH wWBTemp
0135 7900        E     MOV     R1,#LOW wWBTemp
0137 E4                CLR     A
0138 F500        R     MOV     ?_PUSetControl?BYTE+04H,A
013A 7F3E              MOV     R7,#03EH
013C 120000      R     LCALL   _PUSetControl
013F EF                MOV     A,R7
0140 7003              JNZ     $ + 5H
0142 020000      R     LJMP    ?C0215
                                           ; SOURCE LINE # 1124
0145         ?C0240:
                                           ; SOURCE LINE # 1125
0145 D200        E     SETB    xSetPropertyWBColorTemp
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 68  

                                           ; SOURCE LINE # 1126
0147 804C              SJMP    ?C0216
0149         ?C0238:
0149 E500        E     MOV     A,wValue
014B 640B              XRL     A,#0BH
014D 7026              JNZ     ?C0242
                                           ; SOURCE LINE # 1127
014F 900000      E     MOV     DPTR,#pbIBuf
0152 E0                MOVX    A,@DPTR
0153 D3                SETB    C
0154 9401              SUBB    A,#01H
0156 4003              JC      ?C0243
                                           ; SOURCE LINE # 1128
0158         ?C0509:
0158 020000      R     LJMP    OutofRangeCtrlandStall
                                           ; SOURCE LINE # 1130
015B         ?C0243:
                                           ; SOURCE LINE # 1131
015B 900000      E     MOV     DPTR,#pbIBuf
015E E0                MOVX    A,@DPTR
015F FF                MOV     R7,A
0160 900000      E     MOV     DPTR,#bWBTempAuto
0163 E0                MOVX    A,@DPTR
0164 6F                XRL     A,R7
0165 6002              JZ      ?C0244
                                           ; SOURCE LINE # 1132
0167 D200        E     SETB    xWBTempInfoChange
                                           ; SOURCE LINE # 1133
0169         ?C0244:
                                           ; SOURCE LINE # 1134
0169 900000      E     MOV     DPTR,#pbIBuf
016C E0                MOVX    A,@DPTR
016D 900000      E     MOV     DPTR,#bWBTempAuto
0170 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1135
0171 D200        E     SETB    xSetPropertyWBCTAuto
                                           ; SOURCE LINE # 1137
0173         ?C0510:
                                           ; SOURCE LINE # 1138
0173 8018              SJMP    ?C0511
0175         ?C0242:
0175 E500        E     MOV     A,wValue
0177 B40418            CJNE    A,#04H,?C0246
                                           ; SOURCE LINE # 1141
017A 7B01              MOV     R3,#01H
017C 7A00        E     MOV     R2,#HIGH wGain
017E 7900        E     MOV     R1,#LOW wGain
0180 E4                CLR     A
0181 F500        R     MOV     ?_PUSetControl?BYTE+04H,A
0183 7F3F              MOV     R7,#03FH
0185 120000      R     LCALL   _PUSetControl
0188 EF                MOV     A,R7
0189 6072              JZ      ?C0215
                                           ; SOURCE LINE # 1143
018B         ?C0247:
                                           ; SOURCE LINE # 1144
018B D200        E     SETB    xSetPropertyGain
                                           ; SOURCE LINE # 1146
018D         ?C0511:
018D 120000      E     LCALL   QueuePrpSaveReq
                                           ; SOURCE LINE # 1147
0190 8003              SJMP    ?C0216
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 69  

0192         ?C0246:
                                           ; SOURCE LINE # 1178
                                           ; SOURCE LINE # 1179
0192 020000      R     LJMP    InvalidCtrlandStall
                                           ; SOURCE LINE # 1181
0195         ?C0216:
                                           ; SOURCE LINE # 1183
0195 E4                CLR     A
0196 900000      E     MOV     DPTR,#bRequestErrorCode
0199 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1184
019A 900002            MOV     DPTR,#02H
019D 7440              MOV     A,#040H
019F F0                MOVX    @DPTR,A
01A0         ?C0249:
                                           ; SOURCE LINE # 1185
01A0 900002            MOV     DPTR,#02H
01A3 E0                MOVX    A,@DPTR
01A4 20E6F9            JB      ACC.6,?C0249
01A7         ?C0250:
                                           ; SOURCE LINE # 1186
01A7 300053      E     JNB     xWBTempInfoChange,?C0215
                                           ; SOURCE LINE # 1187
01AA C200        E     CLR     xWBTempInfoChange
01AC         ?C0252:
                                           ; SOURCE LINE # 1208
01AC 900004            MOV     DPTR,#04H
01AF E0                MOVX    A,@DPTR
01B0 30E104            JNB     ACC.1,?C0253
01B3 A3                INC     DPTR
01B4 E0                MOVX    A,@DPTR
01B5 70F5              JNZ     ?C0252
01B7         ?C0253:
                                           ; SOURCE LINE # 1209
01B7 900000      E     MOV     DPTR,#pbEP1Buf
01BA 7401              MOV     A,#01H
01BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1210
01BD A3                INC     DPTR
01BE 04                INC     A
01BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1211
01C0 E4                CLR     A
01C1 A3                INC     DPTR
01C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1212
01C3 A3                INC     DPTR
01C4 740A              MOV     A,#0AH
01C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1213
01C7 A3                INC     DPTR
01C8 7401              MOV     A,#01H
01CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1214
01CB 900000      E     MOV     DPTR,#bWBTempAuto
01CE E0                MOVX    A,@DPTR
01CF FD                MOV     R5,A
01D0 900000      E     MOV     DPTR,#WBTempCtrl
01D3 6006              JZ      ?C0254
                                           ; SOURCE LINE # 1215
01D5 E4                CLR     A
01D6 93                MOVC    A,@A+DPTR
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 70  

01D7 4404              ORL     A,#04H
                                           ; SOURCE LINE # 1216
01D9 8004              SJMP    ?C0508
01DB         ?C0254:
                                           ; SOURCE LINE # 1217
01DB E4                CLR     A
01DC 93                MOVC    A,@A+DPTR
01DD 54FB              ANL     A,#0FBH
01DF         ?C0508:
01DF 900000      E     MOV     DPTR,#pbEP1Buf+05H
01E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1218
01E3         ?C0255:
                                           ; SOURCE LINE # 1219
01E3 900005            MOV     DPTR,#05H
01E6 7406              MOV     A,#06H
01E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1221
01E9 ED                MOV     A,R5
01EA 6011              JZ      ?C0215
                                           ; SOURCE LINE # 1222
01EC         ?C0257:
                                           ; SOURCE LINE # 1223
01EC 900004            MOV     DPTR,#04H
01EF E0                MOVX    A,@DPTR
01F0 30E104            JNB     ACC.1,?C0258
01F3 A3                INC     DPTR
01F4 E0                MOVX    A,@DPTR
01F5 70F5              JNZ     ?C0257
01F7         ?C0258:
                                           ; SOURCE LINE # 1224
01F7 900005            MOV     DPTR,#05H
01FA 7406              MOV     A,#06H
01FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1225
                                           ; SOURCE LINE # 1226
                                           ; SOURCE LINE # 1258
01FD         ?C0215:
01FD 22                RET     
             ; FUNCTION USBVideoPUSetControl (END)

             ; FUNCTION _PUGetControl (BEGIN)
                                           ; SOURCE LINE # 1262
0000 8F00        R     MOV     CtrlPath,R7
0002 8B00        R     MOV     pwData,R3
0004 8A00        R     MOV     pwData+01H,R2
0006 8900        R     MOV     pwData+02H,R1
                                           ; SOURCE LINE # 1263
                                           ; SOURCE LINE # 1267
0008 750000      E     MOV     pCtrlSet,#HIGH pbVctrl_set
000B 750000      E     MOV     pCtrlSet+01H,#LOW pbVctrl_set
                                           ; SOURCE LINE # 1268
000E 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 1270
0011 E500        R     MOV     A,bSigned
0013 6401              XRL     A,#01H
0015 7013              JNZ     ?C0259
                                           ; SOURCE LINE # 1271
                                           ; SOURCE LINE # 1272
                                           ; SOURCE LINE # 1273
                                           ; SOURCE LINE # 1274
                                           ; SOURCE LINE # 1275
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 71  

0017 120000      R     LCALL   L?0558
                                           ; SOURCE LINE # 1276
001A 850082      R     MOV     DPL,pwData+02H
001D 850083      R     MOV     DPH,pwData+01H
0020 E0                MOVX    A,@DPTR
0021 FF                MOV     R7,A
0022 A3                INC     DPTR
0023 120000      R     LCALL   L?0574
0026 CF                XCH     A,R7
                                           ; SOURCE LINE # 1277
0027 020000      R     LJMP    ?C0512
002A         ?C0259:
                                           ; SOURCE LINE # 1278
002A E4                CLR     A
                                           ; SOURCE LINE # 1279
                                           ; SOURCE LINE # 1280
                                           ; SOURCE LINE # 1281
                                           ; SOURCE LINE # 1282
002B 120000      R     LCALL   L?0558
                                           ; SOURCE LINE # 1283
002E E500        R     MOV     A,CtrlPath
0030 6441              XRL     A,#041H
0032 6014              JZ      ?C0261
                                           ; SOURCE LINE # 1284
0034 AB00        R     MOV     R3,pwData
0036 AA00        R     MOV     R2,pwData+01H
0038 A900        R     MOV     R1,pwData+02H
003A 120000      E     LCALL   ?C?ILDPTR
003D FF                MOV     R7,A
003E 120000      R     LCALL   L?0575
0041 E5F0              MOV     A,B
0043         ?C0512:
0043 F0                MOVX    @DPTR,A
0044 A3                INC     DPTR
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1285
0047 22                RET     
0048         ?C0261:
                                           ; SOURCE LINE # 1286
0048 900000      E     MOV     DPTR,#bPwrLine
004B 120000      R     LCALL   L?0574
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1288
                                           ; SOURCE LINE # 1289
004F         ?C0263:
004F 22                RET     
0050         L?0558:
0050 FF                MOV     R7,A
0051 FE                MOV     R6,A
0052 120000      E     LCALL   _GetTab
0055 850082      R     MOV     DPL,pCtrlSet+01H
0058 850083      R     MOV     DPH,pCtrlSet
005B A3                INC     DPTR
005C A3                INC     DPTR
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
005F 7F01              MOV     R7,#01H
0061 7E00              MOV     R6,#00H
0063 120000      E     LCALL   _GetTabW
0066 850082      R     MOV     DPL,pCtrlSet+01H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 72  

0069 850083      R     MOV     DPH,pCtrlSet
006C A3                INC     DPTR
006D A3                INC     DPTR
006E A3                INC     DPTR
006F EE                MOV     A,R6
0070 F0                MOVX    @DPTR,A
0071 A3                INC     DPTR
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
0074 7F03              MOV     R7,#03H
0076 7E00              MOV     R6,#00H
0078 120000      E     LCALL   _GetTabW
007B E500        R     MOV     A,pCtrlSet+01H
007D 2405              ADD     A,#05H
007F F582              MOV     DPL,A
0081 E4                CLR     A
0082 3500        R     ADDC    A,pCtrlSet
0084 F583              MOV     DPH,A
0086 EE                MOV     A,R6
0087 F0                MOVX    @DPTR,A
0088 A3                INC     DPTR
0089 EF                MOV     A,R7
008A F0                MOVX    @DPTR,A
008B 7F05              MOV     R7,#05H
008D 7E00              MOV     R6,#00H
008F 120000      E     LCALL   _GetTabW
0092 E500        R     MOV     A,pCtrlSet+01H
0094 2407              ADD     A,#07H
0096 F582              MOV     DPL,A
0098 E4                CLR     A
0099 3500        R     ADDC    A,pCtrlSet
009B F583              MOV     DPH,A
009D EE                MOV     A,R6
009E F0                MOVX    @DPTR,A
009F A3                INC     DPTR
00A0 EF                MOV     A,R7
00A1 F0                MOVX    @DPTR,A
00A2 7F07              MOV     R7,#07H
00A4 7E00              MOV     R6,#00H
00A6 120000      E     LCALL   _GetTabW
00A9 E500        R     MOV     A,pCtrlSet+01H
00AB 2409              ADD     A,#09H
00AD F582              MOV     DPL,A
00AF E4                CLR     A
00B0 3500        R     ADDC    A,pCtrlSet
00B2 F583              MOV     DPH,A
00B4 EE                MOV     A,R6
00B5 F0                MOVX    @DPTR,A
00B6 A3                INC     DPTR
00B7 EF                MOV     A,R7
00B8 F0                MOVX    @DPTR,A
00B9 22                RET     
             ; FUNCTION _PUGetControl (END)

             ; FUNCTION USBVideoPUGetControl (BEGIN)
                                           ; SOURCE LINE # 1291
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1297
0000 E4                CLR     A
0001 F500        R     MOV     bAutoCtrl,A
                                           ; SOURCE LINE # 1298
0003 F500        R     MOV     bSupport,A
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 73  

                                           ; SOURCE LINE # 1300
0005 300004      E     JNB     xHighSpdMode,?C0264
                                           ; SOURCE LINE # 1301
0008 7F07              MOV     R7,#07H
                                           ; SOURCE LINE # 1302
000A 8002              SJMP    ?C0513
000C         ?C0264:
                                           ; SOURCE LINE # 1303
000C 7F1B              MOV     R7,#01BH
000E         ?C0513:
000E 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 1304
0011         ?C0265:
                                           ; SOURCE LINE # 1305
0011 7F08              MOV     R7,#08H
0013 7E00              MOV     R6,#00H
0015 120000      E     LCALL   _GetTab
0018 8F00        R     MOV     wbmControls+01H,R7
                                           ; SOURCE LINE # 1306
001A 7F09              MOV     R7,#09H
001C 7E00              MOV     R6,#00H
001E 120000      E     LCALL   _GetTab
0021 8F00        R     MOV     wbmControls,R7
                                           ; SOURCE LINE # 1307
0023 750000      E     MOV     pCtrlSet,#HIGH pbVctrl_set
0026 750000      E     MOV     pCtrlSet+01H,#LOW pbVctrl_set
                                           ; SOURCE LINE # 1308
0029 750000      E     MOV     pWBC,#HIGH pbVctrl_WBC
002C 750000      E     MOV     pWBC+01H,#LOW pbVctrl_WBC
                                           ; SOURCE LINE # 1310
002F E500        E     MOV     A,wValue
0031 B40116            CJNE    A,#01H,?C0266
                                           ; SOURCE LINE # 1311
0034 E500        R     MOV     A,wbmControls
0036 20E003            JB      ACC.0,?C0267
                                           ; SOURCE LINE # 1312
0039 020000      R     LJMP    ?C0532
                                           ; SOURCE LINE # 1314
003C         ?C0267:
                                           ; SOURCE LINE # 1315
003C 7B01              MOV     R3,#01H
003E 7A00        E     MOV     R2,#HIGH wBacklight
0040 7900        E     MOV     R1,#LOW wBacklight
0042 E4                CLR     A
0043 F500        R     MOV     ?_PUGetControl?BYTE+04H,A
0045 7F40              MOV     R7,#040H
                                           ; SOURCE LINE # 1316
0047 020000      R     LJMP    ?C0529
004A         ?C0266:
004A E500        E     MOV     A,wValue
004C B40216            CJNE    A,#02H,?C0270
                                           ; SOURCE LINE # 1317
004F E500        R     MOV     A,wbmControls+01H
0051 20E003            JB      ACC.0,?C0271
                                           ; SOURCE LINE # 1318
0054         ?C0514:
0054 020000      R     LJMP    ?C0532
                                           ; SOURCE LINE # 1320
0057         ?C0271:
                                           ; SOURCE LINE # 1321
0057 7B01              MOV     R3,#01H
0059 7A00        E     MOV     R2,#HIGH n16Brightness
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 74  

005B 7900        E     MOV     R1,#LOW n16Brightness
005D 750001      R     MOV     ?_PUGetControl?BYTE+04H,#01H
0060 7F38              MOV     R7,#038H
0062         ?C0515:
                                           ; SOURCE LINE # 1322
0062 020000      R     LJMP    ?C0529
0065         ?C0270:
0065 E500        E     MOV     A,wValue
0067 B40316            CJNE    A,#03H,?C0273
                                           ; SOURCE LINE # 1323
006A E500        R     MOV     A,wbmControls+01H
006C 20E103            JB      ACC.1,?C0274
                                           ; SOURCE LINE # 1324
006F         ?C0516:
006F 020000      R     LJMP    ?C0532
                                           ; SOURCE LINE # 1326
0072         ?C0274:
                                           ; SOURCE LINE # 1327
0072 7B01              MOV     R3,#01H
0074 7A00        E     MOV     R2,#HIGH wContrast
0076 7900        E     MOV     R1,#LOW wContrast
0078 E4                CLR     A
0079 F500        R     MOV     ?_PUGetControl?BYTE+04H,A
007B 7F39              MOV     R7,#039H
007D         ?C0517:
                                           ; SOURCE LINE # 1328
007D 020000      R     LJMP    ?C0529
0080         ?C0273:
0080 E500        E     MOV     A,wValue
0082 B40516            CJNE    A,#05H,?C0276
                                           ; SOURCE LINE # 1329
0085 E500        R     MOV     A,wbmControls
0087 20E203            JB      ACC.2,?C0277
                                           ; SOURCE LINE # 1330
008A         ?C0518:
008A 020000      R     LJMP    ?C0532
                                           ; SOURCE LINE # 1332
008D         ?C0277:
                                           ; SOURCE LINE # 1333
008D 7B00              MOV     R3,#00H
008F 7A00              MOV     R2,#00H
0091 7900              MOV     R1,#00H
0093 E4                CLR     A
0094 F500        R     MOV     ?_PUGetControl?BYTE+04H,A
0096 7F41              MOV     R7,#041H
0098         ?C0519:
                                           ; SOURCE LINE # 1334
0098 020000      R     LJMP    ?C0529
009B         ?C0276:
009B E500        E     MOV     A,wValue
009D B40616            CJNE    A,#06H,?C0279
                                           ; SOURCE LINE # 1335
00A0 E500        R     MOV     A,wbmControls+01H
00A2 20E203            JB      ACC.2,?C0280
                                           ; SOURCE LINE # 1336
00A5         ?C0520:
00A5 020000      R     LJMP    ?C0532
                                           ; SOURCE LINE # 1338
00A8         ?C0280:
                                           ; SOURCE LINE # 1339
00A8 7B01              MOV     R3,#01H
00AA 7A00        E     MOV     R2,#HIGH n16Hue
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 75  

00AC 7900        E     MOV     R1,#LOW n16Hue
00AE 750001      R     MOV     ?_PUGetControl?BYTE+04H,#01H
00B1 7F3A              MOV     R7,#03AH
00B3         ?C0521:
                                           ; SOURCE LINE # 1340
00B3 020000      R     LJMP    ?C0529
00B6         ?C0279:
00B6 E500        E     MOV     A,wValue
00B8 B40716            CJNE    A,#07H,?C0282
                                           ; SOURCE LINE # 1341
00BB E500        R     MOV     A,wbmControls+01H
00BD 20E303            JB      ACC.3,?C0283
                                           ; SOURCE LINE # 1342
00C0         ?C0522:
00C0 020000      R     LJMP    ?C0532
                                           ; SOURCE LINE # 1344
00C3         ?C0283:
                                           ; SOURCE LINE # 1345
00C3 7B01              MOV     R3,#01H
00C5 7A00        E     MOV     R2,#HIGH wSaturation
00C7 7900        E     MOV     R1,#LOW wSaturation
00C9 E4                CLR     A
00CA F500        R     MOV     ?_PUGetControl?BYTE+04H,A
00CC 7F3B              MOV     R7,#03BH
00CE         ?C0523:
                                           ; SOURCE LINE # 1346
00CE 020000      R     LJMP    ?C0529
00D1         ?C0282:
00D1 E500        E     MOV     A,wValue
00D3 B40816            CJNE    A,#08H,?C0285
                                           ; SOURCE LINE # 1347
00D6 E500        R     MOV     A,wbmControls+01H
00D8 20E403            JB      ACC.4,?C0286
                                           ; SOURCE LINE # 1348
00DB         ?C0524:
00DB 020000      R     LJMP    ?C0532
                                           ; SOURCE LINE # 1350
00DE         ?C0286:
                                           ; SOURCE LINE # 1351
00DE 7B01              MOV     R3,#01H
00E0 7A00        E     MOV     R2,#HIGH wSharpness
00E2 7900        E     MOV     R1,#LOW wSharpness
00E4 E4                CLR     A
00E5 F500        R     MOV     ?_PUGetControl?BYTE+04H,A
00E7 7F3C              MOV     R7,#03CH
00E9         ?C0525:
                                           ; SOURCE LINE # 1352
00E9 020000      R     LJMP    ?C0529
00EC         ?C0285:
00EC E500        E     MOV     A,wValue
00EE B40916            CJNE    A,#09H,?C0288
                                           ; SOURCE LINE # 1353
00F1 E500        R     MOV     A,wbmControls+01H
00F3 20E503            JB      ACC.5,?C0289
                                           ; SOURCE LINE # 1354
00F6         ?C0526:
00F6 020000      R     LJMP    ?C0532
                                           ; SOURCE LINE # 1356
00F9         ?C0289:
                                           ; SOURCE LINE # 1357
00F9 7B01              MOV     R3,#01H
00FB 7A00        E     MOV     R2,#HIGH wGamma
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 76  

00FD 7900        E     MOV     R1,#LOW wGamma
00FF E4                CLR     A
0100 F500        R     MOV     ?_PUGetControl?BYTE+04H,A
0102 7F3D              MOV     R7,#03DH
0104         ?C0527:
                                           ; SOURCE LINE # 1358
0104 020000      R     LJMP    ?C0529
0107         ?C0288:
0107 E500        E     MOV     A,wValue
0109 640A              XRL     A,#0AH
010B 7021              JNZ     ?C0291
                                           ; SOURCE LINE # 1359
010D E500        R     MOV     A,wbmControls+01H
010F 20E602            JB      ACC.6,?C0292
                                           ; SOURCE LINE # 1360
0112         ?C0528:
0112 8071              SJMP    ?C0532
                                           ; SOURCE LINE # 1362
0114         ?C0292:
                                           ; SOURCE LINE # 1363
0114 7B01              MOV     R3,#01H
0116 7A00        E     MOV     R2,#HIGH wWBTemp
0118 7900        E     MOV     R1,#LOW wWBTemp
011A E4                CLR     A
011B F500        R     MOV     ?_PUGetControl?BYTE+04H,A
011D 7F3E              MOV     R7,#03EH
011F 120000      R     LCALL   _PUGetControl
                                           ; SOURCE LINE # 1364
0122 E500        E     MOV     A,bRequest
0124 6481              XRL     A,#081H
0126 7060              JNZ     ?C0269
                                           ; SOURCE LINE # 1365
0128 900005            MOV     DPTR,#05H
012B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1366
012C 805A              SJMP    ?C0269
012E         ?C0291:
012E E500        E     MOV     A,wValue
0130 640B              XRL     A,#0BH
0132 7035              JNZ     ?C0295
                                           ; SOURCE LINE # 1367
0134 E500        R     MOV     A,wbmControls
0136 20E402            JB      ACC.4,?C0296
                                           ; SOURCE LINE # 1368
0139         ?C0530:
0139 804A              SJMP    ?C0532
                                           ; SOURCE LINE # 1370
013B         ?C0296:
                                           ; SOURCE LINE # 1371
013B 7F42              MOV     R7,#042H
013D 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 1372
0140 750001      R     MOV     bAutoCtrl,#01H
                                           ; SOURCE LINE # 1373
0143 E4                CLR     A
0144 FF                MOV     R7,A
0145 FE                MOV     R6,A
0146 120000      E     LCALL   _GetTab
0149 120000      R     LCALL   L?0569
014C A3                INC     DPTR
014D A3                INC     DPTR
014E EF                MOV     A,R7
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 77  

014F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1374
0150 7F01              MOV     R7,#01H
0152 7E00              MOV     R6,#00H
0154 120000      E     LCALL   _GetTab
0157 120000      R     LCALL   L?0569
015A A3                INC     DPTR
015B A3                INC     DPTR
015C A3                INC     DPTR
015D EF                MOV     A,R7
015E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1375
015F 900000      E     MOV     DPTR,#bWBTempAuto
0162 E0                MOVX    A,@DPTR
0163 120000      R     LCALL   L?0569
0166 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1376
0167 801F              SJMP    ?C0269
0169         ?C0295:
0169 E500        E     MOV     A,wValue
016B B40417            CJNE    A,#04H,?C0298
                                           ; SOURCE LINE # 1377
016E E500        R     MOV     A,wbmControls
0170 20E102            JB      ACC.1,?C0299
                                           ; SOURCE LINE # 1378
0173         ?C0531:
0173 8010              SJMP    ?C0532
                                           ; SOURCE LINE # 1380
0175         ?C0299:
                                           ; SOURCE LINE # 1381
0175 7B01              MOV     R3,#01H
0177 7A00        E     MOV     R2,#HIGH wGain
0179 7900        E     MOV     R1,#LOW wGain
017B E4                CLR     A
017C F500        R     MOV     ?_PUGetControl?BYTE+04H,A
017E 7F3F              MOV     R7,#03FH
0180         ?C0529:
0180 120000      R     LCALL   _PUGetControl
                                           ; SOURCE LINE # 1382
0183 8003              SJMP    ?C0269
0185         ?C0298:
                                           ; SOURCE LINE # 1413
                                           ; SOURCE LINE # 1414
0185         ?C0532:
0185 020000      R     LJMP    InvalidCtrlandStall
                                           ; SOURCE LINE # 1416
0188         ?C0269:
                                           ; SOURCE LINE # 1418
0188 E500        E     MOV     A,bRequest
018A 247E              ADD     A,#07EH
018C 6043              JZ      ?C0307
018E 14                DEC     A
018F 6064              JZ      ?C0312
0191 14                DEC     A
0192 7003              JNZ     $ + 5H
0194 020000      R     LJMP    ?C0317
0197 24FE              ADD     A,#0FEH
0199 7003              JNZ     $ + 5H
019B 020000      R     LJMP    ?C0322
019E 14                DEC     A
019F 7003              JNZ     $ + 5H
01A1 020000      R     LJMP    ?C0328
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 78  

01A4 2406              ADD     A,#06H
01A6 6003              JZ      $ + 5H
01A8 020000      R     LJMP    ?C0333
                                           ; SOURCE LINE # 1419
01AB         ?C0302:
                                           ; SOURCE LINE # 1420
01AB E500        R     MOV     A,bAutoCtrl
01AD B40102            CJNE    A,#01H,?C0303
                                           ; SOURCE LINE # 1421
                                           ; SOURCE LINE # 1422
                                           ; SOURCE LINE # 1423
01B0 8005              SJMP    ?C0533
01B2         ?C0303:
                                           ; SOURCE LINE # 1445
                                           ; SOURCE LINE # 1446
01B2 E500        E     MOV     A,wValue
01B4 B4050A            CJNE    A,#05H,?C0305
                                           ; SOURCE LINE # 1447
01B7         ?C0533:
01B7 120000      R     LCALL   L?0569
01BA E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 1448
01BB 120000      R     LCALL   L?0571
                                           ; SOURCE LINE # 1449
01BE 020000      R     LJMP    ?C0540
01C1         ?C0305:
                                           ; SOURCE LINE # 1450
01C1 AA00        R     MOV     R2,pCtrlSet
01C3 A900        R     MOV     R1,pCtrlSet+01H
01C5 120000      R     LCALL   L?0562
                                           ; SOURCE LINE # 1451
01C8 120000      R     LCALL   L?0568
                                           ; SOURCE LINE # 1452
01CB 120000      R     LCALL   L?0565
                                           ; SOURCE LINE # 1453
                                           ; SOURCE LINE # 1454
01CE         ?C0304:
                                           ; SOURCE LINE # 1455
                                           ; SOURCE LINE # 1456
01CE 020000      R     LJMP    ?C0540
                                           ; SOURCE LINE # 1457
01D1         ?C0307:
                                           ; SOURCE LINE # 1458
01D1 E500        R     MOV     A,bAutoCtrl
01D3 B40103            CJNE    A,#01H,?C0308
                                           ; SOURCE LINE # 1459
01D6 020000      R     LJMP    ?C0539
                                           ; SOURCE LINE # 1461
01D9         ?C0308:
                                           ; SOURCE LINE # 1471
                                           ; SOURCE LINE # 1472
01D9 E500        E     MOV     A,wValue
01DB B40508            CJNE    A,#05H,?C0310
                                           ; SOURCE LINE # 1473
01DE 120000      R     LCALL   L?0560
                                           ; SOURCE LINE # 1474
01E1 120000      R     LCALL   L?0571
                                           ; SOURCE LINE # 1476
01E4 800C              SJMP    ?C0309
01E6         ?C0310:
                                           ; SOURCE LINE # 1477
01E6 120000      R     LCALL   L?0560
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 79  

                                           ; SOURCE LINE # 1478
01E9 120000      R     LCALL   L?0568
01EC A3                INC     DPTR
01ED A3                INC     DPTR
01EE A3                INC     DPTR
                                           ; SOURCE LINE # 1479
01EF 120000      R     LCALL   L?0565
                                           ; SOURCE LINE # 1480
                                           ; SOURCE LINE # 1481
01F2         ?C0309:
                                           ; SOURCE LINE # 1482
01F2         ?C0534:
                                           ; SOURCE LINE # 1483
01F2 020000      R     LJMP    ?C0540
                                           ; SOURCE LINE # 1484
01F5         ?C0312:
                                           ; SOURCE LINE # 1485
01F5 E500        R     MOV     A,bAutoCtrl
01F7 B40103            CJNE    A,#01H,?C0313
                                           ; SOURCE LINE # 1486
01FA         ?C0535:
01FA 020000      R     LJMP    ?C0539
                                           ; SOURCE LINE # 1488
01FD         ?C0313:
                                           ; SOURCE LINE # 1498
                                           ; SOURCE LINE # 1499
01FD E500        E     MOV     A,wValue
01FF B4050C            CJNE    A,#05H,?C0315
                                           ; SOURCE LINE # 1500
0202 E500        R     MOV     A,pCtrlSet+01H
0204 2405              ADD     A,#05H
0206 120000      R     LCALL   L?0561
                                           ; SOURCE LINE # 1501
0209 120000      R     LCALL   L?0572
                                           ; SOURCE LINE # 1502
020C 800F              SJMP    ?C0314
020E         ?C0315:
                                           ; SOURCE LINE # 1503
020E E500        R     MOV     A,pCtrlSet+01H
0210 2405              ADD     A,#05H
0212 120000      R     LCALL   L?0561
                                           ; SOURCE LINE # 1504
0215 120000      R     LCALL   L?0576
0218 2405              ADD     A,#05H
                                           ; SOURCE LINE # 1505
021A 120000      R     LCALL   L?0563
                                           ; SOURCE LINE # 1506
                                           ; SOURCE LINE # 1507
021D         ?C0314:
                                           ; SOURCE LINE # 1508
021D         ?C0536:
                                           ; SOURCE LINE # 1509
021D 020000      R     LJMP    ?C0540
                                           ; SOURCE LINE # 1510
0220         ?C0317:
                                           ; SOURCE LINE # 1511
0220 E500        R     MOV     A,bAutoCtrl
0222 B40103            CJNE    A,#01H,?C0318
                                           ; SOURCE LINE # 1512
0225         ?C0537:
0225 020000      R     LJMP    ?C0539
                                           ; SOURCE LINE # 1514
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 80  

0228         ?C0318:
                                           ; SOURCE LINE # 1524
                                           ; SOURCE LINE # 1525
0228 E500        E     MOV     A,wValue
022A B4050C            CJNE    A,#05H,?C0320
                                           ; SOURCE LINE # 1526
022D E500        R     MOV     A,pCtrlSet+01H
022F 2407              ADD     A,#07H
0231 120000      R     LCALL   L?0561
                                           ; SOURCE LINE # 1527
0234 120000      R     LCALL   L?0572
                                           ; SOURCE LINE # 1528
0237 800F              SJMP    ?C0319
0239         ?C0320:
                                           ; SOURCE LINE # 1529
0239 E500        R     MOV     A,pCtrlSet+01H
023B 2407              ADD     A,#07H
023D 120000      R     LCALL   L?0561
                                           ; SOURCE LINE # 1530
0240 120000      R     LCALL   L?0576
0243 2407              ADD     A,#07H
                                           ; SOURCE LINE # 1531
0245 120000      R     LCALL   L?0563
                                           ; SOURCE LINE # 1532
                                           ; SOURCE LINE # 1533
0248         ?C0319:
                                           ; SOURCE LINE # 1534
0248         ?C0538:
                                           ; SOURCE LINE # 1535
0248 020000      R     LJMP    ?C0540
                                           ; SOURCE LINE # 1536
024B         ?C0322:
                                           ; SOURCE LINE # 1537
024B E500        R     MOV     A,bAutoCtrl
024D B40102            CJNE    A,#01H,?C0323
                                           ; SOURCE LINE # 1538
                                           ; SOURCE LINE # 1539
0250 8020              SJMP    ?C0541
0252         ?C0323:
                                           ; SOURCE LINE # 1549
                                           ; SOURCE LINE # 1550
0252 E500        E     MOV     A,wValue
0254 640A              XRL     A,#0AH
0256 701A              JNZ     ?C0325
                                           ; SOURCE LINE # 1551
0258 900000      E     MOV     DPTR,#bWBTempAuto
025B E0                MOVX    A,@DPTR
025C 600B              JZ      ?C0326
                                           ; SOURCE LINE # 1552
025E 120000      R     LCALL   L?0569
0261 A3                INC     DPTR
0262 A3                INC     DPTR
0263 E0                MOVX    A,@DPTR
0264 4404              ORL     A,#04H
0266 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1553
0267 8009              SJMP    ?C0325
0269         ?C0326:
                                           ; SOURCE LINE # 1554
0269 120000      R     LCALL   L?0569
026C A3                INC     DPTR
026D A3                INC     DPTR
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 81  

026E E0                MOVX    A,@DPTR
026F 54FB              ANL     A,#0FBH
0271 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1555
                                           ; SOURCE LINE # 1556
0272         ?C0325:
                                           ; SOURCE LINE # 1557
0272         ?C0541:
0272 120000      R     LCALL   L?0569
0275 A3                INC     DPTR
0276 A3                INC     DPTR
0277 E0                MOVX    A,@DPTR
0278 900000      E     MOV     DPTR,#pbEP0Buf
027B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1558
027C         ?C0324:
                                           ; SOURCE LINE # 1559
027C 900003            MOV     DPTR,#03H
027F 7401              MOV     A,#01H
0281 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1560
0282 8039              SJMP    ?C0301
                                           ; SOURCE LINE # 1561
0284         ?C0328:
                                           ; SOURCE LINE # 1562
0284 E500        R     MOV     A,bAutoCtrl
0286 B40109            CJNE    A,#01H,?C0329
                                           ; SOURCE LINE # 1563
0289 120000      R     LCALL   L?0569
028C A3                INC     DPTR
028D A3                INC     DPTR
028E A3                INC     DPTR
028F E0                MOVX    A,@DPTR
                                           ; SOURCE LINE # 1564
                                           ; SOURCE LINE # 1565
0290 800C              SJMP    ?C0542
0292         ?C0329:
                                           ; SOURCE LINE # 1575
                                           ; SOURCE LINE # 1576
0292 E500        E     MOV     A,wValue
0294 B4050C            CJNE    A,#05H,?C0331
                                           ; SOURCE LINE # 1577
0297 E500        R     MOV     A,pCtrlSet+01H
0299 2409              ADD     A,#09H
029B 120000      R     LCALL   L?0561
029E         ?C0542:
                                           ; SOURCE LINE # 1578
029E 120000      R     LCALL   L?0572
                                           ; SOURCE LINE # 1579
02A1 800F              SJMP    ?C0330
02A3         ?C0331:
                                           ; SOURCE LINE # 1580
02A3 E500        R     MOV     A,pCtrlSet+01H
02A5 2409              ADD     A,#09H
02A7 120000      R     LCALL   L?0561
                                           ; SOURCE LINE # 1581
02AA 120000      R     LCALL   L?0577
02AD 2409              ADD     A,#09H
                                           ; SOURCE LINE # 1582
02AF 120000      R     LCALL   L?0564
                                           ; SOURCE LINE # 1583
                                           ; SOURCE LINE # 1584
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 82  

02B2         ?C0330:
                                           ; SOURCE LINE # 1585
02B2         ?C0540:
02B2 900003            MOV     DPTR,#03H
02B5 E500        R     MOV     A,bTmp
02B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1586
02B8 8003              SJMP    ?C0301
                                           ; SOURCE LINE # 1587
02BA         ?C0333:
                                           ; SOURCE LINE # 1588
02BA         ?C0539:
02BA 020000      R     LJMP    InvalidRequestandStall
                                           ; SOURCE LINE # 1590
02BD         ?C0301:
                                           ; SOURCE LINE # 1591
02BD E4                CLR     A
02BE 900000      E     MOV     DPTR,#bRequestErrorCode
02C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1592
02C2 120000      R     LCALL   WaitTXEnd
                                           ; SOURCE LINE # 1593
02C5         ?C0268:
02C5 22                RET     
             ; FUNCTION USBVideoPUGetControl (END)

             ; FUNCTION _VSProbeCommitGet (BEGIN)
                                           ; SOURCE LINE # 1595
0000 8F00        R     MOV     bRequest,R7
;---- Variable 'bStill' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 1596
                                           ; SOURCE LINE # 1601
0002 ED                MOV     A,R5
0003 6003              JZ      $ + 5H
0005 020000      R     LJMP    ?C0334
                                           ; SOURCE LINE # 1603
0008 F500        R     MOV     wBytes2Send,A
000A 75001A      R     MOV     wBytes2Send+01H,#01AH
                                           ; SOURCE LINE # 1604
000D 900000      E     MOV     DPTR,#pbTmpBuf
0010 04                INC     A
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1605
0012 E4                CLR     A
0013 A3                INC     DPTR
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1606
0015 900000      E     MOV     DPTR,#VideoProbeCommitCtrls
0018 E0                MOVX    A,@DPTR
0019 900000      E     MOV     DPTR,#pbTmpBuf+02H
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1607
001D 900000      E     MOV     DPTR,#VideoProbeCommitCtrls+01H
0020 E0                MOVX    A,@DPTR
0021 900000      E     MOV     DPTR,#pbTmpBuf+03H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1609
0025 750008      R     MOV     i,#08H
0028         ?C0335:
                                           ; SOURCE LINE # 1610
0028 7400        E     MOV     A,#LOW pbTmpBuf
002A 2500        R     ADD     A,i
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 83  

002C F582              MOV     DPL,A
002E E4                CLR     A
002F 3400        E     ADDC    A,#HIGH pbTmpBuf
0031 F583              MOV     DPH,A
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1611
0035 0500        R     INC     i
0037 E500        R     MOV     A,i
0039 B412EC            CJNE    A,#012H,?C0335
003C         ?C0336:
                                           ; SOURCE LINE # 1613
003C 900000      E     MOV     DPTR,#VideoProbeCommitCtrls+02H
003F E0                MOVX    A,@DPTR
0040 F500        R     MOV     i,A
                                           ; SOURCE LINE # 1614
0042 7D01              MOV     R5,#01H
0044 AF00        R     MOV     R7,i
0046 120000      E     LCALL   _GetExResTable
0049 8E00        R     MOV     wTemp,R6
004B 8F00        R     MOV     wTemp+01H,R7
                                           ; SOURCE LINE # 1615
004D 7D02              MOV     R5,#02H
004F AF00        R     MOV     R7,i
0051 120000      E     LCALL   _GetExResTable
0054 E4                CLR     A
0055 8F00        R     MOV     dwTemp+03H,R7
0057 8E00        R     MOV     dwTemp+02H,R6
0059 F500        R     MOV     dwTemp+01H,A
005B F500        R     MOV     dwTemp,A
                                           ; SOURCE LINE # 1616
005D AE00        R     MOV     R6,wTemp
005F AF00        R     MOV     R7,wTemp+01H
0061 FC                MOV     R4,A
0062 FD                MOV     R5,A
0063 AB00        R     MOV     R3,dwTemp+03H
0065 AA00        R     MOV     R2,dwTemp+02H
0067 A900        R     MOV     R1,dwTemp+01H
0069 A800        R     MOV     R0,dwTemp
006B 120000      E     LCALL   ?C?LMUL
006E 8F00        R     MOV     dwTemp+03H,R7
0070 8E00        R     MOV     dwTemp+02H,R6
0072 8D00        R     MOV     dwTemp+01H,R5
0074 8C00        R     MOV     dwTemp,R4
                                           ; SOURCE LINE # 1617
0076 E500        E     MOV     A,StrmCurSet
0078 6401              XRL     A,#01H
007A 7024              JNZ     ?C0338
                                           ; SOURCE LINE # 1621
007C 7B02              MOV     R3,#02H
007E FA                MOV     R2,A
007F F9                MOV     R1,A
0080 F8                MOV     R0,A
0081 120000      E     LCALL   ?C?LMUL
0084 8F00        R     MOV     dwTemp+03H,R7
0086 8E00        R     MOV     dwTemp+02H,R6
0088 8D00        R     MOV     dwTemp+01H,R5
008A 8C00        R     MOV     dwTemp,R4
                                           ; SOURCE LINE # 1626
008C 7D01              MOV     R5,#01H
008E AF00        R     MOV     R7,i
0090 120000      E     LCALL   _CaculateFrmRateV2
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 84  

0093 8F00        R     MOV     i,R7
                                           ; SOURCE LINE # 1630
0095 300004      E     JNB     xHighSpdMode,?C0339
                                           ; SOURCE LINE # 1631
0098 7F49              MOV     R7,#049H
                                           ; SOURCE LINE # 1632
009A 802F              SJMP    ?C0545
009C         ?C0339:
                                           ; SOURCE LINE # 1633
009C 7F4B              MOV     R7,#04BH
009E         ?C0543:
                                           ; SOURCE LINE # 1634
                                           ; SOURCE LINE # 1636
009E 802B              SJMP    ?C0545
00A0         ?C0338:
                                           ; SOURCE LINE # 1640
00A0 AF00        R     MOV     R7,dwTemp+03H
00A2 AE00        R     MOV     R6,dwTemp+02H
00A4 AD00        R     MOV     R5,dwTemp+01H
00A6 AC00        R     MOV     R4,dwTemp
00A8 E4                CLR     A
00A9 7B03              MOV     R3,#03H
00AB FA                MOV     R2,A
00AC F9                MOV     R1,A
00AD F8                MOV     R0,A
00AE 120000      E     LCALL   ?C?LMUL
00B1 8F00        R     MOV     dwTemp+03H,R7
00B3 8E00        R     MOV     dwTemp+02H,R6
00B5 8D00        R     MOV     dwTemp+01H,R5
00B7 8C00        R     MOV     dwTemp,R4
                                           ; SOURCE LINE # 1645
00B9 7D02              MOV     R5,#02H
00BB AF00        R     MOV     R7,i
00BD 120000      E     LCALL   _CaculateFrmRateV2
00C0 8F00        R     MOV     i,R7
                                           ; SOURCE LINE # 1648
00C2 300004      E     JNB     xHighSpdMode,?C0342
                                           ; SOURCE LINE # 1649
00C5 7F4A              MOV     R7,#04AH
00C7         ?C0544:
                                           ; SOURCE LINE # 1650
00C7 8002              SJMP    ?C0545
00C9         ?C0342:
                                           ; SOURCE LINE # 1651
00C9 7F4C              MOV     R7,#04CH
00CB         ?C0545:
00CB 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 1652
                                           ; SOURCE LINE # 1654
00CE         ?C0341:
                                           ; SOURCE LINE # 1655
00CE E500        R     MOV     A,bRequest
00D0 247F              ADD     A,#07FH
00D2 602F              JZ      ?C0348
00D4 24FE              ADD     A,#0FEH
00D6 6016              JZ      ?C0347
00D8 24FC              ADD     A,#0FCH
00DA 6012              JZ      ?C0347
00DC 2405              ADD     A,#05H
00DE 7045              JNZ     ?C0344
                                           ; SOURCE LINE # 1656
00E0         ?C0345:
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 85  

                                           ; SOURCE LINE # 1657
00E0 750080      R     MOV     dwTemp1+03H,#080H
00E3 750096      R     MOV     dwTemp1+02H,#096H
00E6 750098      R     MOV     dwTemp1+01H,#098H
00E9 750000      R     MOV     dwTemp1,#00H
                                           ; SOURCE LINE # 1658
00EC 8037              SJMP    ?C0344
                                           ; SOURCE LINE # 1659
                                           ; SOURCE LINE # 1660
00EE         ?C0347:
                                           ; SOURCE LINE # 1661
00EE E500        R     MOV     A,i
00F0 75F007            MOV     B,#07H
00F3 A4                MUL     AB
00F4 2400        E     ADD     A,#LOW Interval_Idx_Tab+01H
00F6 F582              MOV     DPL,A
00F8 E4                CLR     A
00F9 3400        E     ADDC    A,#HIGH Interval_Idx_Tab+01H
00FB F583              MOV     DPH,A
00FD E4                CLR     A
00FE 93                MOVC    A,@A+DPTR
00FF F500        R     MOV     i,A
                                           ; SOURCE LINE # 1662
                                           ; SOURCE LINE # 1663
0101 8004              SJMP    ?C0546
                                           ; SOURCE LINE # 1664
0103         ?C0348:
                                           ; SOURCE LINE # 1665
0103 900000      E     MOV     DPTR,#VideoProbeCommitCtrls+03H
0106 E0                MOVX    A,@DPTR
0107         ?C0546:
0107 FF                MOV     R7,A
0108 120000      E     LCALL   _GetFPSTableIndex
010B 75F004            MOV     B,#04H
010E EF                MOV     A,R7
010F A4                MUL     AB
0110 2400        E     ADD     A,#LOW FPS_Table
0112 F582              MOV     DPL,A
0114 E5F0              MOV     A,B
0116 3400        E     ADDC    A,#HIGH FPS_Table
0118 F583              MOV     DPH,A
011A 120000      E     LCALL   ?C?LLDCODE
011D 8F00        R     MOV     dwTemp1+03H,R7
011F 8E00        R     MOV     dwTemp1+02H,R6
0121 8D00        R     MOV     dwTemp1+01H,R5
0123 8C00        R     MOV     dwTemp1,R4
                                           ; SOURCE LINE # 1666
                                           ; SOURCE LINE # 1667
0125         ?C0344:
                                           ; SOURCE LINE # 1669
0125 900000      E     MOV     DPTR,#pbTmpBuf+04H
0128 E500        R     MOV     A,dwTemp1+03H
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1670
012B A3                INC     DPTR
012C E500        R     MOV     A,dwTemp1+02H
012E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1671
012F A3                INC     DPTR
0130 E500        R     MOV     A,dwTemp1+01H
0132 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1672
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 86  

0133 A3                INC     DPTR
0134 E500        R     MOV     A,dwTemp1
0136 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1674
0137 900000      E     MOV     DPTR,#pbTmpBuf+012H
013A E500        R     MOV     A,dwTemp+03H
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1675
013D A3                INC     DPTR
013E E500        R     MOV     A,dwTemp+02H
0140 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1676
0141 A3                INC     DPTR
0142 E500        R     MOV     A,dwTemp+01H
0144 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1677
0145 A3                INC     DPTR
0146 E500        R     MOV     A,dwTemp
0148 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1679
0149 E4                CLR     A
014A FF                MOV     R7,A
014B FE                MOV     R6,A
014C 120000      E     LCALL   _GetTab
014F 900000      E     MOV     DPTR,#pbTmpBuf+016H
0152 EF                MOV     A,R7
0153 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1680
0154 7F01              MOV     R7,#01H
0156 7E00              MOV     R6,#00H
0158 120000      E     LCALL   _GetTab
015B 900000      E     MOV     DPTR,#pbTmpBuf+017H
015E EF                MOV     A,R7
015F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1681
0160 7F02              MOV     R7,#02H
0162 7E00              MOV     R6,#00H
0164 120000      E     LCALL   _GetTab
0167 900000      E     MOV     DPTR,#pbTmpBuf+018H
016A EF                MOV     A,R7
016B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1682
016C 7F03              MOV     R7,#03H
016E 7E00              MOV     R6,#00H
0170 120000      E     LCALL   _GetTab
0173 900000      E     MOV     DPTR,#pbTmpBuf+019H
0176 EF                MOV     A,R7
0177 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1683
0178 020000      R     LJMP    ?C0349
017B         ?C0334:
                                           ; SOURCE LINE # 1685
017B 750000      R     MOV     wBytes2Send,#00H
017E 75000B      R     MOV     wBytes2Send+01H,#0BH
                                           ; SOURCE LINE # 1686
0181 900000      E     MOV     DPTR,#StillProbeCommitCtrls
0184 E0                MOVX    A,@DPTR
0185 900000      E     MOV     DPTR,#pbTmpBuf
0188 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1687
0189 900000      E     MOV     DPTR,#StillProbeCommitCtrls+01H
018C E0                MOVX    A,@DPTR
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 87  

018D 900000      E     MOV     DPTR,#pbTmpBuf+01H
0190 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1688
0191 E4                CLR     A
0192 A3                INC     DPTR
0193 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1690
0194 900000      E     MOV     DPTR,#StillProbeCommitCtrls+02H
0197 E0                MOVX    A,@DPTR
0198 F500        R     MOV     i,A
                                           ; SOURCE LINE # 1691
019A 7D01              MOV     R5,#01H
019C AF00        R     MOV     R7,i
019E 120000      E     LCALL   _GetExResTable
01A1 8E00        R     MOV     wTemp,R6
01A3 8F00        R     MOV     wTemp+01H,R7
                                           ; SOURCE LINE # 1692
01A5 7D02              MOV     R5,#02H
01A7 AF00        R     MOV     R7,i
01A9 120000      E     LCALL   _GetExResTable
01AC E4                CLR     A
01AD 8F00        R     MOV     dwTemp+03H,R7
01AF 8E00        R     MOV     dwTemp+02H,R6
01B1 F500        R     MOV     dwTemp+01H,A
01B3 F500        R     MOV     dwTemp,A
                                           ; SOURCE LINE # 1693
01B5 AE00        R     MOV     R6,wTemp
01B7 AF00        R     MOV     R7,wTemp+01H
01B9 FC                MOV     R4,A
01BA FD                MOV     R5,A
01BB AB00        R     MOV     R3,dwTemp+03H
01BD AA00        R     MOV     R2,dwTemp+02H
01BF A900        R     MOV     R1,dwTemp+01H
01C1 A800        R     MOV     R0,dwTemp
01C3 120000      E     LCALL   ?C?LMUL
01C6 8F00        R     MOV     dwTemp+03H,R7
01C8 8E00        R     MOV     dwTemp+02H,R6
01CA 8D00        R     MOV     dwTemp+01H,R5
01CC 8C00        R     MOV     dwTemp,R4
                                           ; SOURCE LINE # 1695
01CE E500        E     MOV     A,StrmCurSet+06H
01D0 B40119            CJNE    A,#01H,?C0350
                                           ; SOURCE LINE # 1696
01D3 300004      E     JNB     xHighSpdMode,?C0351
                                           ; SOURCE LINE # 1697
01D6 7F49              MOV     R7,#049H
                                           ; SOURCE LINE # 1698
01D8 8002              SJMP    ?C0547
01DA         ?C0351:
                                           ; SOURCE LINE # 1699
01DA 7F4B              MOV     R7,#04BH
01DC         ?C0547:
01DC 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 1700
01DF         ?C0352:
                                           ; SOURCE LINE # 1701
01DF AF00        R     MOV     R7,dwTemp+03H
01E1 AE00        R     MOV     R6,dwTemp+02H
01E3 AD00        R     MOV     R5,dwTemp+01H
01E5 AC00        R     MOV     R4,dwTemp
01E7 E4                CLR     A
01E8 7B02              MOV     R3,#02H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 88  

                                           ; SOURCE LINE # 1702
01EA 8017              SJMP    ?C0548
01EC         ?C0350:
                                           ; SOURCE LINE # 1703
01EC 300004      E     JNB     xHighSpdMode,?C0354
                                           ; SOURCE LINE # 1704
01EF 7F4A              MOV     R7,#04AH
                                           ; SOURCE LINE # 1705
01F1 8002              SJMP    ?C0549
01F3         ?C0354:
                                           ; SOURCE LINE # 1706
01F3 7F4C              MOV     R7,#04CH
01F5         ?C0549:
01F5 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 1707
01F8         ?C0355:
                                           ; SOURCE LINE # 1708
01F8 AF00        R     MOV     R7,dwTemp+03H
01FA AE00        R     MOV     R6,dwTemp+02H
01FC AD00        R     MOV     R5,dwTemp+01H
01FE AC00        R     MOV     R4,dwTemp
0200 E4                CLR     A
0201 7B03              MOV     R3,#03H
0203         ?C0548:
0203 FA                MOV     R2,A
0204 F9                MOV     R1,A
0205 F8                MOV     R0,A
0206 120000      E     LCALL   ?C?LMUL
0209 8F00        R     MOV     dwTemp+03H,R7
020B 8E00        R     MOV     dwTemp+02H,R6
020D 8D00        R     MOV     dwTemp+01H,R5
020F 8C00        R     MOV     dwTemp,R4
                                           ; SOURCE LINE # 1709
0211         ?C0353:
                                           ; SOURCE LINE # 1711
0211 900000      E     MOV     DPTR,#pbTmpBuf+03H
0214 E500        R     MOV     A,dwTemp+03H
0216 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1712
0217 A3                INC     DPTR
0218 E500        R     MOV     A,dwTemp+02H
021A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1713
021B A3                INC     DPTR
021C E500        R     MOV     A,dwTemp+01H
021E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1714
021F A3                INC     DPTR
0220 E500        R     MOV     A,dwTemp
0222 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1717
0223 E4                CLR     A
0224 FF                MOV     R7,A
0225 FE                MOV     R6,A
0226 120000      E     LCALL   _GetTab
0229 900000      E     MOV     DPTR,#pbTmpBuf+07H
022C EF                MOV     A,R7
022D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1718
022E 7F01              MOV     R7,#01H
0230 7E00              MOV     R6,#00H
0232 120000      E     LCALL   _GetTab
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 89  

0235 900000      E     MOV     DPTR,#pbTmpBuf+08H
0238 EF                MOV     A,R7
0239 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1719
023A 7F02              MOV     R7,#02H
023C 7E00              MOV     R6,#00H
023E 120000      E     LCALL   _GetTab
0241 900000      E     MOV     DPTR,#pbTmpBuf+09H
0244 EF                MOV     A,R7
0245 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1720
0246 7F03              MOV     R7,#03H
0248 7E00              MOV     R6,#00H
024A 120000      E     LCALL   _GetTab
024D 900000      E     MOV     DPTR,#pbTmpBuf+0AH
0250 EF                MOV     A,R7
0251 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1721
0252         ?C0349:
                                           ; SOURCE LINE # 1722
0252 D3                SETB    C
0253 E500        R     MOV     A,wBytes2Send+01H
0255 9500        E     SUBB    A,wLength+01H
0257 E500        R     MOV     A,wBytes2Send
0259 9500        E     SUBB    A,wLength
025B 4006              JC      ?C0356
                                           ; SOURCE LINE # 1723
025D 850000      R     MOV     wBytes2Send,wLength
0260 850000      R     MOV     wBytes2Send+01H,wLength+01H
                                           ; SOURCE LINE # 1724
0263         ?C0356:
                                           ; SOURCE LINE # 1730
0263 AE00        R     MOV     R6,wBytes2Send
0265 AF00        R     MOV     R7,wBytes2Send+01H
0267 7800        E     MOV     R0,#LOW pbEP0Buf
0269 7C00        E     MOV     R4,#HIGH pbEP0Buf
026B 7D01              MOV     R5,#01H
026D 7B01              MOV     R3,#01H
026F 7A00        E     MOV     R2,#HIGH pbTmpBuf
0271 7900        E     MOV     R1,#LOW pbTmpBuf
0273 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 1731
0276 900003            MOV     DPTR,#03H
0279 E500        R     MOV     A,wBytes2Send+01H
027B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1733
027C 020000      R     LJMP    WaitTXEnd
             ; FUNCTION _VSProbeCommitGet (END)

             ; FUNCTION USBVideoStreaming (BEGIN)
                                           ; SOURCE LINE # 1736
                                           ; SOURCE LINE # 1737
                                           ; SOURCE LINE # 1741
0000 E500        E     MOV     A,bRequest
0002 247F              ADD     A,#07FH
0004 24FD              ADD     A,#0FDH
0006 4003              JC      $ + 5H
0008 020000      R     LJMP    ?C0390
000B 24FD              ADD     A,#0FDH
000D 7003              JNZ     $ + 5H
000F 020000      R     LJMP    ?C0390
0012 2486              ADD     A,#086H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 90  

0014 6003              JZ      $ + 5H
0016 020000      R     LJMP    ?C0397
                                           ; SOURCE LINE # 1742
0019         ?C0359:
                                           ; SOURCE LINE # 1743
0019 E500        E     MOV     A,wValue
001B 24FE              ADD     A,#0FEH
001D 6013              JZ      ?C0363
001F 14                DEC     A
0020 6052              JZ      ?C0370
0022 14                DEC     A
0023 604F              JZ      ?C0370
0025 14                DEC     A
0026 7003              JNZ     $ + 5H
0028 020000      R     LJMP    ?C0376
002B 2404              ADD     A,#04H
002D 6003              JZ      $ + 5H
002F 020000      R     LJMP    ?C0553
                                           ; SOURCE LINE # 1744
                                           ; SOURCE LINE # 1745
0032         ?C0363:
                                           ; SOURCE LINE # 1746
0032 900002            MOV     DPTR,#02H
0035 E0                MOVX    A,@DPTR
0036 30E0F9            JNB     ACC.0,?C0363
0039         ?C0364:
                                           ; SOURCE LINE # 1747
0039 900003            MOV     DPTR,#03H
003C E0                MOVX    A,@DPTR
003D 547F              ANL     A,#07FH
003F F500        R     MOV     bRecBytesCnt,A
                                           ; SOURCE LINE # 1748
0041 E4                CLR     A
0042 F500        R     MOV     i,A
0044         ?C0365:
0044 E500        R     MOV     A,i
0046 C3                CLR     C
0047 9500        R     SUBB    A,bRecBytesCnt
0049 501E              JNC     ?C0366
                                           ; SOURCE LINE # 1749
004B 7400        E     MOV     A,#LOW pbEP0Buf
004D 2500        R     ADD     A,i
004F F582              MOV     DPL,A
0051 E4                CLR     A
0052 3400        E     ADDC    A,#HIGH pbEP0Buf
0054 F583              MOV     DPH,A
0056 E0                MOVX    A,@DPTR
0057 FF                MOV     R7,A
0058 7400        E     MOV     A,#LOW pbIBuf
005A 2500        R     ADD     A,i
005C F582              MOV     DPL,A
005E E4                CLR     A
005F 3400        E     ADDC    A,#HIGH pbIBuf
0061 F583              MOV     DPH,A
0063 EF                MOV     A,R7
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1750
0065 0500        R     INC     i
0067 80DB              SJMP    ?C0365
0069         ?C0366:
                                           ; SOURCE LINE # 1751
0069 900002            MOV     DPTR,#02H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 91  

006C E0                MOVX    A,@DPTR
006D 54FE              ANL     A,#0FEH
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1754
0070 E4                CLR     A
0071 FF                MOV     R7,A
                                           ; SOURCE LINE # 1755
0072 8040              SJMP    ?C0550
                                           ; SOURCE LINE # 1756
                                           ; SOURCE LINE # 1757
0074         ?C0370:
                                           ; SOURCE LINE # 1758
0074 900002            MOV     DPTR,#02H
0077 E0                MOVX    A,@DPTR
0078 30E0F9            JNB     ACC.0,?C0370
007B         ?C0371:
                                           ; SOURCE LINE # 1759
007B 900003            MOV     DPTR,#03H
007E E0                MOVX    A,@DPTR
007F 547F              ANL     A,#07FH
0081 F500        R     MOV     bRecBytesCnt,A
                                           ; SOURCE LINE # 1760
0083 E4                CLR     A
0084 F500        R     MOV     i,A
0086         ?C0372:
0086 E500        R     MOV     A,i
0088 C3                CLR     C
0089 9500        R     SUBB    A,bRecBytesCnt
008B 501E              JNC     ?C0373
                                           ; SOURCE LINE # 1761
008D 7400        E     MOV     A,#LOW pbEP0Buf
008F 2500        R     ADD     A,i
0091 F582              MOV     DPL,A
0093 E4                CLR     A
0094 3400        E     ADDC    A,#HIGH pbEP0Buf
0096 F583              MOV     DPH,A
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A 7400        E     MOV     A,#LOW pbIBuf
009C 2500        R     ADD     A,i
009E F582              MOV     DPL,A
00A0 E4                CLR     A
00A1 3400        E     ADDC    A,#HIGH pbIBuf
00A3 F583              MOV     DPH,A
00A5 EF                MOV     A,R7
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1762
00A7 0500        R     INC     i
00A9 80DB              SJMP    ?C0372
00AB         ?C0373:
                                           ; SOURCE LINE # 1763
00AB 900002            MOV     DPTR,#02H
00AE E0                MOVX    A,@DPTR
00AF 54FE              ANL     A,#0FEH
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1766
00B2 7F01              MOV     R7,#01H
00B4         ?C0550:
00B4 120000      E     LCALL   _ConstructStrmCurSet
                                           ; SOURCE LINE # 1767
00B7 804D              SJMP    ?C0360
                                           ; SOURCE LINE # 1768
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 92  

00B9         ?C0376:
                                           ; SOURCE LINE # 1769
00B9 900002            MOV     DPTR,#02H
00BC E0                MOVX    A,@DPTR
00BD 30E0F9            JNB     ACC.0,?C0376
00C0         ?C0377:
                                           ; SOURCE LINE # 1770
00C0 900003            MOV     DPTR,#03H
00C3 E0                MOVX    A,@DPTR
00C4 547F              ANL     A,#07FH
00C6 F500        R     MOV     bRecBytesCnt,A
                                           ; SOURCE LINE # 1771
00C8 E4                CLR     A
00C9 F500        R     MOV     i,A
00CB         ?C0378:
00CB E500        R     MOV     A,i
00CD C3                CLR     C
00CE 9500        R     SUBB    A,bRecBytesCnt
00D0 501E              JNC     ?C0379
                                           ; SOURCE LINE # 1772
00D2 7400        E     MOV     A,#LOW pbEP0Buf
00D4 2500        R     ADD     A,i
00D6 F582              MOV     DPL,A
00D8 E4                CLR     A
00D9 3400        E     ADDC    A,#HIGH pbEP0Buf
00DB F583              MOV     DPH,A
00DD E0                MOVX    A,@DPTR
00DE FF                MOV     R7,A
00DF 7400        E     MOV     A,#LOW pbIBuf
00E1 2500        R     ADD     A,i
00E3 F582              MOV     DPL,A
00E5 E4                CLR     A
00E6 3400        E     ADDC    A,#HIGH pbIBuf
00E8 F583              MOV     DPH,A
00EA EF                MOV     A,R7
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1773
00EC 0500        R     INC     i
00EE 80DB              SJMP    ?C0378
00F0         ?C0379:
                                           ; SOURCE LINE # 1774
00F0 900002            MOV     DPTR,#02H
00F3 E0                MOVX    A,@DPTR
00F4 54FE              ANL     A,#0FEH
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1775
00F7 900000      E     MOV     DPTR,#pbIBuf
00FA E0                MOVX    A,@DPTR
00FB B40108            CJNE    A,#01H,?C0360
                                           ; SOURCE LINE # 1776
00FE E500        E     MOV     A,bCtrlFlowState
0100 B48403            CJNE    A,#084H,?C0360
                                           ; SOURCE LINE # 1778
0103 7500A8      E     MOV     bNextFlowState,#0A8H
                                           ; SOURCE LINE # 1779
                                           ; SOURCE LINE # 1780
                                           ; SOURCE LINE # 1781
                                           ; SOURCE LINE # 1782
                                           ; SOURCE LINE # 1785
0106         ?C0360:
                                           ; SOURCE LINE # 1786
0106 900002            MOV     DPTR,#02H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 93  

0109 E0                MOVX    A,@DPTR
010A 4440              ORL     A,#040H
010C F0                MOVX    @DPTR,A
010D         ?C0385:
                                           ; SOURCE LINE # 1787
010D 900002            MOV     DPTR,#02H
0110 E0                MOVX    A,@DPTR
0111 30E626            JNB     ACC.6,?C0384
0114 80F7              SJMP    ?C0385
                                           ; SOURCE LINE # 1788
                                           ; SOURCE LINE # 1789
                                           ; SOURCE LINE # 1790
                                           ; SOURCE LINE # 1791
                                           ; SOURCE LINE # 1792
0116         ?C0390:
                                           ; SOURCE LINE # 1793
0116 E500        E     MOV     A,wValue
0118 24FE              ADD     A,#0FEH
011A 600A              JZ      ?C0393
011C 14                DEC     A
011D 600B              JZ      ?C0395
011F 14                DEC     A
0120 6008              JZ      ?C0395
0122 2403              ADD     A,#03H
0124 700B              JNZ     ?C0396
                                           ; SOURCE LINE # 1794
                                           ; SOURCE LINE # 1795
0126         ?C0393:
                                           ; SOURCE LINE # 1796
0126 E4                CLR     A
0127 FD                MOV     R5,A
                                           ; SOURCE LINE # 1797
0128 8002              SJMP    ?C0552
                                           ; SOURCE LINE # 1798
                                           ; SOURCE LINE # 1799
012A         ?C0395:
                                           ; SOURCE LINE # 1800
012A 7D01              MOV     R5,#01H
012C         ?C0552:
012C AF00        E     MOV     R7,bRequest
012E 020000      R     LJMP    _VSProbeCommitGet
                                           ; SOURCE LINE # 1801
                                           ; SOURCE LINE # 1802
0131         ?C0396:
                                           ; SOURCE LINE # 1803
0131         ?C0551:
0131 8000              SJMP    ?C0553
                                           ; SOURCE LINE # 1805
                                           ; SOURCE LINE # 1807
                                           ; SOURCE LINE # 1809
0133         ?C0397:
                                           ; SOURCE LINE # 1810
0133         ?C0553:
0133 900001            MOV     DPTR,#01H
0136 E0                MOVX    A,@DPTR
0137 4401              ORL     A,#01H
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1812
                                           ; SOURCE LINE # 1813
013A         ?C0384:
013A 22                RET     
             ; FUNCTION USBVideoStreaming (END)
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 94  


             ; FUNCTION InvalidCtrlandStall (BEGIN)
                                           ; SOURCE LINE # 1815
                                           ; SOURCE LINE # 1816
                                           ; SOURCE LINE # 1817
0000 900000      E     MOV     DPTR,#bRequestErrorCode
0003 7406              MOV     A,#06H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1818
0006 900001            MOV     DPTR,#01H
0009 E0                MOVX    A,@DPTR
000A 4401              ORL     A,#01H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1819
000D 22                RET     
             ; FUNCTION InvalidCtrlandStall (END)

             ; FUNCTION OutofRangeCtrlandStall (BEGIN)
                                           ; SOURCE LINE # 1821
                                           ; SOURCE LINE # 1822
                                           ; SOURCE LINE # 1823
0000 900000      E     MOV     DPTR,#bRequestErrorCode
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1824
0006 900001            MOV     DPTR,#01H
0009 E0                MOVX    A,@DPTR
000A 4401              ORL     A,#01H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1825
000D 22                RET     
             ; FUNCTION OutofRangeCtrlandStall (END)

             ; FUNCTION InvalidRequestandStall (BEGIN)
                                           ; SOURCE LINE # 1827
                                           ; SOURCE LINE # 1828
                                           ; SOURCE LINE # 1829
0000 900000      E     MOV     DPTR,#bRequestErrorCode
0003 7407              MOV     A,#07H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1830
0006 900001            MOV     DPTR,#01H
0009 E0                MOVX    A,@DPTR
000A 4401              ORL     A,#01H
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1831
000D 22                RET     
             ; FUNCTION InvalidRequestandStall (END)

             ; FUNCTION WaitTXEnd (BEGIN)
                                           ; SOURCE LINE # 1833
                                           ; SOURCE LINE # 1834
0000         ?C0401:
                                           ; SOURCE LINE # 1835
0000 900002            MOV     DPTR,#02H
0003 E0                MOVX    A,@DPTR
0004 30E10A            JNB     ACC.1,?C0402
                                           ; SOURCE LINE # 1836
0007 43D801            ORL     WDTCON,#01H
                                           ; SOURCE LINE # 1837
000A E500        E     MOV     A,bInt0State
000C 60F2              JZ      ?C0401
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 95  

                                           ; SOURCE LINE # 1838
000E 7F00              MOV     R7,#00H
0010 22                RET     
                                           ; SOURCE LINE # 1839
0011         ?C0402:
                                           ; SOURCE LINE # 1840
0011 7F01              MOV     R7,#01H
                                           ; SOURCE LINE # 1841
0013         ?C0404:
0013 22                RET     
             ; FUNCTION WaitTXEnd (END)

             ; FUNCTION _XmitEp0 (BEGIN)
                                           ; SOURCE LINE # 1843
;---- Variable 'TotalLen' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1844
                                           ; SOURCE LINE # 1850
0000 D3                SETB    C
0001 E500        E     MOV     A,wLength+01H
0003 9F                SUBB    A,R7
0004 E500        E     MOV     A,wLength
0006 9E                SUBB    A,R6
0007 4004              JC      ?C0405
                                           ; SOURCE LINE # 1851
0009 8E00        E     MOV     wLength,R6
000B 8F00        E     MOV     wLength+01H,R7
                                           ; SOURCE LINE # 1852
000D         ?C0405:
                                           ; SOURCE LINE # 1853
000D 7800        R     MOV     R0,#LOW wAddr
000F A600        E     MOV     @R0,wTabAddr
0011 08                INC     R0
0012 A600        E     MOV     @R0,wTabAddr+01H
                                           ; SOURCE LINE # 1854
0014 E4                CLR     A
0015 08                INC     R0
0016 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1855
0017 7800        R     MOV     R0,#LOW bAutoGenState
0019 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1856
001A 7800        R     MOV     R0,#LOW bCustomDescState
001C F6                MOV     @R0,A
                                           ; SOURCE LINE # 1857
001D 7800        R     MOV     R0,#LOW j
001F F6                MOV     @R0,A
                                           ; SOURCE LINE # 1860
0020 08                INC     R0
0021 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1861
0022 7800        R     MOV     R0,#LOW bAudioGen
0024 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1862
0025 7800        R     MOV     R0,#LOW bSupFormat
0027 76FF              MOV     @R0,#0FFH
0029         ?C0408:
                                           ; SOURCE LINE # 1864
                                           ; SOURCE LINE # 1866
0029 7800        R     MOV     R0,#LOW bAutoGenState
002B E6                MOV     A,@R0
002C 7015              JNZ     ?C0409
                                           ; SOURCE LINE # 1867
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 96  

002E 7800        R     MOV     R0,#LOW bCustomDescState
0030 E6                MOV     A,@R0
0031 7035              JNZ     ?C0411
                                           ; SOURCE LINE # 1868
0033 7800        R     MOV     R0,#LOW wAddr
0035 E6                MOV     A,@R0
0036 FE                MOV     R6,A
0037 08                INC     R0
0038 E6                MOV     A,@R0
0039 FF                MOV     R7,A
003A 120000      E     LCALL   _GetTabMapByte
003D 7800        R     MOV     R0,#LOW Idx
003F A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1869
                                           ; SOURCE LINE # 1870
0041 8025              SJMP    ?C0411
0043         ?C0409:
                                           ; SOURCE LINE # 1871
0043 7800        R     MOV     R0,#LOW j
0045 E6                MOV     A,@R0
0046 2400        E     ADD     A,#LOW pbFmtTab+045H
0048 F582              MOV     DPL,A
004A E4                CLR     A
004B 3400        E     ADDC    A,#HIGH pbFmtTab+045H
004D F583              MOV     DPH,A
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 7800        R     MOV     R0,#LOW Idx
0053 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1872
0054 7800        R     MOV     R0,#LOW j
0056 06                INC     @R0
                                           ; SOURCE LINE # 1873
0057 BFFF0E            CJNE    R7,#0FFH,?C0411
                                           ; SOURCE LINE # 1874
005A 7800        R     MOV     R0,#LOW wAddr+01H
005C 06                INC     @R0
005D E6                MOV     A,@R0
005E 18                DEC     R0
005F 7001              JNZ     ?C0476
0061 06                INC     @R0
0062         ?C0476:
                                           ; SOURCE LINE # 1875
0062 E4                CLR     A
0063 7800        R     MOV     R0,#LOW bAutoGenState
0065 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1876
0066 80C1              SJMP    ?C0408
                                           ; SOURCE LINE # 1877
                                           ; SOURCE LINE # 1878
0068         ?C0411:
                                           ; SOURCE LINE # 1880
0068 7800        R     MOV     R0,#LOW bCustomDescState
006A E6                MOV     A,@R0
006B 6003              JZ      $ + 5H
006D 020000      R     LJMP    ?C0413
                                           ; SOURCE LINE # 1881
0070 7800        R     MOV     R0,#LOW j
0072 E6                MOV     A,@R0
0073 6046              JZ      ?C0414
0075 7800        R     MOV     R0,#LOW Idx
0077 E6                MOV     A,@R0
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 97  

0078 FF                MOV     R7,A
0079 6402              XRL     A,#02H
007B 6005              JZ      ?C0415
007D EF                MOV     A,R7
007E 643F              XRL     A,#03FH
0080 7039              JNZ     ?C0414
0082         ?C0415:
                                           ; SOURCE LINE # 1882
                                           ; SOURCE LINE # 1883
0082 900000      E     MOV     DPTR,#bDMICInput
0085 E0                MOVX    A,@DPTR
0086 7006              JNZ     ?C0416
                                           ; SOURCE LINE # 1884
                                           ; SOURCE LINE # 1885
0088 7800        R     MOV     R0,#LOW Idx
008A 7684              MOV     @R0,#084H
                                           ; SOURCE LINE # 1887
008C 802D              SJMP    ?C0414
008E         ?C0416:
                                           ; SOURCE LINE # 1888
                                           ; SOURCE LINE # 1892
008E 300012      E     JNB     xSetFileExist,?C0418
                                           ; SOURCE LINE # 1894
0091 900000      E     MOV     DPTR,#wSetStartAddr+01H
0094 E0                MOVX    A,@DPTR
0095 245F              ADD     A,#05FH
0097 F500        E     MOV     wTabAddr+01H,A
0099 900000      E     MOV     DPTR,#wSetStartAddr
009C E0                MOVX    A,@DPTR
009D 3480              ADDC    A,#080H
009F F500        E     MOV     wTabAddr,A
                                           ; SOURCE LINE # 1895
00A1 8006              SJMP    ?C0419
00A3         ?C0418:
                                           ; SOURCE LINE # 1897
00A3 750000      E     MOV     wTabAddr,#HIGH InternalIdxTable+05FH
00A6 750000      E     MOV     wTabAddr+01H,#LOW InternalIdxTable+05FH
                                           ; SOURCE LINE # 1898
00A9         ?C0419:
                                           ; SOURCE LINE # 1899
00A9 AF00        E     MOV     R7,wTabAddr+01H
00AB AE00        E     MOV     R6,wTabAddr
00AD 120000      E     LCALL   _GetTabMapByte
00B0 7800        R     MOV     R0,#LOW Idx
00B2 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1901
00B4 7800        R     MOV     R0,#LOW wAddr
00B6 A600        E     MOV     @R0,wTabAddr
00B8 08                INC     R0
00B9 A600        E     MOV     @R0,wTabAddr+01H
                                           ; SOURCE LINE # 1903
                                           ; SOURCE LINE # 1904
00BB         ?C0414:
                                           ; SOURCE LINE # 1906
00BB 7800        R     MOV     R0,#LOW Idx
00BD E6                MOV     A,@R0
00BE FF                MOV     R7,A
00BF C3                CLR     C
00C0 940D              SUBB    A,#0DH
00C2 4006              JC      ?C0422
00C4 EF                MOV     A,R7
00C5 D3                SETB    C
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 98  

00C6 9432              SUBB    A,#032H
00C8 4009              JC      ?C0421
00CA         ?C0422:
00CA EF                MOV     A,R7
00CB 6401              XRL     A,#01H
00CD 6004              JZ      ?C0421
00CF EF                MOV     A,R7
00D0 B40205            CJNE    A,#02H,?C0420
00D3         ?C0421:
                                           ; SOURCE LINE # 1908
                                           ; SOURCE LINE # 1909
00D3 120000      E     LCALL   _AutoGenDesc
                                           ; SOURCE LINE # 1910
00D6 8031              SJMP    ?C0423
00D8         ?C0420:
00D8 7800        R     MOV     R0,#LOW Idx
00DA E6                MOV     A,@R0
00DB B48315            CJNE    A,#083H,?C0424
                                           ; SOURCE LINE # 1911
                                           ; SOURCE LINE # 1912
00DE 7800        R     MOV     R0,#LOW bDMICStage
00E0 E6                MOV     A,@R0
00E1 06                INC     @R0
00E2 FF                MOV     R7,A
00E3 120000      E     LCALL   _AudioDescGen
                                           ; SOURCE LINE # 1913
00E6 7800        R     MOV     R0,#LOW bAudioGen
00E8 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1914
00EA 900000      E     MOV     DPTR,#bNumOfSup
00ED E0                MOVX    A,@DPTR
00EE 7800        R     MOV     R0,#LOW bSupFormat
00F0 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1915
00F1 8016              SJMP    ?C0423
00F3         ?C0424:
00F3 7800        R     MOV     R0,#LOW Idx
00F5 E6                MOV     A,@R0
00F6 B48409            CJNE    A,#084H,?C0426
                                           ; SOURCE LINE # 1916
                                           ; SOURCE LINE # 1917
00F9 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1919
00FB 7F03              MOV     R7,#03H
00FD 120000      E     LCALL   _EX_CallBackFunction
                                           ; SOURCE LINE # 1921
0100 803A              SJMP    ?C0555
                                           ; SOURCE LINE # 1922
0102         ?C0426:
                                           ; SOURCE LINE # 1923
0102 7800        R     MOV     R0,#LOW Idx
0104 E6                MOV     A,@R0
0105 FF                MOV     R7,A
0106 120000      E     LCALL   _SetPtrTabById
                                           ; SOURCE LINE # 1924
0109         ?C0423:
                                           ; SOURCE LINE # 1926
0109 7800        R     MOV     R0,#LOW Idx
010B E6                MOV     A,@R0
010C FF                MOV     R7,A
010D 6401              XRL     A,#01H
010F 6011              JZ      ?C0430
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 99  

0111 EF                MOV     A,R7
0112 6402              XRL     A,#02H
0114 600C              JZ      ?C0430
0116 7800        R     MOV     R0,#LOW bAutoGenState
0118 E6                MOV     A,@R0
0119 6401              XRL     A,#01H
011B 6005              JZ      ?C0430
011D 08                INC     R0
011E E6                MOV     A,@R0
011F B40107            CJNE    A,#01H,?C0429
0122         ?C0430:
                                           ; SOURCE LINE # 1927
                                           ; SOURCE LINE # 1928
0122 E4                CLR     A
0123 FF                MOV     R7,A
0124 120000      E     LCALL   _GetTabXdata
0127         ?C0554:
                                           ; SOURCE LINE # 1929
0127 8013              SJMP    ?C0555
0129         ?C0429:
0129 7800        R     MOV     R0,#LOW Idx
012B E6                MOV     A,@R0
012C B40C07            CJNE    A,#0CH,?C0432
                                           ; SOURCE LINE # 1932
012F 7800        R     MOV     R0,#LOW bAutoGenState
0131 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1933
0133 020000      R     LJMP    ?C0408
                                           ; SOURCE LINE # 1934
0136         ?C0432:
                                           ; SOURCE LINE # 1935
0136 E4                CLR     A
0137 FF                MOV     R7,A
0138 FE                MOV     R6,A
0139 120000      E     LCALL   _GetTab
013C         ?C0555:
013C 7800        R     MOV     R0,#LOW DescLen
013E A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1936
                                           ; SOURCE LINE # 1938
0140 800B              SJMP    TRANCONF
0142         ?C0413:
                                           ; SOURCE LINE # 1940
0142 850082      E     MOV     DPL,wTabAddr+01H
0145 850083      E     MOV     DPH,wTabAddr
0148 E4                CLR     A
0149 93                MOVC    A,@A+DPTR
014A 7800        R     MOV     R0,#LOW DescLen
014C F6                MOV     @R0,A
                                           ; SOURCE LINE # 1941
                                           ; SOURCE LINE # 1943
014D         TRANCONF:
                                           ; SOURCE LINE # 1944
014D E4                CLR     A
014E 7800        R     MOV     R0,#LOW i
0150 F6                MOV     @R0,A
0151         ?C0435:
0151 7800        R     MOV     R0,#LOW i
0153 E6                MOV     A,@R0
0154 FF                MOV     R7,A
0155 C3                CLR     C
0156 18                DEC     R0
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 100 

0157 96                SUBB    A,@R0
0158 4003              JC      $ + 5H
015A 020000      R     LJMP    ?C0436
                                           ; SOURCE LINE # 1945
015D 7800        R     MOV     R0,#LOW bCustomDescState
015F E6                MOV     A,@R0
0160 B40112            CJNE    A,#01H,?C0438
                                           ; SOURCE LINE # 1946
0163 7E00              MOV     R6,#00H
0165 E500        E     MOV     A,wTabAddr+01H
0167 2F                ADD     A,R7
0168 FF                MOV     R7,A
0169 EE                MOV     A,R6
016A 3500        E     ADDC    A,wTabAddr
016C 8F82              MOV     DPL,R7
016E F583              MOV     DPH,A
0170 E4                CLR     A
0171 93                MOVC    A,@A+DPTR
0172 FF                MOV     R7,A
                                           ; SOURCE LINE # 1947
0173 802B              SJMP    ?C0557
0175         ?C0438:
                                           ; SOURCE LINE # 1948
0175 7800        R     MOV     R0,#LOW Idx
0177 E6                MOV     A,@R0
0178 FF                MOV     R7,A
0179 6401              XRL     A,#01H
017B 6011              JZ      ?C0441
017D EF                MOV     A,R7
017E 6402              XRL     A,#02H
0180 600C              JZ      ?C0441
0182 7800        R     MOV     R0,#LOW bAutoGenState
0184 E6                MOV     A,@R0
0185 6401              XRL     A,#01H
0187 6005              JZ      ?C0441
0189 08                INC     R0
018A E6                MOV     A,@R0
018B B40109            CJNE    A,#01H,?C0440
018E         ?C0441:
                                           ; SOURCE LINE # 1949
                                           ; SOURCE LINE # 1950
018E 7800        R     MOV     R0,#LOW i
0190 E6                MOV     A,@R0
0191 FF                MOV     R7,A
0192 120000      E     LCALL   _GetTabXdata
0195         ?C0556:
                                           ; SOURCE LINE # 1951
0195 8009              SJMP    ?C0557
0197         ?C0440:
                                           ; SOURCE LINE # 1952
0197 7800        R     MOV     R0,#LOW i
0199 E6                MOV     A,@R0
019A FF                MOV     R7,A
019B 7E00              MOV     R6,#00H
019D 120000      E     LCALL   _GetTab
01A0         ?C0557:
01A0 7800        R     MOV     R0,#LOW EP0BUFIdx
01A2 E6                MOV     A,@R0
01A3 2400        E     ADD     A,#LOW pbEP0Buf
01A5 F582              MOV     DPL,A
01A7 E4                CLR     A
01A8 3400        E     ADDC    A,#HIGH pbEP0Buf
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 101 

01AA F583              MOV     DPH,A
01AC EF                MOV     A,R7
01AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1953
                                           ; SOURCE LINE # 1954
01AE         ?C0439:
                                           ; SOURCE LINE # 1956
01AE E500        E     MOV     A,wLength+01H
01B0 1500        E     DEC     wLength+01H
01B2 7002              JNZ     ?C0477
01B4 1500        E     DEC     wLength
01B6         ?C0477:
                                           ; SOURCE LINE # 1957
01B6 7800        R     MOV     R0,#LOW EP0BUFIdx
01B8 06                INC     @R0
                                           ; SOURCE LINE # 1958
01B9 E6                MOV     A,@R0
01BA B44013            CJNE    A,#040H,?C0443
                                           ; SOURCE LINE # 1959
01BD 900003            MOV     DPTR,#03H
01C0 7440              MOV     A,#040H
01C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1960
01C3 120000      R     LCALL   WaitTXEnd
01C6 EF                MOV     A,R7
01C7 7003              JNZ     $ + 5H
01C9 020000      R     LJMP    ?C0445
                                           ; SOURCE LINE # 1961
                                           ; SOURCE LINE # 1962
01CC         ?C0444:
                                           ; SOURCE LINE # 1963
01CC E4                CLR     A
01CD 7800        R     MOV     R0,#LOW EP0BUFIdx
01CF F6                MOV     @R0,A
                                           ; SOURCE LINE # 1964
01D0         ?C0443:
                                           ; SOURCE LINE # 1965
01D0 E500        E     MOV     A,wLength+01H
01D2 4500        E     ORL     A,wLength
01D4 701B              JNZ     ?C0437
                                           ; SOURCE LINE # 1966
01D6 7800        R     MOV     R0,#LOW EP0BUFIdx
01D8 E6                MOV     A,@R0
01D9 FF                MOV     R7,A
01DA 6006              JZ      ?C0447
                                           ; SOURCE LINE # 1967
01DC 900003            MOV     DPTR,#03H
01DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1968
01E0 8015              SJMP    ?C0436
01E2         ?C0447:
                                           ; SOURCE LINE # 1969
01E2 900002            MOV     DPTR,#02H
01E5 7450              MOV     A,#050H
01E7 F0                MOVX    @DPTR,A
01E8         ?C0449:
                                           ; SOURCE LINE # 1970
01E8 900002            MOV     DPTR,#02H
01EB E0                MOVX    A,@DPTR
01EC 30E608            JNB     ACC.6,?C0436
01EF 80F7              SJMP    ?C0449
                                           ; SOURCE LINE # 1971
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 102 

                                           ; SOURCE LINE # 1972
                                           ; SOURCE LINE # 1973
                                           ; SOURCE LINE # 1974
01F1         ?C0437:
01F1 7800        R     MOV     R0,#LOW i
01F3 06                INC     @R0
01F4 020000      R     LJMP    ?C0435
01F7         ?C0436:
                                           ; SOURCE LINE # 1976
01F7 E500        E     MOV     A,wLength+01H
01F9 4500        E     ORL     A,wLength
01FB 7003              JNZ     $ + 5H
01FD 020000      R     LJMP    ?C0407
                                           ; SOURCE LINE # 1977
                                           ; SOURCE LINE # 1978
0200         ?C0451:
                                           ; SOURCE LINE # 1980
0200 7800        R     MOV     R0,#LOW bSupFormat
0202 E6                MOV     A,@R0
0203 C4                SWAP    A
0204 540F              ANL     A,#0FH
0206 FF                MOV     R7,A
0207 18                DEC     R0
0208 E6                MOV     A,@R0
0209 75F005            MOV     B,#05H
020C 84                DIV     AB
020D B50705            CJNE    A,AR7,?C0452
                                           ; SOURCE LINE # 1981
                                           ; SOURCE LINE # 1982
0210 E4                CLR     A
0211 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1983
0212 7800        R     MOV     R0,#LOW bAudioGen
0214 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1984
0215         ?C0452:
                                           ; SOURCE LINE # 1988
0215 7800        R     MOV     R0,#LOW bAutoGenState
0217 E6                MOV     A,@R0
0218 6003              JZ      $ + 5H
021A 020000      R     LJMP    ?C0408
021D 08                INC     R0
021E E6                MOV     A,@R0
021F 6003              JZ      $ + 5H
0221 020000      R     LJMP    ?C0408
                                           ; SOURCE LINE # 1989
                                           ; SOURCE LINE # 1990
0224 08                INC     R0
0225 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1991
0226 900000      E     MOV     DPTR,#pCustomizeDesc
0229 E0                MOVX    A,@DPTR
022A FE                MOV     R6,A
022B A3                INC     DPTR
022C E0                MOVX    A,@DPTR
022D 4E                ORL     A,R6
022E 7003              JNZ     $ + 5H
0230 020000      R     LJMP    ?C0454
                                           ; SOURCE LINE # 1992
                                           ; SOURCE LINE # 1993
0233 E4                CLR     A
0234 08                INC     R0
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 103 

0235 F6                MOV     @R0,A
0236         ?C0455:
0236 900000      E     MOV     DPTR,#pCustomizeDesc
0239 E0                MOVX    A,@DPTR
023A FE                MOV     R6,A
023B A3                INC     DPTR
023C E0                MOVX    A,@DPTR
023D FF                MOV     R7,A
023E F582              MOV     DPL,A
0240 8E83              MOV     DPH,R6
0242 E0                MOVX    A,@DPTR
0243 FD                MOV     R5,A
0244 7800        R     MOV     R0,#LOW k
0246 E6                MOV     A,@R0
0247 FC                MOV     R4,A
0248 C3                CLR     C
0249 9D                SUBB    A,R5
024A 5072              JNC     ?C0454
                                           ; SOURCE LINE # 1994
                                           ; SOURCE LINE # 1995
024C 75F004            MOV     B,#04H
024F EC                MOV     A,R4
0250 120000      E     LCALL   ?C?OFFXADD
0253 E582              MOV     A,DPL
0255 2406              ADD     A,#06H
0257 F582              MOV     DPL,A
0259 E4                CLR     A
025A 3583              ADDC    A,DPH
025C F583              MOV     DPH,A
025E E0                MOVX    A,@DPTR
025F 7057              JNZ     ?C0457
                                           ; SOURCE LINE # 1996
                                           ; SOURCE LINE # 1997
0261 900000      E     MOV     DPTR,#pCustomizeDesc
0264 A3                INC     DPTR
0265 E0                MOVX    A,@DPTR
0266 F582              MOV     DPL,A
0268 8E83              MOV     DPH,R6
026A E6                MOV     A,@R0
026B 75F004            MOV     B,#04H
026E 120000      E     LCALL   ?C?OFFXADD
0271 A3                INC     DPTR
0272 A3                INC     DPTR
0273 A3                INC     DPTR
0274 E0                MOVX    A,@DPTR
0275 7800        R     MOV     R0,#LOW Idx
0277 66                XRL     A,@R0
0278 703E              JNZ     ?C0457
                                           ; SOURCE LINE # 1998
                                           ; SOURCE LINE # 1999
027A 7800        R     MOV     R0,#LOW bCustomDescState
027C 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 2000
027E 8F82              MOV     DPL,R7
0280 8E83              MOV     DPH,R6
0282 08                INC     R0
0283 E6                MOV     A,@R0
0284 FD                MOV     R5,A
0285 75F004            MOV     B,#04H
0288 120000      E     LCALL   ?C?OFFXADD
028B E582              MOV     A,DPL
028D 2404              ADD     A,#04H
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 104 

028F F582              MOV     DPL,A
0291 E4                CLR     A
0292 3583              ADDC    A,DPH
0294 F583              MOV     DPH,A
0296 E0                MOVX    A,@DPTR
0297 F500        E     MOV     wTabAddr,A
0299 A3                INC     DPTR
029A E0                MOVX    A,@DPTR
029B F500        E     MOV     wTabAddr+01H,A
                                           ; SOURCE LINE # 2001
029D 8F82              MOV     DPL,R7
029F 8E83              MOV     DPH,R6
02A1 75F004            MOV     B,#04H
02A4 ED                MOV     A,R5
02A5 120000      E     LCALL   ?C?OFFXADD
02A8 E582              MOV     A,DPL
02AA 2406              ADD     A,#06H
02AC F582              MOV     DPL,A
02AE E4                CLR     A
02AF 3583              ADDC    A,DPH
02B1 F583              MOV     DPH,A
02B3 7401              MOV     A,#01H
02B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2002
02B6 8006              SJMP    ?C0454
                                           ; SOURCE LINE # 2003
                                           ; SOURCE LINE # 2004
                                           ; SOURCE LINE # 2005
02B8         ?C0457:
02B8 7800        R     MOV     R0,#LOW k
02BA 06                INC     @R0
02BB 020000      R     LJMP    ?C0455
                                           ; SOURCE LINE # 2006
02BE         ?C0454:
                                           ; SOURCE LINE # 2007
02BE 7800        R     MOV     R0,#LOW bCustomDescState
02C0 E6                MOV     A,@R0
02C1 6003              JZ      $ + 5H
02C3 020000      R     LJMP    ?C0408
                                           ; SOURCE LINE # 2008
02C6 7800        R     MOV     R0,#LOW wAddr+01H
02C8 06                INC     @R0
02C9 E6                MOV     A,@R0
02CA 18                DEC     R0
02CB 7001              JNZ     ?C0478
02CD 06                INC     @R0
02CE         ?C0478:
                                           ; SOURCE LINE # 2009
02CE 020000      R     LJMP    ?C0408
                                           ; SOURCE LINE # 2010
                                           ; SOURCE LINE # 2011
                                           ; SOURCE LINE # 2012
                                           ; SOURCE LINE # 2013
02D1         ?C0407:
                                           ; SOURCE LINE # 2014
02D1 120000      R     LCALL   WaitTXEnd
                                           ; SOURCE LINE # 2016
02D4 900000      E     MOV     DPTR,#pCustomizeDesc
02D7 E0                MOVX    A,@DPTR
02D8 FE                MOV     R6,A
02D9 A3                INC     DPTR
02DA E0                MOVX    A,@DPTR
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 105 

02DB 4E                ORL     A,R6
02DC 6030              JZ      ?C0445
                                           ; SOURCE LINE # 2017
02DE E4                CLR     A
02DF 7800        R     MOV     R0,#LOW k
02E1 F6                MOV     @R0,A
02E2         ?C0463:
02E2 900000      E     MOV     DPTR,#pCustomizeDesc
02E5 E0                MOVX    A,@DPTR
02E6 FE                MOV     R6,A
02E7 A3                INC     DPTR
02E8 E0                MOVX    A,@DPTR
02E9 F582              MOV     DPL,A
02EB 8E83              MOV     DPH,R6
02ED E0                MOVX    A,@DPTR
02EE FD                MOV     R5,A
02EF 7800        R     MOV     R0,#LOW k
02F1 E6                MOV     A,@R0
02F2 FC                MOV     R4,A
02F3 C3                CLR     C
02F4 9D                SUBB    A,R5
02F5 5017              JNC     ?C0445
                                           ; SOURCE LINE # 2018
02F7 75F004            MOV     B,#04H
02FA EC                MOV     A,R4
02FB 120000      E     LCALL   ?C?OFFXADD
02FE E582              MOV     A,DPL
0300 2406              ADD     A,#06H
0302 F582              MOV     DPL,A
0304 E4                CLR     A
0305 3583              ADDC    A,DPH
0307 F583              MOV     DPH,A
0309 E4                CLR     A
030A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2019
030B 06                INC     @R0
030C 80D4              SJMP    ?C0463
                                           ; SOURCE LINE # 2020
                                           ; SOURCE LINE # 2021
030E         ?C0445:
030E 22                RET     
             ; FUNCTION _XmitEp0 (END)

             ; FUNCTION GetVCControlDef (BEGIN)
                                           ; SOURCE LINE # 2022
                                           ; SOURCE LINE # 2023
                                           ; SOURCE LINE # 2025
0000 7F40              MOV     R7,#040H
0002 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 2027
0005 7F07              MOV     R7,#07H
0007 7E00              MOV     R6,#00H
0009 120000      E     LCALL   _GetTabW
000C 900000      E     MOV     DPTR,#wBacklight
000F EE                MOV     A,R6
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2029
0014 7F38              MOV     R7,#038H
0016 120000      E     LCALL   _SetPtrTabEx
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 106 

                                           ; SOURCE LINE # 2031
0019 7F07              MOV     R7,#07H
001B 7E00              MOV     R6,#00H
001D 120000      E     LCALL   _GetTabW
0020 900000      E     MOV     DPTR,#n16Brightness
0023 EE                MOV     A,R6
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 EF                MOV     A,R7
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2033
0028 7F39              MOV     R7,#039H
002A 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 2035
002D 7F07              MOV     R7,#07H
002F 7E00              MOV     R6,#00H
0031 120000      E     LCALL   _GetTabW
0034 900000      E     MOV     DPTR,#wContrast
0037 EE                MOV     A,R6
0038 F0                MOVX    @DPTR,A
0039 A3                INC     DPTR
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2037
003C 7F41              MOV     R7,#041H
003E 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 2039
0041 7F07              MOV     R7,#07H
0043 7E00              MOV     R6,#00H
0045 120000      E     LCALL   _GetTabW
0048 900000      E     MOV     DPTR,#bPwrLine
004B EF                MOV     A,R7
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2041
004D 7F3A              MOV     R7,#03AH
004F 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 2043
0052 7F07              MOV     R7,#07H
0054 7E00              MOV     R6,#00H
0056 120000      E     LCALL   _GetTabW
0059 900000      E     MOV     DPTR,#n16Hue
005C EE                MOV     A,R6
005D F0                MOVX    @DPTR,A
005E A3                INC     DPTR
005F EF                MOV     A,R7
0060 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2045
0061 7F3B              MOV     R7,#03BH
0063 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 2047
0066 7F07              MOV     R7,#07H
0068 7E00              MOV     R6,#00H
006A 120000      E     LCALL   _GetTabW
006D 900000      E     MOV     DPTR,#wSaturation
0070 EE                MOV     A,R6
0071 F0                MOVX    @DPTR,A
0072 A3                INC     DPTR
0073 EF                MOV     A,R7
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2049
0075 7F3C              MOV     R7,#03CH
0077 120000      E     LCALL   _SetPtrTabEx
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 107 

                                           ; SOURCE LINE # 2051
007A 7F07              MOV     R7,#07H
007C 7E00              MOV     R6,#00H
007E 120000      E     LCALL   _GetTabW
0081 900000      E     MOV     DPTR,#wSharpness
0084 EE                MOV     A,R6
0085 F0                MOVX    @DPTR,A
0086 A3                INC     DPTR
0087 EF                MOV     A,R7
0088 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2053
0089 7F3D              MOV     R7,#03DH
008B 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 2055
008E 7F07              MOV     R7,#07H
0090 7E00              MOV     R6,#00H
0092 120000      E     LCALL   _GetTabW
0095 900000      E     MOV     DPTR,#wGamma
0098 EE                MOV     A,R6
0099 F0                MOVX    @DPTR,A
009A A3                INC     DPTR
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2057
009D 7F3E              MOV     R7,#03EH
009F 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 2059
00A2 7F07              MOV     R7,#07H
00A4 7E00              MOV     R6,#00H
00A6 120000      E     LCALL   _GetTabW
00A9 900000      E     MOV     DPTR,#wWBTemp
00AC EE                MOV     A,R6
00AD F0                MOVX    @DPTR,A
00AE A3                INC     DPTR
00AF EF                MOV     A,R7
00B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2061
00B1 7F42              MOV     R7,#042H
00B3 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 2063
00B6 7F01              MOV     R7,#01H
00B8 7E00              MOV     R6,#00H
00BA 120000      E     LCALL   _GetTab
00BD 900000      E     MOV     DPTR,#bWBTempAuto
00C0 EF                MOV     A,R7
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2066
00C2 7F3F              MOV     R7,#03FH
00C4 120000      E     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 2068
00C7 7F07              MOV     R7,#07H
00C9 7E00              MOV     R6,#00H
00CB 120000      E     LCALL   _GetTabW
00CE 900000      E     MOV     DPTR,#wGain
00D1 EE                MOV     A,R6
00D2 F0                MOVX    @DPTR,A
00D3 A3                INC     DPTR
00D4 EF                MOV     A,R7
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2071
00D6 E4                CLR     A
00D7 900000      E     MOV     DPTR,#wWBCompRed
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 108 

00DA F0                MOVX    @DPTR,A
00DB A3                INC     DPTR
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2072
00DD 900000      E     MOV     DPTR,#bWBCompAuto
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2074
00E1 900000      E     MOV     DPTR,#bExtenUnitCtrl
00E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2075
00E5 C200        E     CLR     xSetPropertyMirror
                                           ; SOURCE LINE # 2076
00E7 C200        E     CLR     xSetPropertyFlip
                                           ; SOURCE LINE # 2077
00E9 22                RET     
             ; FUNCTION GetVCControlDef (END)

             ; FUNCTION _ConstructStreamRelatedInfo (BEGIN)
                                           ; SOURCE LINE # 2082
;---- Variable 'bForceBuild' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2083
                                           ; SOURCE LINE # 2084
0000 EF                MOV     A,R7
0001 7018              JNZ     ?C0467
                                           ; SOURCE LINE # 2085
0003 900000            MOV     DPTR,#00H
0006 E0                MOVX    A,@DPTR
0007 6012              JZ      ?C0467
                                           ; SOURCE LINE # 2086
0009 300008      E     JNB     xHighSpdMode,?C0469
                                           ; SOURCE LINE # 2087
000C 900008            MOV     DPTR,#08H
000F E0                MOVX    A,@DPTR
0010 30E008            JNB     ACC.0,?C0467
0013 22                RET     
                                           ; SOURCE LINE # 2089
                                           ; SOURCE LINE # 2090
0014         ?C0469:
                                           ; SOURCE LINE # 2091
0014 900008            MOV     DPTR,#08H
0017 E0                MOVX    A,@DPTR
0018 20E122            JB      ACC.1,?C0471
                                           ; SOURCE LINE # 2093
                                           ; SOURCE LINE # 2094
                                           ; SOURCE LINE # 2095
                                           ; SOURCE LINE # 2096
001B         ?C0467:
                                           ; SOURCE LINE # 2097
001B 900008            MOV     DPTR,#08H
001E E0                MOVX    A,@DPTR
001F 30E00A            JNB     ACC.0,?C0474
                                           ; SOURCE LINE # 2098
0022 D200        E     SETB    xHighSpdMode
                                           ; SOURCE LINE # 2101
0024 900060            MOV     DPTR,#060H
0027 7402              MOV     A,#02H
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2102
002A 8008              SJMP    ?C0475
002C         ?C0474:
                                           ; SOURCE LINE # 2103
002C C200        E     CLR     xHighSpdMode
C51 COMPILER V7.06   USBIF                                                                 07/22/2020 17:08:20 PAGE 109 

                                           ; SOURCE LINE # 2106
002E 900060            MOV     DPTR,#060H
0031 7404              MOV     A,#04H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2107
0034         ?C0475:
                                           ; SOURCE LINE # 2108
0034 120000      E     LCALL   ConstructStreamTable
                                           ; SOURCE LINE # 2109
0037 120000      E     LCALL   ConstructDefStremSet
                                           ; SOURCE LINE # 2110
003A 120000      E     LCALL   LoadDefaultSetting
                                           ; SOURCE LINE # 2111
003D         ?C0471:
003D 22                RET     
             ; FUNCTION _ConstructStreamRelatedInfo (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5567    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      54
   IDATA SIZE       =   ----      14
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
