C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 1   


C51 COMPILER V7.06, COMPILATION OF MODULE SETINTF
OBJECT MODULE PLACED IN .\output\setintf.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE setintf.c OPTIMIZE(SIZE) BROWSE DEBUG OBJECTEXTEND CODE PRINT(.\lst\setintf
                    -.lst) OBJECT(.\output\setintf.obj)

stmt level    source

   1          /************************************************************************|
   2          |                  A L C O R   M I C R O,  C O R P.                      |
   3          |                                                                        |
   4          |         This source code is classified as confidential and             |
   5          |         contains trade secrets owned by Alcor Micro, Corp.             |
   6          |                                                                        |
   7          |                         (C)Copyright 2008                              |
   8          |                         Alcor Micro, Corp.                             |
   9          |                        All rights reserved.                            |
  10          |************************************************************************/
  11          
  12          #include <string.h>
  13          #include "globaldef.h"
  14          #include "regmap.h"
  15          #include "globalvar.h"
  16          #include "base.h"
  17          #include "xsensor.h"
  18          #include "usbif.h"
  19          #include "SettingDef.h"
  20          #include "util.h"
  21          #include "setintf.h"
  22          #include "exunit.h"
  23          #include "InFirmDef.h"
  24          #include "InTable.h"
  25          #include "AudioDef.h"
  26          #include "AudioHandle.h"
  27          
  28          // 2009,03,20 Lear add TableAddress begin
  29          // To reduce code size and support setfile utility
  30          code WORD       TableAddr[] = {
  31                  &USBDeviceDesc,                 // DEV_DESC
  32                  &USBDeviceDescCN,               // HIGH_CONFIG_DESC, change to store USBDeviceDescCN address
  33              0x0000,       // FULL_CONFIG_DESC, change to store USBDeviceDesc10 address
  34                  &InterfaceAssociDesc,   // IAD_DESC
  35                  &InterfaceDesc0,                // INTF0_DESC
  36                  &VCInterfaceDesc,               // CS_VC_INTF_DESC
  37                  &CameraTerminal,                // VC_CAMERA_TERM_DESC
  38                  &ProcessingUnit,                // VC_PU_DESC
  39                  &OutputTerminal,                // VC_OUT_TERM_DESC
  40                  &HighEPoint1,                   // HIGH_EP1_DESC
  41                  &CSEPoint0,                     // CS_VC_EP1_DESC
  42                  &InterfaceDesc1Alt0,    // INTF1_ALT0_DECS
  43              0x0000,     // VS_AUTOMATIC_FMTGEN, change to store USBDeviceDesc10CN address
  44                  &PwrLineCtrlCN,                 // CS_VS_INTF_DESC, change to store PwrLineCtrlCN table address
  45          /*        
  46                  0x0,                                    // VS_UC_FORMAT_DESC    (index: 0xE)
  47                  0x0,                                    // VS_UC_FRAME_DESC0
  48                  0x0,                                    // VS_UC_FRAME_DESC1
  49                  0x0,                                    // VS_UC_FRAME_DESC2
  50                  0x0,                                    // VS_UC_FRAME_DESC3
  51                  0x0,                                    // VS_UC_FRAME_DESC4
  52                  0x0,                                    // VS_UC_FRAME_DESC5
  53                  0x0,                                    // VS_UC_FRAME_DESC6
  54                  0x0,                                    // VS_UC_FRAME_DESC7
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 2   

  55                  0x0,                                    // VS_UC_FRAME_DESC8
  56                  0x0,                                    // VS_UC_FRAME_DESC9
  57                  0x0,                                    // VS_UC_FRAME_DESC10
  58                  0x0,                                    // VS_UC_FRAME_DESC11
  59                  0x0,                                    // VS_UC_FRAME_DESC12
  60                  0x0,                                    // VS_UC_FRAME_DESC13
  61                  0x0,                                    // VS_UC_FRAME_DESC14
  62                  0x0,                                    // VS_UC_FRAME_DESC15
  63                  0x0,                                    // VS_UC_STILL_DESC
  64                  0x0,                                    // VS_COLORMATCH_DESC
  65                  0x0,                                    // VS_MJ_FORMAT_DESC
  66                  0x0,                                    // VS_MJ_FRAME_DESC0
  67                  0x0,                                    // VS_MJ_FRAME_DESC1
  68                  0x0,                                    // VS_MJ_FRAME_DESC2
  69                  0x0,                                    // VS_MJ_FRAME_DESC3
  70                  0x0,                                    // VS_MJ_FRAME_DESC4
  71                  0x0,                                    // VS_MJ_FRAME_DESC5
  72                  0x0,                                    // VS_MJ_FRAME_DESC6
  73                  0x0,                                    // VS_MJ_FRAME_DESC7
  74                  0x0,                                    // VS_MJ_FRAME_DESC8
  75                  0x0,                                    // VS_MJ_FRAME_DESC9
  76                  0x0,                                    // VS_MJ_FRAME_DESC10
  77                  0x0,                                    // VS_MJ_FRAME_DESC11
  78                  0x0,                                    // VS_MJ_FRAME_DESC12
  79                  0x0,                                    // VS_MJ_FRAME_DESC13
  80                  0x0,                                    // VS_MJ_FRAME_DESC14
  81                  0x0,                                    // VS_MJ_FRAME_DESC15
  82                  0x0,                                    // VS_MJ_STILL_DESC                     (index:0x32)
  83          */        
  84                  &USBInterfaceDesc1Alt1, // INTF1_ALT1_DECS
  85                  &USBInterfaceDesc1Alt2, // INTF1_ALT2_DECS
  86                  &USBInterfaceDesc1Alt3, // INTF1_ALT3_DECS
  87                  &USBInterfaceDesc1Alt4, // INTF1_ALT4_DECS
  88                  &HighEPoint2Alt1,               // HIGH_EP2_ALT1_DESC
  89                  &HighEPoint2Alt2,               // HIGH_EP2_ALT2_DESC
  90                  &HighEPoint2Alt3,               // HIGH_EP2_ALT3_DESC
  91                  &HighEPoint2Alt4,               // HIGH_EP2_ALT4_DESC
  92                  &FullEPoint2Alt1,               // FULL_EP2_ALT1_DESC
  93                  &FullEPoint2Alt2,               // FULL_EP2_ALT2_DESC
  94                  &FullEPoint2Alt3,               // FULL_EP2_ALT3_DESC
  95                  &FullEPoint2Alt4,               // FULL_EP2_ALT4_DESC
  96                  &OtherSpConfigDesc,     // OTHERSP_CONF_DESC
  97                  &OtherSpIAD,                    // OTHERSP_IAD_DESC
  98                  &OtherSpIntf0Desc,              // OTHERSP_INTF0_DESC
  99                  &OtherSpCSIntf0Desc,    // OTHERSP_CS_VC_INTF_DESC
 100                  &OtherSpCameraTerm,     // OTHER_VC_CAM_TERM_DESC
 101                  &OtherSpOutputTerm,     // OTHER_VC_OUT_TERM_DESC
 102                  &USBStringLangDesc,     // GET_STRING0_DESC                     //__0x20
 103                  &USBStringMfg,                  // GET_STRING1_DESC
 104                  &USBStringProd,                 // GET_STRING2_DESC
 105                  &USBStringSN,                   // GET_STRING3_DESC
 106                  &USBStringVD,                   // GET_STRING4_DESC
 107                  &USBStringADF,                  // GET_STRING5_DESC
 108                  &USBDeviceQualDesc,     // GET_DEVQUAL_DESC     //__0x26
 109                  &BrightnessCtrl,                // BRIGHTNESS_CTRL
 110                  &ContrastCtrl,                  // CONTRAST_CTRL
 111                  &HueCtrl,                               // HUE_CTRL
 112                  &SaturationCtrl,                // SATURATION_CTRL
 113                  &SharpnessCtrl,                 // SHARPNESS_CTRL
 114                  &GammaCtrl,                     // GAMMA_CTRL
 115                  &WBTempCtrl,                    // WBTEMP_CTRL
 116                 &GainCtrl,            // WBCOMP_CTRL
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 3   

 117                  &BacklightCtrl,                 // BACKLIGHT_CTRL
 118                  &PwrLineCtrl,                   // PWLINE_CTRL
 119                  &WBTempAutoCtrl,                // WBTEMPAUTO_CTRL
 120                 &AETimeCtrl,                     // WBCOMPAUTO_CTRL
 121                  &GammaTable,                    // GAMMA_TAB                    //__51,0x33
 122                  &VCExtensionUnitDesc,   // EXUNIT_DESC
 123          //        0x0,                                    // GET_CUSPROBE
 124                  &InternalIdxTable,              // GET_CUSPROBE change to stroe index map table
 125                  &HSYUVProb_TAB,                  // GET_HSYUVProb
 126                  &HSMJProb_TAB,                   // GET_HSMJProb
 127                  &FSYUVProb_TAB,                  // GET_FSYUVProb
 128                  &FSMJProb_TAB,                   // GET_FSMJProb
 129                  &HSYUVProb_TAB,                  // GET_HSSTILLYUVProb
 130                  &HSMJProb_TAB,                   // GET_HSSTILLMJProb
 131                  &FSYUVProb_TAB,                  // GET_FSSTILLYUVProb
 132                  &FSMJProb_TAB,                   // GET_FSSTILLMJProb
 133                  &SNAP_ACTIVE,                    // GET_SNAPACTIVE
 134                  &Res_Table,                      // GET_RES_TABLE
 135                  &BACKENDINIT_TAB,                // GET_BACKENDINIT
 136                  &SET_VERSION,                   // GET_SETTING_VERSION
 137                  &HighStrmFormatTab,     // GET_HIGH_AUTOMAIC_TAB
 138                  &FullStrmFormatTab,     // GET_FULL_AUTOMAIC_TAB
 139                  &HS_FrameRate_Tab,              // GET_FRAMERATE_TABLE
 140                  &FullEPoint1,                   // FULL_EP1_DESC
 141                  &PRIVACY_ACTIVE,           // GET_PRIVACY_ACTIVE                //__0x46,70
 142                //for future used
 143                
 144                  //AUDIO_FUN  ,start from 0x47
 145                   //DMIC
 146              &AU_InterfaceAssociDesc_MIC,    //AU_IAD_DESC_MIC 
 147                  &InterfaceDesc2,                                //AU_IF2_DESC   
 148                  &ACInterfaceDesc_MIC,               //AU_HEADER_DESC_MIC
 149              &AU_DMIC_IT_Desc,                       //AC_DMIC_IT_DESC  , Only mic 
 150                  &AU_DMIC_FU_Desc,                           //AC_DMIC_FU_DESC   
 151                  &AU_DMIC_OT_Desc,                           //AC_DMIC_OT_DESC
 152                  &InterfaceDesc3Alt0,                    //AU_IF3_ALT0_DESC
 153                //AU_DMIC_GENER_DESC      
 154                  &DMICVolumnDBDefault,           //GET_AU_VOLUMN_MIC                                     
 155                  &AudioDefaultSetting,                   //GET_AU_FORMAT                 //_0x4f
 156                  &DMIC_Array_Info,                           //GET_MICARRAY      
 157                  &AU_VolGGain,                   //GET_AU_VOLGGAIN
 158              &AU_FIR_Index,                  //GET_AU_COFREM_INDEX, 
 159              &AUDIO_Coefram_IIR,             //GET_AU_IIRSET  
 160              &AUDIO_Coefram_FIR[0][0],       //GET_AU_FIRSET,         
 161              &AU_DelayTime,                  //GET_AU_DELAYTIME
 162                  0xFF08                                  //TableAddr end. last byte for check EEPROM size in AP, unit:512byte
 163          };
 164          #define Table_AudioStart        (0x47)
 165          
 166          
 167          code INTERVAL_IDX_TAB Interval_Idx_Tab[30] =
 168          {
 169              {1, FPS_1,  FPS_0,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 1 FPS
 170              {1, FPS_2,  FPS_0,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 2 FPS
 171              {1, FPS_3,  FPS_0,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 3 FPS
 172              {1, FPS_4,  FPS_0,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 4 FPS
 173              {2, FPS_5,  FPS_4,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 5 FPS
 174              {2, FPS_6,  FPS_5,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 6 FPS
 175              {2, FPS_7,  FPS_5,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 7 FPS
 176              {2, FPS_8,  FPS_5,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 8 FPS
 177              {2, FPS_9,  FPS_5,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 9 FPS
 178              {2, FPS_10, FPS_5,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 10 FPS
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 4   

 179              {2, FPS_11, FPS_5,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 11 FPS
 180              {3, FPS_12, FPS_10, FPS_5,  FPS_0,  FPS_0, FPS_0},  // 12 FPS
 181              {3, FPS_13, FPS_10, FPS_5,  FPS_0,  FPS_0, FPS_0},  // 13 FPS
 182              {3, FPS_14, FPS_10, FPS_5,  FPS_0,  FPS_0, FPS_0},  // 14 FPS
 183              {3, FPS_15, FPS_10, FPS_5,  FPS_0,  FPS_0, FPS_0},  // 15 FPS
 184              {3, FPS_16, FPS_10, FPS_5,  FPS_0,  FPS_0, FPS_0},  // 16 FPS
 185              {4, FPS_17, FPS_15, FPS_10, FPS_5,  FPS_0, FPS_0},  // 17 FPS
 186              {4, FPS_18, FPS_15, FPS_10, FPS_5,  FPS_0, FPS_0},  // 18 FPS
 187              {4, FPS_19, FPS_15, FPS_10, FPS_5,  FPS_0, FPS_0},  // 19 FPS
 188              {4, FPS_20, FPS_15, FPS_10, FPS_5,  FPS_0, FPS_0},  // 20 FPS
 189              {4, FPS_21, FPS_15, FPS_10, FPS_5,  FPS_0, FPS_0},  // 21 FPS
 190              {5, FPS_22, FPS_20, FPS_15, FPS_10, FPS_5, FPS_0},  // 22 FPS
 191              {5, FPS_23, FPS_20, FPS_15, FPS_10, FPS_5, FPS_0},  // 23 FPS
 192              {5, FPS_24, FPS_20, FPS_15, FPS_10, FPS_5, FPS_0},  // 24 FPS
 193              {5, FPS_25, FPS_20, FPS_15, FPS_10, FPS_5, FPS_0},  // 25 FPS
 194              {5, FPS_26, FPS_20, FPS_15, FPS_10, FPS_5, FPS_0},  // 26 FPS
 195              {6, FPS_27, FPS_25, FPS_20, FPS_15, FPS_10, FPS_5},  // 27 FPS
 196              {6, FPS_28, FPS_25, FPS_20, FPS_15, FPS_10, FPS_5},  // 28 FPS
 197              {6, FPS_29, FPS_25, FPS_20, FPS_15, FPS_10, FPS_5},  // 29 FPS
 198              {6, FPS_30, FPS_25, FPS_20, FPS_15, FPS_10, FPS_5}   // 30 FPS
 199          };
 200          
 201          // 2008,Dec,16 Limit MIN FrameRate to 4 FPS
 202          /*
 203          code INTERVAL_IDX_TAB Interval_Idx_Tab[30] =
 204          {
 205              {1, FPS_1,  FPS_0,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 1 FPS
 206              {2, FPS_2,  FPS_1,  FPS_0,  FPS_0,  FPS_0, FPS_0},  // 2 FPS
 207              {3, FPS_3,  FPS_2,  FPS_1,  FPS_0,  FPS_0, FPS_0},  // 3 FPS
 208              {4, FPS_4,  FPS_3,  FPS_2,  FPS_1,  FPS_0, FPS_0},  // 4 FPS
 209              {5, FPS_5,  FPS_4,  FPS_3,  FPS_2,  FPS_1, FPS_0},  // 5 FPS
 210              {6, FPS_6,  FPS_5,  FPS_4,  FPS_3,  FPS_2, FPS_1},  // 6 FPS
 211              {6, FPS_7,  FPS_5,  FPS_4,  FPS_3,  FPS_2, FPS_1},  // 7 FPS
 212              {6, FPS_8,  FPS_6,  FPS_5,  FPS_4,  FPS_2, FPS_1},  // 8 FPS
 213              {6, FPS_9,  FPS_7,  FPS_6,  FPS_4,  FPS_2, FPS_1},  // 9 FPS
 214              {6, FPS_10, FPS_8,  FPS_6,  FPS_4,  FPS_2, FPS_1},  // 10 FPS
 215              {6, FPS_11, FPS_9,  FPS_6,  FPS_4,  FPS_2, FPS_1},  // 11 FPS
 216              {6, FPS_12, FPS_9,  FPS_6,  FPS_4,  FPS_2, FPS_1},  // 12 FPS
 217              {6, FPS_13, FPS_10, FPS_7,  FPS_5,  FPS_3, FPS_1},  // 13 FPS
 218              {6, FPS_14, FPS_11, FPS_8,  FPS_5,  FPS_3, FPS_1},  // 14 FPS
 219              {6, FPS_15, FPS_12, FPS_8,  FPS_5,  FPS_3, FPS_1},  // 15 FPS
 220              {6, FPS_16, FPS_12, FPS_8,  FPS_5,  FPS_3, FPS_1},  // 16 FPS
 221              {6, FPS_17, FPS_13, FPS_9,  FPS_5,  FPS_3, FPS_1},  // 17 FPS
 222              {6, FPS_18, FPS_14, FPS_10, FPS_6,  FPS_3, FPS_1},  // 18 FPS
 223              {6, FPS_19, FPS_15, FPS_10, FPS_6,  FPS_3, FPS_1},  // 19 FPS
 224              {6, FPS_20, FPS_15, FPS_10, FPS_6,  FPS_3, FPS_1},  // 20 FPS
 225              {6, FPS_21, FPS_16, FPS_11, FPS_8,  FPS_4, FPS_1},  // 21 FPS
 226              {6, FPS_22, FPS_17, FPS_12, FPS_8,  FPS_4, FPS_1},  // 22 FPS
 227              {6, FPS_23, FPS_18, FPS_12, FPS_8,  FPS_4, FPS_1},  // 23 FPS
 228              {6, FPS_24, FPS_20, FPS_15, FPS_10, FPS_5, FPS_1},  // 24 FPS
 229              {6, FPS_25, FPS_20, FPS_15, FPS_10, FPS_5, FPS_1},  // 25 FPS
 230              {6, FPS_26, FPS_20, FPS_15, FPS_10, FPS_5, FPS_1},  // 26 FPS
 231              {6, FPS_27, FPS_21, FPS_15, FPS_10, FPS_5, FPS_1},  // 27 FPS
 232              {6, FPS_28, FPS_23, FPS_17, FPS_12, FPS_6, FPS_1},  // 28 FPS
 233              {6, FPS_29, FPS_24, FPS_18, FPS_12, FPS_6, FPS_1},  // 29 FPS
 234              {6, FPS_30, FPS_24, FPS_18, FPS_12, FPS_6, FPS_1}   // 30 FPS
 235          };
 236          */
 237          
 238          
 239          // Frame rate to frame count mapping
 240          // Should be imported from external non-volatile memory for customized stream table
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 5   

 241          // The resolution index should be sycn with Res_Table Table
 242          /*
 243          code DWORD   FrameSize[MAX_SUPPORT_FRAME_NUM] = {
 244              // 4:3
 245              0x004B00,    // 160*120
 246              0x006300,    // 176*144
 247              0x012C00,    // 320*240
 248              0x018C00,    // 352*288
 249              0x04B000,    // 640*480
 250              0x075300,    // 800*600
 251              0x0C0000,    // 1024*768
 252              0x0F3000,    // 1152*864
 253              0x140000,    // 1280*1024
 254              0x166E30,    // 1400*1050
 255              0x1D4C00,    // 1600*1200
 256              0x300000,    // 2048*1536
 257              0x4CE300,    // 2592*1944
 258              // 16:9
 259              0X003840,    // 160*90
 260              0X004410,    // 176*99
 261              0X00E100,    // 320*180
 262              0X011040,    // 352*198
 263              0x038400,    // 640*360
 264              0x057E40,    // 800*450
 265              0x0E1000,    // 1280*720
 266              0x11CC40,    // 1440*810
 267              0x15F900,    // 1600*900
 268              0x183990,    // 1680*945
 269              0x1FA400,    // 1920*1080
 270              0X384000,    // 2560*1440
 271              // 16:10
 272              0X003E80,    // 160*100
 273              0X004BA0,    // 176*110
 274              0X00FA00,    // 320*200
 275              0X012E80,    // 352*220
 276              0X03E800,    // 640*400
 277              0x061A80,    // 800*500
 278              0x0FA000,    // 1280*800
 279              0x13C680,    // 1440*900
 280              0x190000,    // 1600*1024
 281              0x1AEAA0,    // 1680*1050
 282              0x232800,    // 1920*1200
 283              0x3E8000     // 2560*1600
 284          };
 285          */
 286          
 287          
 288          code BYTE InternalVersion[EXTENSION_MAX_SIZE] =
 289          {
 290                  INTER_FW_VER_DATA
 291          };
 292          
 293          code USB_ST_CONFIGURATION_DESC  USB_ST_Configuration_Desc = 
 294          {
 295                  sizeof(USB_ST_CONFIGURATION_DESC),      //0x09
 296                  DESC_CONFIGURATION,                     //0x02
 297                  CONF_LENGTH,                            //0xF902(LH)
 298                  NB_INTERFACE,                           //0x02
 299                  CONF_NB,                                //0x01
 300                  CONF_INDEX,                             //0x00
 301                  CONF_ATTRIBUTES,                        //0x80
 302                  MAX_POWER                               //0xFA
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 6   

 303          };
 304          
 305          static void Construct_ConfDesc(void)
 306          {
 307   1          WORD idata wConfigLen;
 308   1      
 309   1          wConfigLen = GetConfigLength();
 310   1              memcpy(pbTmpBuf, &USB_ST_Configuration_Desc, sizeof(USB_ST_CONFIGURATION_DESC));
 311   1      #if 0   
                  pbTmpBuf[0x0] = sizeof(USB_ST_CONFIGURATION_DESC); // 0x09
                  pbTmpBuf[0x1] = DESC_CONFIGURATION;                // 0x02
              #endif  
 315   1          pbTmpBuf[0x2] = LoByteOfWord(wConfigLen);          // configuration total length low byte
 316   1          pbTmpBuf[0x3] = HiByteOfWord(wConfigLen);          // configuration total length high byte
 317   1      
 318   1         if(bDMICInput!=MICSEL_NONE)
 319   1              pbTmpBuf[0x4] = 4;   //include the MIC function
 320   1      
 321   1      
 322   1          if(xEnableHID)
 323   1          {   //Add HID interface number
 324   2               pbTmpBuf[0x4]= pbTmpBuf[0x4]+1;
 325   2          }
 326   1      #if 0    
              
                  pbTmpBuf[0x4] = NB_INTERFACE;                      // 0x02
                  pbTmpBuf[0x5] = CONF_NB;                           // 0x01
                  pbTmpBuf[0x6] = CONF_INDEX;                        // 0x00
                  pbTmpBuf[0x7] = CONF_ATTRIBUTES;                   // 0x80
                  pbTmpBuf[0x8] = MAX_POWER;                         // 0xFA
              #endif  
 334   1      }
 335          
 336          code USB_CS_VS_INTERFACE_DESC USB_CS_VS_Interface_Desc = 
 337          {
 338                  sizeof(USB_CS_VS_INTERFACE_DESC),       //0x0F
 339                  DESC_CS_INTERFACE,                      //0x24
 340                  VS_INPUT_HEADER,                        //0x01
 341                  0x2,                      //0x02: with MJPEG; 0x01: without MJPEG       
 342                  CS_VS_INTERFACE_LENG,                   //0xBD02 or ?
 343                  ENDPOINT2_NB,                           //0x82
 344                  0x00,                                   //0x00
 345                  OT_ID,                                  //0x03
 346                  0x2,                         //0x02
 347                  TRIG_SUPPORT,                           //0x01
 348                  TRIG_USAGE,                             //0x00
 349                  1,                                      //0x01
 350                  0x00,                                   //0x00
 351                  0x00                                    //0x00
 352          
 353          };
 354          // CS VS Input header (0xD+ format number) + Format1Desc (0x1B)
 355          // Frame1Desc (0x2A*Fmt1Framnumber) + ColorMatch (0x6) + Fmt1StillDesc(0x6+0x4*Still1Number) + Format2Desc
             -(0x0B)
 356          // + Frame2Desc (0x2A * Fmt2Framenumber) + ColorMatch(0x6) + Fmt2StillDesc(0x6+0x4*Still2Number)
 357          static void ContructCS_VS_INTFDesc(void)   //__input header
 358          {
 359   1          VS_STREAM_FMT_TAB xdata * data pFmtTab;
 360   1          WORD  data wLen;
 361   1          pFmtTab = (VS_STREAM_FMT_TAB *)pbFmtTab;
 362   1              memcpy(pbTmpBuf, &USB_CS_VS_Interface_Desc, sizeof(USB_CS_VS_INTERFACE_DESC));
 363   1      /*
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 7   

 364   1              pbTmpBuf[0x1] = DESC_CS_INTERFACE;
 365   1              pbTmpBuf[0x2] = VS_INPUT_HEADER;
 366   1              pbTmpBuf[0x6] = ENDPOINT2_NB;
 367   1              pbTmpBuf[0x7] = 0x0;
 368   1              pbTmpBuf[0x8] = OT_ID;
 369   1      */
 370   1              if((pFmtTab->F2StillNum != 0)||(pFmtTab->F1StillNum != 0)){
 371   2                      pbTmpBuf[0x9] = CAPTURE_METHOD_2;
 372   2                      bCaptureMethod1 = 0x0;
 373   2              }else{
 374   2                      pbTmpBuf[0x9] = CAPTURE_METHOD_1;
 375   2                      bCaptureMethod1 = 0x1;
 376   2              }
 377   1      /*
 378   1              pbTmpBuf[0xa] = TRIG_SUPPORT;
 379   1              pbTmpBuf[0xb] = TRIG_USAGE;
 380   1              pbTmpBuf[0xd] = 0x0;
 381   1              pbTmpBuf[0xc] = 0x1;
 382   1      */
 383   1              if(pFmtTab->FmtList &(YUY2_MJPEG|MJPEG_YUY2)){
 384   2              // support two formats
 385   2              pbTmpBuf[0x0] = sizeof(USB_CS_VS_INTERFACE_DESC);
 386   2                      pbTmpBuf[0x3] = 0x2;
 387   2                      //wLen = 0xD + 0x2 + 0x1B + 0x1A*pFmtTab->F1FrameNum +  0x6 + 0x4*pFmtTab->F1StillNum + 0xB
 388   2                      //       + 0x1A*pFmtTab->F2FrameNum + 0x6 + 0x4*pFmtTab->F2StillNum + wFrmIntervalLen;
 389   2                      wLen=0x41+0x1A*(pFmtTab->F1FrameNum +pFmtTab->F2FrameNum)+      
 390   2                                 0x4*(pFmtTab->F1StillNum + pFmtTab->F2StillNum)+ wFrmIntervalLen;
 391   2      
 392   2                      if(pFmtTab->F2StillNum != 0){   //stillImage Desc basic length
 393   3                              wLen=wLen+6;
 394   3                      }
 395   2      
 396   2                      pbTmpBuf[0xe] = 0x0;
 397   2          }else{
 398   2              // support only one format
 399   2                      pbTmpBuf[0x0] = sizeof(USB_CS_VS_FS_INTERFACE_DESC);
 400   2                      pbTmpBuf[0x3] = 0x1;
 401   2      
 402   2                      wLen = 0xD + 0x1 + 0x0B + 0x1A*pFmtTab->F1FrameNum + 0x6 + 0x4*pFmtTab->F1StillNum
 403   2                                 + wFrmIntervalLen;
 404   2      
 405   2                      if(pFmtTab->FmtList & YUY2ONLY){
 406   3                              wLen = wLen + 0x10;                  
 407   3                      }
 408   2          }
 409   1                      if(pFmtTab->F1StillNum != 0){ //stillImage Desc basic length
 410   2                              wLen=wLen+6;    
 411   2                      }
 412   1          pbTmpBuf[0x4] = LoByteOfWord(wLen);
 413   1              pbTmpBuf[0x5] = HiByteOfWord(wLen);
 414   1      }
 415          code USB_CS_VS_UC_FORMAT_DESC USB_CS_VS_UC_Format_Desc = 
 416          {
 417                  sizeof(USB_CS_VS_UC_FORMAT_DESC),       //0x1B=27
 418                  DESC_CS_INTERFACE,                      //0x24 
 419                  VS_FORMAT_UNCOMPRESSED,                 //0x04
 420                  0x1,                                            //0x01
 421                  0x8,                                                        //0x08
 422                  GUID_FORMAT,                            //0x59555932 0000 1000 80 00 00 AA 00 38 9B 71
 423                  BITS_PER_PIXEL,                                 //0x10
 424                  UC_FRAME_INDEX0,                        //0x01
 425                  ASPECT_RATIO_X,                         //0x00
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 8   

 426                  ASPECT_RATIO_Y,                         //0x00
 427                  0x00,                                   //0x00
 428                  0x00                                    //0x00
 429          };
 430          static void Construct_UC_FORMAT_Desc(void)
 431          {
 432   1      
 433   1              // GUID xdata * data pGUID;
 434   1          // check format idx
 435   1          memcpy(pbTmpBuf, &USB_CS_VS_UC_Format_Desc, sizeof(USB_CS_VS_UC_FORMAT_DESC));
 436   1      /*      
 437   1              pbTmpBuf[0x0] = sizeof(USB_CS_VS_UC_FORMAT_DESC);
 438   1              pbTmpBuf[0x1] = DESC_CS_INTERFACE;
 439   1              pbTmpBuf[0x2] = VS_FORMAT_UNCOMPRESSED;
 440   1      */      
 441   1              if(pbFmtTab[0] & (YUY2ONLY|YUY2_MJPEG)){
 442   2                  // format idx 1
 443   2                  pbTmpBuf[0x3] = 0x1;
 444   2                  pbTmpBuf[0x4] = pbFmtTab[0x1];
 445   2              }else{
 446   2                  // format idx 2
 447   2                  pbTmpBuf[0x3] = 0x2;
 448   2                  pbTmpBuf[0x4] = pbFmtTab[0x3];
 449   2              }
 450   1      /*      
 451   1              pGUID = (GUID xdata *)&pbTmpBuf[0x5];
 452   1          pGUID->dwData1 = 0x59555932;    // big endian to little
 453   1              pGUID->wData2 = 0x0;
 454   1              pGUID->wData3  = 0x1000;    // big endian to little
 455   1              pGUID->pbData4[0] = 0x80;
 456   1              pGUID->pbData4[1] = 0x00;
 457   1              pGUID->pbData4[2] = 0x00;
 458   1              pGUID->pbData4[3] = 0xAA;
 459   1              pGUID->pbData4[4] = 0x00;
 460   1              pGUID->pbData4[5] = 0x38;
 461   1              pGUID->pbData4[6] = 0x9B;
 462   1              pGUID->pbData4[7] = 0x71;
 463   1              pbTmpBuf[0x15] = BITS_PER_PIXEL;
 464   1              pbTmpBuf[0x16] = 0x1;
 465   1              pbTmpBuf[0x17] = ASPECT_RATIO_X;
 466   1              pbTmpBuf[0x18] = ASPECT_RATIO_Y;
 467   1              pbTmpBuf[0x19] = 0x0;
 468   1              pbTmpBuf[0x1A] = 0x0;
 469   1      */      
 470   1      }
 471          static void Construct_MJ_FORMAT_Desc(void)
 472          {
 473   1          pbTmpBuf[0x0] = sizeof(USB_CS_VS_MJ_FORMAT_DESC);
 474   1          pbTmpBuf[0x1] = DESC_CS_INTERFACE;
 475   1          pbTmpBuf[0x2] = VS_FORMAT_MJEPG;
 476   1          // check format idx
 477   1          if(pbFmtTab[0] & (MJPEG_YUY2|MJPEGONLY)){
 478   2              // Format idx 1
 479   2              pbTmpBuf[0x3] = 0x1;
 480   2              pbTmpBuf[0x4] = pbFmtTab[0x1];
 481   2          }else{
 482   2              // Format idx 2
 483   2              pbTmpBuf[0x3] = 0x2;
 484   2              pbTmpBuf[0x4] = pbFmtTab[0x3];
 485   2          }
 486   1          pbTmpBuf[0x5] = 0x01;            // bmFlags
 487   1          pbTmpBuf[0x6] = 0x1;             // Default frame idx
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 9   

 488   1          pbTmpBuf[0x7] = ASPECT_RATIO_X;  // bAspectRatioX
 489   1          pbTmpBuf[0x8] = ASPECT_RATIO_Y;  // bAspectRatioY
 490   1          pbTmpBuf[0x9] = 0;               // bmInterlaceFlags
 491   1          pbTmpBuf[0xA] = 0;               // bCopyProtect
 492   1      }
 493          
 494          static void Construct_ColorMatch_Desc(void)
 495          {
 496   1          pbTmpBuf[0x0] = sizeof(USB_CS_VS_COLOR_DESC);
 497   1          pbTmpBuf[0x1] = DESC_CS_INTERFACE;           // CS_INTERFACE descriptor type
 498   1          pbTmpBuf[0x2] = VS_COLOR_FORMAT;             // VS_COLOR_FORMAT type
 499   1          pbTmpBuf[0x3] = 0x01;                        // color primaries refer to white
 500   1          pbTmpBuf[0x4] = 0x01;                        // transfer characteristics
 501   1          pbTmpBuf[0x5] = 0x04;                        // matrix coefficients
 502   1      }
 503          
 504          static void Construct_IMG_Frm_Desc(BYTE iDescID)
 505          {
 506   1          BYTE    data FrmNum, ResIdx;
 507   1          BYTE    xdata * idata pStillRes;
 508   1          BYTE    data OffSet;
 509   1          WORD    data wTemp;
 510   1          BYTE    data DescID;
 511   1          DescID = iDescID;
 512   1      
 513   1          pbTmpBuf[0x1] = DESC_CS_INTERFACE;
 514   1          pbTmpBuf[0x2] = VS_STILL_IMAGE_FRAME;
 515   1          pbTmpBuf[0x3] = 0x0;
 516   1          if(DescID == VS_UC_STILL_DESC){
 517   2              // Check format idx
 518   2              // get still frame number
 519   2              if(pbFmtTab[0] & (YUY2ONLY|YUY2_MJPEG)){
 520   3                  // format idx 1
 521   3                  FrmNum = 1; // case 1, FrmNum for use temporary
 522   3              }else{
 523   3                  // format idx 2
 524   3                  FrmNum = 2; // case 2, FrmNum for use temporary
 525   3              }
 526   2          }else{
 527   2              if(pbFmtTab[0] & (MJPEGONLY|MJPEG_YUY2)){
 528   3                  // format idx 1
 529   3                  FrmNum = 1; // case 1, FrmNum for use temporary
 530   3              }else{
 531   3                  // format idx 2
 532   3                  FrmNum = 2; // case 2, FrmNum for use temporary
 533   3              }
 534   2          }
 535   1          if(FrmNum == 1){
 536   2              FrmNum = pbFmtTab[0x2];
 537   2              OffSet = 0x5 + pbFmtTab[0x1];
 538   2          }else{
 539   2              FrmNum = pbFmtTab[0x4];
 540   2              OffSet = 0x5 + pbFmtTab[0x1] + pbFmtTab[0x2] + pbFmtTab[0x3];
 541   2          }
 542   1          pStillRes = (BYTE xdata *)&pbFmtTab[OffSet];
 543   1          // assign ImageSizePatterns
 544   1          pbTmpBuf[0x4] = FrmNum;
 545   1          pbTmpBuf[0x0] = FrmNum*4 + 0x6;
 546   1          FrmNum = 0;
 547   1          do{
 548   2              ResIdx = pStillRes[FrmNum];
 549   2              OffSet = FrmNum*4;
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 10  

 550   2              // Big endian to little endian
 551   2              wTemp = GetExResTable(ResIdx, GET_WIDTH);
 552   2              pbTmpBuf[0x5+OffSet] = LoByteOfWord(wTemp);
 553   2              pbTmpBuf[0x6+OffSet] = HiByteOfWord(wTemp);
 554   2              wTemp = GetExResTable(ResIdx, GET_HEIGHT);
 555   2              pbTmpBuf[0x7+OffSet] = LoByteOfWord(wTemp);
 556   2              pbTmpBuf[0x8+OffSet] = HiByteOfWord(wTemp);
 557   2              FrmNum++;
 558   2          }while(FrmNum < pbTmpBuf[0x4]);
 559   1          // Caculate length
 560   1          FrmNum = pbTmpBuf[0x0] - 1;
 561   1          // bNumCompressionPattern
 562   1          pbTmpBuf[FrmNum] = 0x0;
 563   1      }
 564          
 565          static void Construct_Frm_Desc(BYTE iDescID)
 566          {
 567   1          // VS_STREAM_FMT_TAB xdata * idata pFmtTab;
 568   1          BYTE    idata ResIdx;
 569   1          BYTE    idata FrameRate;
 570   1          BYTE    idata FrameCnt;
 571   1          DWORD   idata dwTemp, dwTemp1;
 572   1          WORD    idata wTemp;
 573   1          BYTE    idata DescID;
 574   1              
 575   1          DescID = iDescID;
 576   1      
 577   1          pbTmpBuf[0x1] = DESC_CS_INTERFACE;
 578   1      /*      if(bCaptureMethod1 == 0){
 579   1                      pbTmpBuf[0x4] = 0x0;
 580   1              }else{
 581   1                      pbTmpBuf[0x4] = 0x1;
 582   1              }*/
 583   1              pbTmpBuf[0x4]=bCaptureMethod1;
 584   1          // check format idx, check (high speed/ full speed)
 585   1          if(DescID<=VS_UC_FRAME_DESC15){
 586   2              // Uncompression
 587   2              pbTmpBuf[0x2] = VS_FRAME_UNCOMPRESSED;
 588   2              pbTmpBuf[0x3] = DescID - VS_UC_FRAME_DESC0 + 1;
 589   2              FrameCnt = 0x5 + DescID - VS_UC_FRAME_DESC0;
 590   2              if(!(pbFmtTab[0x0] & (YUY2_MJPEG|YUY2ONLY))){
 591   3                          // YUY2 is format idx 2
 592   3                  FrameCnt = FrameCnt + pbFmtTab[0x1] + pbFmtTab[0x2];
 593   3              }
 594   2              ResIdx = pbFmtTab[FrameCnt];
 595   2                      //if(xFrameRateV2 == FALSE){
 596   2                      //      FrameRate = CaculateFrmRate(ResIdx, MODE_YUV);
 597   2                      //}else{
 598   2                              FrameRate = CaculateFrmRateV2(ResIdx, MODE_YUV);
 599   2                      //}
 600   2              // dwTemp = FrameSize[ResIdx]*2;
 601   2              // wTemp = GetExResTable(ResIdx, GET_WIDTH);
 602   2              // dwTemp = GetExResTable(ResIdx, GET_HEIGHT);
 603   2              // dwTemp = dwTemp*wTemp;
 604   2              // dwTemp = dwTemp*2;
 605   2          }else{
 606   2              // MJ
 607   2              pbTmpBuf[0x2] = VS_FRAME_MJEPG;
 608   2              pbTmpBuf[0x3] = DescID - VS_MJ_FRAME_DESC0 + 1;
 609   2              FrameCnt = 0x5 + DescID - VS_MJ_FRAME_DESC0;
 610   2              if(!(pbFmtTab[0x0] & (MJPEG_YUY2|MJPEGONLY))){
 611   3                  // ResIdx = pFmtTab->F2FrmOrder[DescID - VS_MJ_FRAME_DESC0];
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 11  

 612   3                  FrameCnt = FrameCnt + pbFmtTab[0x1] + pbFmtTab[0x2];
 613   3              }
 614   2              ResIdx = pbFmtTab[FrameCnt];
 615   2                      //if(xFrameRateV2 == FALSE){
 616   2                  //    FrameRate = CaculateFrmRate(ResIdx, MODE_MJPEG);
 617   2              //      }else{
 618   2                          FrameRate = CaculateFrmRateV2(ResIdx, MODE_MJPEG);
 619   2              //      }
 620   2              // dwTemp = FrameSize[ResIdx]*3;
 621   2              // wTemp = GetExResTable(ResIdx, GET_WIDTH);
 622   2              // dwTemp = GetExResTable(ResIdx, GET_HEIGHT);
 623   2              // dwTemp = dwTemp*wTemp;
 624   2              // dwTemp = dwTemp*3;
 625   2              
 626   2          }
 627   1          wTemp = GetExResTable(ResIdx, GET_WIDTH);
 628   1          dwTemp = GetExResTable(ResIdx, GET_HEIGHT);
 629   1          dwTemp = dwTemp*wTemp;
 630   1          if(DescID<=VS_UC_FRAME_DESC15){
 631   2                      dwTemp = dwTemp*2;
 632   2          }else{
 633   2                  dwTemp = dwTemp*3;
 634   2          }
 635   1          // Get total descriptor length
 636   1          // FrameCnt = Interval_Idx_Tab[FrameRate].nFrmCnt;
 637   1          FrameCnt = pbFrmTable[0];
 638   1          pbTmpBuf[0x0] = FrameCnt*4 + 0x1A;
 639   1          // dwMaxVideoFrameBufSize
 640   1          DWORDBig2Little_f((DWORD *)&pbTmpBuf[0x11], &dwTemp);
 641   1          // Max FPS * Width * Height * 2
 642   1          // 2010,04,02 Lear add begin, fix MaxBitRate descriptor error issue
 643   1          dwTemp1 = (FrameRate+1)*dwTemp;
 644   1          dwTemp1 = dwTemp1 << 3;
 645   1          // 2010,04,02 Lear add end
 646   1              // dwMaxBitRate
 647   1          DWORDBig2Little_f((DWORD *)&pbTmpBuf[0x0D], &dwTemp1);
 648   1          // dwMinBitRate
 649   1          // dwTemp = dwTemp*(Interval_Idx_Tab[FrameRate].FrmRate[FrameCnt-1]+1);
 650   1          dwTemp = dwTemp*(pbFrmTable[FrameCnt]+1);
 651   1          // 2010,04,02 Lear add begin, fix MinBitRate descriptor error issue
 652   1          dwTemp = dwTemp << 3;
 653   1          // 2010,04,02 Lear add begin, fix MinBitRate descriptor error issue
 654   1          // DWORDBig2Little(pbTmpBuf[0x09], dwTemp);
 655   1              DWORDBig2Little_f((DWORD *)&pbTmpBuf[0x09], &dwTemp);
 656   1          // wWidth
 657   1          wTemp = GetExResTable(ResIdx, GET_WIDTH);
 658   1          WORDBig2Little(pbTmpBuf[0x05], wTemp);
 659   1          // wHeight
 660   1          wTemp = GetExResTable(ResIdx, GET_HEIGHT);
 661   1          WORDBig2Little(pbTmpBuf[0x07], wTemp);
 662   1          // dwDefaultFrameInterval
 663   1          // DWORDBig2Little(pbTmpBuf[0x15], FPS_Table[Interval_Idx_Tab[FrameRate].FrmRate[0]]);
 664   1              // DWORDBig2Little_f((DWORD *)&pbTmpBuf[0x15], &FPS_Table[Interval_Idx_Tab[FrameRate].FrmRate[0]]);
 665   1              DWORDBig2Little_f((DWORD *)&pbTmpBuf[0x15], &FPS_Table[GetFPSTableIndex(pbFrmTable[1])]);
 666   1          pbTmpBuf[0x19] = FrameCnt;
 667   1          for(ResIdx=0; ResIdx<FrameCnt; ResIdx++){
 668   2              // dwTemp = FPS_Table[Interval_Idx_Tab[FrameRate].FrmRate[ResIdx]];
 669   2              dwTemp = FPS_Table[GetFPSTableIndex(pbFrmTable[1+ResIdx])];
 670   2              // DWORDBig2Little(pbTmpBuf[0x1A+ResIdx*4], dwTemp);
 671   2              DWORDBig2Little_f((DWORD *)&pbTmpBuf[0x1A+ResIdx*4], &dwTemp);
 672   2          }
 673   1      }
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 12  

 674          
 675          
 676          // construct stream index squence
 677          // The sequence listed below
 678          // The format order and frame number maybe changed depend on XFmtTab setting
 679          // Max is 41 bytes
 680          
 681          // CS_VS_INTF_DESC
 682          // VS_UC_FORMAT_DESC
 683          //  VS_UC_FRAME_DESC0, VS_UC_FRAME_DESC1
 684          // VS_UC_FRAME_DESC1, VS_UC_FRAME_DESC2, VS_UC_FRAME_DESC3, VS_UC_FRAME_DESC4,
 685          // VS_UC_FRAME_DESC5, VS_UC_FRAME_DESC6, VS_UC_FRAME_DESC7, VS_UC_FRAME_DESC8,
 686          // VS_UC_FRAME_DESC9, VS_UC_FRAME_DESC10, VS_UC_FRAME_DESC11, VS_UC_FRAME_DESC12,
 687          // VS_UC_FRAME_DESC13, VS_UC_FRAME_DESC14, VS_UC_FRAME_DESC15,
 688          // VS_UC_STILL_DESC, VS_COLORMATCH_DESC
 689          // VS_MJ_FORMAT_DESC,
 690          // VS_MJ_FRAME_DESC0, VS_MJ_FRAME_DESC1, VS_MJ_FRAME_DESC2, VS_MJ_FRAME_DESC3,
 691          // VS_MJ_FRAME_DESC4, VS_MJ_FRAME_DESC5, VS_MJ_FRAME_DESC6, VS_MJ_FRAME_DESC7,
 692          // VS_MJ_FRAME_DESC8, VS_MJ_FRAME_DESC9, VS_MJ_FRAME_DESC10, VS_MJ_FRAME_DESC11,
 693          // VS_MJ_FRAME_DESC12, VS_MJ_FRAME_DESC13, VS_MJ_FRAME_DESC14,  VS_MJ_FRAME_DESC15,
 694          // VS_MJ_STILL_DESC, VS_COLORMATCH_DESC
 695          // END_CODE (0xff)
 696          
 697          
 698          static void ConstrcutStrmIDSequence(void)
 699          {
 700   1          VS_STREAM_FMT_TAB xdata * data pFmtTab;
 701   1          BYTE data i;
 702   1          BYTE xdata * data pTab; // ptr to stream table in XRAM
 703   1          BYTE    data Fmt1Idx;
 704   1      
 705   1          pFmtTab = (VS_STREAM_FMT_TAB * )pbFmtTab;
 706   1          pTab = (BYTE *)&pbFmtTab[sizeof(VS_STREAM_FMT_TAB)];
 707   1          *pTab++ = CS_VS_INTF_DESC;
 708   1          // UartByte2Hex(*pTab);
 709   1          if(pFmtTab->FmtList & (YUY2_MJPEG|YUY2ONLY)){
 710   2              // First format is YUY2
 711   2              Fmt1Idx = VS_UC_FORMAT_DESC;
 712   2          }else{
 713   2              // First format is MJPEG
 714   2              Fmt1Idx = VS_MJ_FORMAT_DESC;
 715   2          }
 716   1          *pTab++ = Fmt1Idx;
 717   1          for(i=0; i< pFmtTab->F1FrameNum; i++){
 718   2              *pTab++ = Fmt1Idx + 1 + i;
 719   2          }
 720   1          // Check first format still frame number
 721   1          if(pbFmtTab[0x2]>0){
 722   2              if(Fmt1Idx == VS_UC_FORMAT_DESC){
 723   3                  *pTab++ = VS_UC_STILL_DESC;
 724   3              }else{
 725   3                  *pTab++ = VS_MJ_STILL_DESC;
 726   3              }
 727   2          }
 728   1          *pTab++ = VS_COLORMATCH_DESC;
 729   1          if(pFmtTab->FmtList & (YUY2_MJPEG|MJPEG_YUY2)){
 730   2              // Support two formats
 731   2              if(Fmt1Idx == VS_UC_FORMAT_DESC){
 732   3                  Fmt1Idx = VS_MJ_FORMAT_DESC;
 733   3              }else{
 734   3                  Fmt1Idx = VS_UC_FORMAT_DESC;
 735   3              }
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 13  

 736   2              *pTab++ = Fmt1Idx;
 737   2              for(i=0; i< pFmtTab->F2FrameNum; i++){
 738   3                  *pTab++ = Fmt1Idx + 1 + i;
 739   3              }
 740   2              // Check second format still frame number
 741   2              if(pbFmtTab[0x4] > 0){
 742   3                  if(Fmt1Idx == VS_UC_FORMAT_DESC){
 743   4                      *pTab++ = VS_UC_STILL_DESC;
 744   4                  }else{
 745   4                      *pTab++ = VS_MJ_STILL_DESC;
 746   4                  }
 747   3              }
 748   2              *pTab++ = VS_COLORMATCH_DESC;
 749   2          }
 750   1          *pTab = 0xFF; // End code
 751   1      #ifdef DEBUG_GNE_SEQUENCE
                  UartString("seq");
                  pTab = (BYTE *)&pbFmtTab[0];
                  for(Fmt1Idx=sizeof(VS_STREAM_FMT_TAB); Fmt1Idx<89; Fmt1Idx++){
                      UartByte2Hex(pTab[Fmt1Idx]);
                  }
              #endif
 758   1      
 759   1      }
 760          
 761          void AutoGenDesc(BYTE DescID)
 762          {
 763   1      //    BYTE data DescID;
 764   1      //    DescID = iDescID;
 765   1      
 766   1          if(((DescID >= VS_UC_FRAME_DESC0) && (DescID <=VS_UC_FRAME_DESC15))
 767   1              ||((DescID >= VS_MJ_FRAME_DESC0) && (DescID <=VS_MJ_FRAME_DESC15))){
 768   2              Construct_Frm_Desc(DescID);
 769   2              return;
 770   2          }
 771   1          switch(DescID){
 772   2              case HIGH_CONFIG_DESC:
 773   2              case FULL_CONFIG_DESC:
 774   2                  Construct_ConfDesc();
 775   2                  break;
 776   2              case CS_VS_INTF_DESC:
 777   2                  ContructCS_VS_INTFDesc();
 778   2                  break;
 779   2              case VS_UC_FORMAT_DESC:
 780   2                              Construct_UC_FORMAT_Desc();
 781   2                              break;
 782   2              case VS_UC_STILL_DESC:
 783   2              case VS_MJ_STILL_DESC:
 784   2                  Construct_IMG_Frm_Desc(DescID);
 785   2                  break;
 786   2              case VS_COLORMATCH_DESC:
 787   2                  Construct_ColorMatch_Desc();
 788   2                  break;
 789   2              case VS_MJ_FORMAT_DESC:
 790   2                  Construct_MJ_FORMAT_Desc();
 791   2                  break;
 792   2          }
 793   1      }
 794          void   SetPtrTabById(BYTE iDescID)
 795          {
 796   1              static WORD     data wAddr;
 797   1              static BYTE data DescID;
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 14  

 798   1              DescID = iDescID;
 799   1      //#ifndef DISABLE_SPI   
 800   1              xExtendTabMap = FALSE;
 801   1      //#endif
 802   1      #if 0
                      if((DescID >=CS_VS_INTF_DESC) && (DescID<=VS_MJ_STILL_DESC)){
                          AutoGenDesc(DescID);
                          return;
                      }
              #endif  
 808   1              if(DescID == DEV_DESC){
 809   2                      if((xBDGP16 == 0) && (xBDGP13 == 1) ){
 810   3                              //3841, support MJ, 1 channel audio
 811   3                              wTabAddr = (WORD)&USBDeviceDesc10;
 812   3                      }else if((xBDGP16 == 1) && (xBDGP13 == 0)){
 813   3                              //3832, no MJ, two chl audio
 814   3                              wTabAddr = (WORD)&USBDeviceDescCN;
 815   3                      }else
 816   2                      {  //3840, support MJ , without Audio
 817   3                  wTabAddr = (WORD)&USBDeviceDesc;
 818   3              }
 819   2                  
 820   2                      return;
 821   2              }
 822   1      #if 0   
                      if((DescID == HIGH_CONFIG_DESC) || (DescID == FULL_CONFIG_DESC)){
                              AutoGenDesc(DescID);
                              return;
                      }
              #endif  
 828   1              if(DescID == VS_AUTOMATIC_FMTGEN){
 829   2                      // It is just a trigger ID
 830   2                      return;
 831   2              }
 832   1              if((DescID >= IAD_DESC) && (DescID <=INTF1_ALT0_DECS)){
 833   2                      wTabAddr = TableAddr[DescID];
 834   2                      return;
 835   2              }
 836   1              
 837   1              if((DescID >= INTF1_ALT1_DECS) && (DescID <= BACKLIGHT_CTRL)){
 838   2                      wTabAddr = TableAddr[DescID - INTF1_ALT1_DECS + VS_UC_FORMAT_DESC];
 839   2                      return;
 840   2                      
 841   2              }
 842   1              if(DescID == PWLINE_CTRL){
 843   2                      //if(xCheckState02 == FALSE){
 844   2                              wTabAddr = (WORD)&PwrLineCtrl; // 
 845   2                      //}else{
 846   2                      //      wTabAddr = (WORD)&PwrLineCtrlCN; // China
 847   2                      //}
 848   2                      return;
 849   2              }
 850   1              if((DescID>=WBTEMPAUTO_CTRL) && (DescID <=GET_PRIVACY_ACTIVE)){
 851   2                      wTabAddr = TableAddr[DescID - INTF1_ALT1_DECS + VS_UC_FORMAT_DESC];
 852   2                      if(DescID == GET_RES_TABLE){
 853   3                              xExResTable = FALSE;
 854   3                      }                       
 855   2      
 856   2                      if((DescID ==GET_HIGH_AUTOMAIC_TAB)&&(xBDGP16 == 1))
 857   2                      {  //no MJ
 858   3                              wTabAddr = (WORD)&HighStrmFormatTab_AX;
 859   3                      }
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 15  

 860   2      
 861   2                      if((DescID ==GET_FULL_AUTOMAIC_TAB)&&(xBDGP16 == 1))
 862   2                      {   //no MJ
 863   3                              wTabAddr = (WORD)&FullStrmFormatTab_AX;
 864   3                      }
 865   2                      
 866   2                      return;
 867   2              }
 868   1              if((DescID >=GET_SENSETTING_TAB01) && (DescID <= GET_SENSETTING_TAB0A)){
 869   2                      switch(DescID){
 870   3                              case GET_SENSETTING_TAB01:
 871   3                      wTabAddr = *((WORD*)&SetTab01);
 872   3                          break;
 873   3                  case GET_SENSETTING_TAB02:
 874   3                          wTabAddr = *((WORD*)&SetTab02);
 875   3                      break;
 876   3                      case GET_SENSETTING_TAB03:
 877   3                      wTabAddr = *((WORD*)&SetTab03);
 878   3                          break;
 879   3                  case GET_SENSETTING_TAB04:
 880   3                          wTabAddr = *((WORD*)&SetTab04);
 881   3                      break;
 882   3                      case GET_SENSETTING_TAB05:
 883   3                      wTabAddr = *((WORD*)&SetTab05);
 884   3                          break;
 885   3                      case GET_SENSETTING_TAB06:
 886   3                      wTabAddr = *((WORD*)&SetTab06);
 887   3                          break;
 888   3                      case GET_SENSETTING_TAB07:
 889   3                          wTabAddr = *((WORD*)&SetTab07);
 890   3                      break;
 891   3                      case GET_SENSETTING_TAB08:
 892   3                      wTabAddr = *((WORD*)&SetTab08);
 893   3                          break;
 894   3                      case GET_SENSETTING_TAB09:
 895   3                      wTabAddr = *((WORD*)&SetTab09);
 896   3                          break;
 897   3                      case GET_SENSETTING_TAB0A:
 898   3                      wTabAddr = *((WORD*)&SetTab0A);
 899   3                          break;
 900   3                      }
 901   2                      return;
 902   2              }
 903   1      
 904   1      
 905   1              if((DescID >=GET_RESERVED_1)&& (DescID <= GET_RESERVED_6))
 906   1              {       //now don't be used
 907   2                      return;
 908   2              }
 909   1      
 910   1         //AUDIO_FUN
 911   1         if((DescID >=AU_IAD_DESC_MIC) && (DescID < AU_DMIC_GENER_DESC))
 912   1         {  
 913   2             wTabAddr = TableAddr[DescID-AU_IAD_DESC_MIC+Table_AudioStart];
 914   2              
 915   2               if(DescID == AC_DMIC_IT_DESC)
 916   2              {
 917   3                 if((xHighSpdMode==TRUE) && (bSupFormat&0x80) )
 918   3                 {
 919   4                           wTabAddr =(WORD)&AU_DMIC_ARRAY_IT_Desc;
 920   4                  }
 921   3      
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 16  

 922   3               }
 923   2             return;
 924   2         }
 925   1         if(DescID == AU_DMIC_GENER_DESC){
 926   2                      // It is just a trigger ID
 927   2                      return;
 928   2              }
 929   1          if((DescID >=GET_AU_VOLUMN_MIC) && (DescID <= GET_AU_DELAYTIME))     
 930   1          {
 931   2               wTabAddr = TableAddr[DescID-AU_IAD_DESC_MIC+Table_AudioStart-1];
 932   2      
 933   2               if(DescID ==GET_AU_FORMAT)   
 934   2               {xExAuSetExist=FALSE;}
 935   2      
 936   2               if(DescID ==GET_AU_VOLGGAIN)
 937   2               {  xExVolGainExist=FALSE;    }
 938   2               
 939   2               return;
 940   2           }
 941   1              
 942   1         // Customized table
 943   1         if(DescID>=TOTAL_IDX){
 944   2                      // Table start address is located at code space
 945   2                      // It is physical address of internal code space
 946   2                      DescID = DescID - TOTAL_IDX;
 947   2                      wAddr = DescID;
 948   2                      wAddr = wAddr << 1;                     //a address cover 2 bytes
 949   2                      wAddr += wIdxTabAddrOffset;
 950   2              }
 951   1         // wTabAddr is physical address of external EEPROM/Flash
 952   1         wAddr = wAddr + UPGRADE_RAM_START_ADDR;      //absolute address of data address table
 953   1         wTabAddr = GetTabMapWord(wAddr);                     //data address, address in EEPROM
 954   1      
 955   1      #ifdef OTPFUNENABLE
 956   1              //if(xOTPSettingExist==TRUE)
 957   1              //{//for OTP ring back structure, the offset addr need add the shift
 958   1              //      wTabAddr=(xOTPShift==TRUE)?(wTabAddr+wOTPRingShift):(wTabAddr-wOTPRingShift);
 959   1              //}else
 960   1              //{  //for EEPROM
 961   1      #endif
 962   1                      //wTabAddr=wTabAddr+EEPROM_SAFE_MARGIN+HEADER_INFOR_FIELD_SIZE;
 963   1      #ifdef OTPFUNENABLE
 964   1      //      }
 965   1      #endif
 966   1      
 967   1      xExtendTabMap = TRUE;
 968   1      
 969   1      /*
 970   1      #ifndef DISABLE_SPI            
 971   1         if(wTabAddr < UPGRADE_RAM_START_ADDR ){  
 972   1              // locate in lower 32K EEPROM/Flash
 973   1              wTabAddr = wTabAddr + UPGRADE_RAM_START_ADDR;  //data address which locate in 32k from 0x8000
 974   1         }else{
 975   1              // locate in 32K~64K EEPROM/Flash
 976   1              // Enter into extend table mapping mode
 977   1              // wTabAddr still keep physical address of EEPROM/Flash
 978   1              xExtendTabMap = TRUE;
 979   1              }
 980   1      #else
 981   1          wTabAddr = wTabAddr + UPGRADE_RAM_START_ADDR;
 982   1      
 983   1      #endif
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 17  

 984   1      */
 985   1      }
 986          
 987          /*
 988           re-direct Table pointer routin
 989          */
 990          void   SetPtrTabEx(BYTE iIdxOffset)
 991          {
 992   1          static BYTE data bIdx;
 993   1          static WORD data wAddr;
 994   1          static BYTE idata IdxOffset;
 995   1              BYTE idata testflag=0;  
 996   1      
 997   1              
 998   1          IdxOffset = iIdxOffset;
 999   1      
1000   1          
1001   1              //if(IdxOffset==path_AU_FIRSET)
1002   1              //{     testflag=1;
1003   1                      //UARTString("SetTab");
1004   1              //}
1005   1              
1006   1      //#ifndef DISABLE_SPI
1007   1          xExtendTabMap = FALSE;
1008   1      //#endif    
1009   1          if(xSetFileExist == TRUE){
1010   2              // Mapping to external setting table
1011   2                      wAddr = wSetStartAddr + IdxOffset + UPGRADE_RAM_START_ADDR;
1012   2          }else{
1013   2              // Mapping to internal setting table
1014   2              wAddr = (WORD)&InternalIdxTable[IdxOffset];
1015   2          }
1016   1      
1017   1              //if(testflag)
1018   1              //{//   UARTWord2Hex(wAddr);
1019   1              //    Reg[0xb60]=HiByteOfWord(wAddr);
1020   1            //    Reg[0xb61]=LoByteOfWord(wAddr);
1021   1              //}
1022   1                      switch(IdxOffset){
1023   2                              case path_HSConfigDesc:
1024   2                              case path_FSConfigDesc:
1025   2                              case path_OtherSpeedDesc:
1026   2                          //AUDIO_FUN
1027   2                              //case path_AU_IAD_MIC: //Mark by Eric 20100304
1028   2                                      wTabAddr = wAddr;
1029   2                                      break;
1030   2                              default:
1031   2                                 bIdx = GetTabMapByte(wAddr);
1032   2                                  SetPtrTabById(bIdx);
1033   2      
1034   2                                      
1035   2                                      //if(testflag)
1036   2                                      //{     //UARTByte2Hex(bIdx);
1037   2                                              //UARTWord2Hex(wTabAddr);
1038   2                                              //UARTByte2Hex(xExtendTabMap);
1039   2                                   //   Reg[0xb62]=bIdx;
1040   2                                     // Reg[0xb63]=HiByteOfWord(wTabAddr);
1041   2                                     // Reg[0xb64]=LoByteOfWord(wTabAddr);
1042   2                                 // }
1043   2                                      
1044   2                                      break;
1045   2                      }
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 18  

1046   1      #ifdef  DEBUG_SETTAB
                  UartString("offset");
                  UartByte2Hex(IdxOffset);
                  UartString("id");
                  UartByte2Hex(bIdx);
                  UartString("Addr");
                  UartWord2Hex(wTabAddr);
              #endif
1054   1      
1055   1      }
1056          // Construct external resolution table
1057          static void ConstructResTable(void)
1058          {
1059   1          // reset xExResTable to true, SetPtrTabEx will set xExResTable to false if there is no
1060   1          // external stream table
1061   1          BYTE data i;
1062   1          BYTE data Cnt;
1063   1          xExResTable = TRUE;
1064   1          SetPtrTabEx(path_ResTable);
1065   1          if(xExResTable == TRUE){
1066   2              // Construct external resolution table
1067   2              //  resolution number* 4 bytes
1068   2              Cnt = GetTab(0);
1069   2              Cnt = Cnt*4;
1070   2              for(i=0; i<Cnt; i++){
1071   3                  // Skip resolution cnt in first byte
1072   3                  pbResTable[i] = GetTab(i+1);
1073   3              }
1074   2          }
1075   1      }
1076          // Construct stream format table and stream index sequence
1077          void   ConstructStreamTable(void)
1078          {
1079   1              BYTE data i;
1080   1              BYTE data j;
1081   1          if(xHighSpdMode == TRUE){
1082   2                      SetPtrTabEx(path_HighAUTOGenTable);
1083   2          }else{
1084   2                      SetPtrTabEx(path_FullAUTOGenTable);
1085   2          }
1086   1          // Caculate table length
1087   1      
1088   1          for(i=1, j=5; i<5; i++){  
1089   2              j = j + GetTab(i);
1090   2          }
1091   1              for(i=0; i<j; i++){
1092   2                  pbFmtTab[i] = GetTab(i);
1093   2              }
1094   1              ConstructResTable();
1095   1              ConstrcutStrmIDSequence();
1096   1      }
1097          
1098          // Get table data from temp buffer in XRAM
1099          BYTE GetTabXdata(BYTE index)
1100          {
1101   1          return pbTmpBuf[index];
1102   1      }
1103          
1104          static WORD xdata GetTabMapAddr;
1105          BYTE  GetTabMapByte(WORD wAddr)   //used in Get Tab Map ID
1106          {
1107   1          GetTabMapAddr = wAddr;
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 19  

1108   1          #if 0       
                  if((xExFWExist == TRUE) || (xOTPSettingExist==TRUE) || (xSetFileExist == FALSE)  || (GetTabMapAddr<UPG
             -RADE_RAM_START_ADDR))
                  {
                      if(!(Reg[REG_CODE_SPACE]&APPENDANT_RAM) && (xSetFileExist == TRUE))
                              {return pXData(GetTabMapAddr);}//FW in loading
                      
                      return pCode(GetTabMapAddr);
                  }else{
                      return pXData(GetTabMapAddr);
                  }
                  #endif      
1119   1      
1120   1          if( (GetTabMapAddr>=UPGRADE_RAM_START_ADDR) && (!(Reg[REG_CODE_SPACE]&APPENDANT_RAM)) )
1121   1          {  //only read Upgraded RAM, the upgraded can't be code
1122   2                      #ifndef OTPFUNENABLE
                              if((xExFWExist==FALSE)&&(xSetFileExist==FALSE))
                              {       //run internal code
                                      return pCode(GetTabMapAddr);
                              }
                              #endif
1128   2              
1129   2                      WaitPartialFWLoad();
1130   2                      return pXData(GetTabMapAddr);
1131   2          }else
1132   1          {           
1133   2             
1134   2              return pCode(GetTabMapAddr);
1135   2          }
1136   1      
1137   1      }
1138          WORD  GetTabMapWord(WORD wAddr)
1139          {
1140   1          GetTabMapAddr = wAddr;
1141   1              #if 0   
                  if((xExFWExist == TRUE)|| (xOTPSettingExist==TRUE)  || (xSetFileExist == FALSE) || (GetTabMapAddr<(UPG
             -RADE_RAM_START_ADDR-1)))
                 {
                      if(!(Reg[REG_CODE_SPACE]&APPENDANT_RAM) && (xSetFileExist == TRUE))
                              {return pXData(GetTabMapAddr);}//FW in loading  
                 
                      return pCodeW(GetTabMapAddr);
                  }else{
                      return pXDataW(GetTabMapAddr);
                  }
                  #endif      
1152   1           if( (GetTabMapAddr>=UPGRADE_RAM_START_ADDR) && (!(Reg[REG_CODE_SPACE]&APPENDANT_RAM)) )
1153   1          {
1154   2                      #ifndef OTPFUNENABLE
                              if((xExFWExist==FALSE)&&(xSetFileExist==FALSE))
                              {       //run internal code
                                      return pCodeW(GetTabMapAddr);
                              }
                              #endif
1160   2              
1161   2                      //when FW Loading 
1162   2                      WaitPartialFWLoad();
1163   2                      return pXDataW(GetTabMapAddr);
1164   2          }else
1165   1          {
1166   2                      return pCodeW(GetTabMapAddr);
1167   2          }
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 20  

1168   1      }
1169          
1170          void CheckLoadCacheBufCRC8(WORD wwStartAddr)
1171          {
1172   1              static WORD idata wStartAddr;
1173   1              BYTE idata bOld_FWLoadState=FWS_NORM,checkcount;
1174   1              wStartAddr=wwStartAddr;
1175   1      
1176   1              //UARTString("Load Cahche Buf");
1177   1              //UARTByte2Hex(bCtrlFlowState);
1178   1          if(bFWLoadState!=FWS_NORM)
1179   1          {
1180   2              WaitPartialFWLoad();
1181   2              bOld_FWLoadState=bFWLoadState;//temporally store bFWLoadState 
1182   2              bFWLoadState=FWS_NORM;
1183   2          }
1184   1      
1185   1              checkcount=0;
1186   1      CacheBufCRC8LOOP:       
1187   1      
1188   1              //enable CRC8
1189   1           WriteReg(REG_CRC8LEN_L, 0x40);  //64 byte,CACHE_BUF_LEN
1190   1           WriteReg(REG_CRC8LEN_H, 0x00);
1191   1      
1192   1              /* #ifdef OTPFUNENABLE
1193   1              if(xOTPSettingExist==TRUE) 
1194   1                      WriteReg(REG_CRC8CTRL,EN_CRC8|EN_CRC8MINLEN|EN_OTPCRC); 
1195   1              else
1196   1              #endif  */
1197   1              WriteReg(REG_CRC8CTRL,EN_CRC8|EN_CRC8MINLEN);
1198   1      
1199   1              
1200   1              //for(i=0; i<CACHE_BUF_LEN; i += 32){   //load cachebuffer
1201   1              /*  #ifdef OTPFUNENABLE 
1202   1                 if(xOTPSettingExist==TRUE)
1203   1                      OTPReadData(wStartAddr+i,32, &pbCacheBuf[i]);
1204   1                 else 
1205   1                 #endif*/     
1206   1                      //I2CEEPROMReadData(wStartAddr+i, 32, &pbCacheBuf[i]);
1207   1                  I2CEEPROMReadData(wStartAddr, 32, &pbCacheBuf[0]);
1208   1                  I2CEEPROMReadData(wStartAddr+32, 32, &pbCacheBuf[32]);
1209   1            //}
1210   1      
1211   1              //WriteReg(REG_CRC8CTRL,0x00 );
1212   1              //UARTString("LoadCRC");
1213   1              //UARTWord2Hex(wStartAddr);
1214   1              //UARTByte2Hex(ReadReg(REG_CRC8DATAOUT));
1215   1              if(pbCacheBuf[CACHE_BUF_LEN-1]!=ReadReg(REG_CRC8DATAOUT))
1216   1              {       /*
1217   2                      UARTString("LCRC FAIL");
1218   2                      UARTWord2Hex(wStartAddr);
1219   2                      UARTByte2Hex(pbCacheBuf[CACHE_BUF_LEN-1]);
1220   2                      UARTByte2Hex(ReadReg(REG_CRC8DATAOUT));
1221   2                      */
1222   2                      if(checkcount<3)
1223   2                      {
1224   3                              checkcount++    ;
1225   3                              goto CacheBufCRC8LOOP;  
1226   3                      }
1227   2              wCacheAddr=0;//for CRC Err
1228   2              }
1229   1          if(bOld_FWLoadState!=FWS_NORM)
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 21  

1230   1          {
1231   2              bFWLoadState=bOld_FWLoadState;
1232   2          }       
1233   1      
1234   1      }
1235          
1236          
1237          
1238          // GetTab, GetTabW variable defintion
1239          // For dataoverlay concern, the exported functions should be root tree.
1240          // But to prevent multiple call warning message, we declare local varibles of
1241          // exported functions as module global variable
1242          // For GetTab, GetTabW, we can implement simple data overlay in these two functions
1243          // Lear Hsieh, 2008,Nov, 11
1244          static WORD data GetTabwAddr;
1245          static WORD data GetTabwLen;
1246          static BYTE data GetTabData, GetIndex;
1247          static WORD data GetTabDataW;
1248          
1249          // Get byte by address
1250          BYTE   GetTab(WORD wAddr)
1251          {
1252   1              GetTabwAddr = wAddr;
1253   1      
1254   1              GetTabwAddr = wTabAddr + GetTabwAddr;
1255   1      
1256   1              if(xExtendTabMap == FALSE){
1257   2                      // setting in internal code table         
1258   2                      GetTabData = GetTabMapByte(GetTabwAddr);
1259   2                      return (GetTabData);
1260   2              }
1261   1              
1262   1              //===== setting Data in EEPROM/OTP =====//
1263   1              #ifdef OTPFUNENABLE
1264   1              if(xOTPSettingExist==FALSE) 
1265   1              {       //EEPROM
1266   2              #endif
1267   2      
1268   2              bCacheLen=(GetTabwAddr-wSetFileDataAddr)/63;
1269   2              
1270   2                  GetTabwAddr=GetTabwAddr+bCacheLen;
1271   2              /*
1272   2              //UARTString("Old:");
1273   2              //UARTWord2Hex(GetTabwAddr);
1274   2              //GetIndex=(GetTabwAddr-UPGRADE_RAM_SIZE-HEADER_INFOR_FIELD_SIZE - EEPROM_SAFE_MARGIN+1)>>6; // divid
             -e 64
1275   2              GetIndex=(GetTabwAddr-wSetFileDataAddr+1)>>6;    // addr in EEPROM from setting file data start , /64 
1276   2              //mapping to new addr
1277   2              bCacheLen=(GetTabwAddr+GetIndex-wSetFileDataAddr+1+(GetIndex>>6))>>6;
1278   2      
1279   2              GetTabwAddr=GetTabwAddr+bCacheLen;
1280   2              */
1281   2              #ifdef OTPFUNENABLE 
1282   2              }
1283   1              #endif
1284   1      
1285   1              //UARTString("New:");
1286   1              //UARTWord2Hex(GetTabwAddr);
1287   1      
1288   1              if((wCacheAddr==0)|| ((GetTabwAddr) >(wCacheAddr+CACHE_BUF_LEN-1)) || (GetTabwAddr <wCacheAddr))
1289   1              {       
1290   2                      #ifdef OTPFUNENABLE
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 22  

1291   2                      if(xOTPSettingExist==TRUE) 
1292   2                      {       
1293   3                              wCacheAddr = GetTabwAddr;
1294   3                   WaitPartialFWLoad();
1295   3                              OTPReadData(wCacheAddr,32, pbCacheBuf);
1296   3                              OTPReadData(wCacheAddr+32,32, &pbCacheBuf[32]);
1297   3                      }else
1298   2                      {       //EEPROM
1299   3                      #endif  
1300   3                              wCacheAddr=wSetFileDataAddr+(bCacheLen<<6);
1301   3      
1302   3                              CheckLoadCacheBufCRC8(wCacheAddr);              
1303   3                      #ifdef OTPFUNENABLE 
1304   3                      }
1305   2                      #endif
1306   2              }
1307   1               GetIndex = GetTabwAddr - wCacheAddr;
1308   1      
1309   1              GetTabData = pbCacheBuf[GetIndex];
1310   1      
1311   1              //UARTString("Data:");
1312   1              //UARTByte2Hex(GetTabData);
1313   1      
1314   1              return (GetTabData);
1315   1      }
1316          // Get WORD by address
1317          WORD GetTabW(WORD wAddr)
1318          {
1319   1              
1320   1              GetTabwAddr = wAddr;
1321   1                
1322   1              GetTabwAddr = wTabAddr + GetTabwAddr;
1323   1              
1324   1              if(xExtendTabMap == FALSE){
1325   2                      // setting in internal code table         
1326   2                      GetTabDataW = GetTabMapWord(GetTabwAddr);
1327   2                      return (GetTabDataW);
1328   2              }
1329   1      
1330   1              //===== setting Data in EEPROM/OTP =====//
1331   1              #ifdef OTPFUNENABLE
1332   1              if(xOTPSettingExist==FALSE) 
1333   1              {       //EEPROM
1334   2              #endif
1335   2              
1336   2              bCacheLen=(GetTabwAddr-wSetFileDataAddr)/63;
1337   2              
1338   2                  GetTabwAddr=GetTabwAddr+bCacheLen;
1339   2              /*
1340   2                      GetIndex=(GetTabwAddr-wSetFileDataAddr+1)>>6; // /64
1341   2                      //mapping to new addr
1342   2                      bCacheLen=(GetTabwAddr+GetIndex-wSetFileDataAddr+1+(GetIndex>>6))>>6;
1343   2      
1344   2                      GetTabwAddr=GetTabwAddr+bCacheLen;
1345   2                      */
1346   2              #ifdef OTPFUNENABLE 
1347   2              }
1348   1              #endif
1349   1                      
1350   1                      if((wCacheAddr==0)|| ((GetTabwAddr) >(wCacheAddr+CACHE_BUF_LEN-2)) || (GetTabwAddr <wCacheAddr))
1351   1                      {       
1352   2                              #ifdef OTPFUNENABLE
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 23  

1353   2                              if(xOTPSettingExist==TRUE) 
1354   2                              {       
1355   3                                      wCacheAddr = GetTabwAddr;
1356   3                       WaitPartialFWLoad();
1357   3                                      OTPReadData(wCacheAddr,32, pbCacheBuf);
1358   3                                      OTPReadData(wCacheAddr+32,32, &pbCacheBuf[32]);
1359   3                              }else
1360   2                              {       //EEPROM
1361   3                              #endif  
1362   3                                      wCacheAddr=wSetFileDataAddr+(bCacheLen<<6);
1363   3      
1364   3                                      CheckLoadCacheBufCRC8(wCacheAddr);
1365   3                              #ifdef OTPFUNENABLE 
1366   3                              }
1367   2                              #endif
1368   2                      }
1369   1                       GetIndex = GetTabwAddr - wCacheAddr;
1370   1      
1371   1                      if(GetIndex==CACHE_BUF_LEN-2) //last data in this cache buffer
1372   1                      {
1373   2                              GetTabDataW=pbCacheBuf[GetIndex]<<8;
1374   2                              wCacheAddr=wCacheAddr+CACHE_BUF_LEN;
1375   2      
1376   2                              #ifdef OTPFUNENABLE
1377   2                              if(xOTPSettingExist==TRUE) 
1378   2                              {       
1379   3                                      OTPReadData(wCacheAddr,32, pbCacheBuf);
1380   3                                      OTPReadData(wCacheAddr+32,32, &pbCacheBuf[32]);
1381   3                              }else
1382   2                              {       //EEPROM
1383   3                              #endif  
1384   3                                      CheckLoadCacheBufCRC8(wCacheAddr);
1385   3                              #ifdef OTPFUNENABLE 
1386   3                              }
1387   2                              #endif
1388   2      
1389   2                              GetTabDataW=(GetTabDataW&0xFF00)|pbCacheBuf[0];
1390   2                      }else
1391   1                      {
1392   2                               GetTabDataW = *((WORD*)&pbCacheBuf[GetIndex]);
1393   2                      }
1394   1      
1395   1              return  (GetTabDataW);
1396   1      }
1397          
1398          #if 0
              BYTE   GetTab(WORD wAddr)
              {
                  GetTabwAddr = wAddr;
              #ifndef DISABLE_SPI
                  if(xExtendTabMap == FALSE){
              #endif        
                      // GetTabwAddr is locate in 0~64K
                      GetTabwAddr = wTabAddr + GetTabwAddr;  //the real address in EEPROM
                      
              #if 1
                      if((GetTabwAddr < INTERNAL_CODE_SPACE_UPBOUND) || (xOTPSettingExist==TRUE)){            
                          GetTabData = GetTabMapByte(GetTabwAddr);
                          return (GetTabData);
                      }else{
                          // Remap GetTabwAddr to physical EEPROM/Flash address
                          GetTabwAddr = GetTabwAddr - UPGRADE_RAM_START_ADDR + HEADER_INFOR_FIELD_SIZE + EEPROM_SAFE_MAR
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 24  

             -GIN;
                      }
              #else
                      if(GetTabwAddr < UPGRADE_RAM_START_ADDR){
                          GetTabData = pCode(GetTabwAddr);
                          return (GetTabData);
                      }else{
                          // Remap GetTabwAddr to physical EEPROM/Flash address
                          GetTabwAddr = GetTabwAddr - UPGRADE_RAM_START_ADDR + HEADER_INFOR_FIELD_SIZE + EEPROM_SAFE_MAR
             -GIN;
                      }
              #endif
              #ifndef DISABLE_SPI
                  }else{
                       // locate in 32K~64K EEPROM/Flash
                        GetTabwAddr = wTabAddr + GetTabwAddr;
                      GetTabwAddr = GetTabwAddr + HEADER_INFOR_FIELD_SIZE + EEPROM_SAFE_MARGIN;
                  }
              #endif
              
                      //UARTString("Old:");
                      //UARTWord2Hex(GetTabwAddr);
              
                      GetIndex=(GetTabwAddr-UPGRADE_RAM_SIZE-HEADER_INFOR_FIELD_SIZE - EEPROM_SAFE_MARGIN+1)>>6; // divide 64
                      //mapping to new addr
                      bCacheLen=(GetTabwAddr+GetIndex-UPGRADE_RAM_SIZE-HEADER_INFOR_FIELD_SIZE - EEPROM_SAFE_MARGIN+1)>>6;
              
                      GetTabwAddr=GetTabwAddr+bCacheLen;
              
                      //UARTString("New:");
                      //UARTWord2Hex(GetTabwAddr);
              
                      if((wCacheAddr==0)|| ((GetTabwAddr) >(wCacheAddr+CACHE_BUF_LEN-2)) || (GetTabwAddr <wCacheAddr))
                      {               
                              wCacheAddr=UPGRADE_RAM_SIZE+HEADER_INFOR_FIELD_SIZE + EEPROM_SAFE_MARGIN+(bCacheLen<<6);
              
                              CheckLoadCacheBufCRC8(wCacheAddr);              
                      }
                       GetIndex = GetTabwAddr - wCacheAddr;
              
              /*
                  // check whether we should update cache buffer or not
                  if((bCacheLen == 0) || (GetTabwAddr >=(wCacheAddr+bCacheLen)) || (GetTabwAddr <wCacheAddr)){
                        //load data from EEPROM to catch buffer 
                        wCacheAddr = GetTabwAddr;
                      GetTabwLen = wEEPROMSize - wCacheAddr;
                      if(GetTabwLen > CACHE_BUF_LEN){
                          for(GetIndex=0; GetIndex<CACHE_BUF_LEN; GetIndex += 32){
                              I2CEEPROMReadData(wCacheAddr+GetIndex, 32, &pbCacheBuf[GetIndex]);
                          }
                          bCacheLen = CACHE_BUF_LEN;
                      }else{
                          GetIndex = 0;
                          bCacheLen = GetTabwLen;
                          while(GetTabwLen){
                              if(GetTabwLen>=32){
                                  I2CEEPROMReadData(wCacheAddr+GetIndex, 32, &pbCacheBuf[GetIndex]);
                                  GetTabwLen = GetTabwLen - 32;
                                  GetIndex = GetIndex + 32;
                              }else{
                                  I2CEEPROMReadData(wCacheAddr+GetIndex, GetTabwLen, &pbCacheBuf[GetIndex]);
                                  break;
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 25  

                              }
                          }
                      }
                  }
                  GetIndex = GetTabwAddr - wCacheAddr;
              
              */
                  GetTabData = pbCacheBuf[GetIndex];
              
                      //UARTString("Data:");
                      //UARTByte2Hex(GetTabData);
              
                  return (GetTabData);
              }
              #endif
1490          // 2009,04,29 Lear modified for code size reduce
1491          // Get WORD by address
1492          // To reduce code size
1493          #if 0
              
              // Get WORD by address
              WORD GetTabW(WORD wAddr)
              {
                  
                  GetTabwAddr = wAddr;
              #ifndef DISABLE_SPI
                  if(xExtendTabMap == FALSE){
              #endif        
                      // wAddr is locate in 0~64K
                      GetTabwAddr = wTabAddr + GetTabwAddr;
              #if 1
                      if((GetTabwAddr < (INTERNAL_CODE_SPACE_UPBOUND-1))|| (xOTPSettingExist==TRUE)){ // Lear modified, 
             -should concern length exceed code space boundary
                          GetTabDataW = GetTabMapWord(GetTabwAddr);
                           return (GetTabDataW);
                      }else{
              
                              if(GetTabwAddr==(INTERNAL_CODE_SPACE_UPBOUND-1))
                              {       
                                      GetTabDataW=GetTabMapByte(GetTabwAddr)<<8;
                                      
                                      wCacheAddr=UPGRADE_RAM_SIZE+HEADER_INFOR_FIELD_SIZE + EEPROM_SAFE_MARGIN;
                      
                                      CheckLoadCacheBufCRC8(wCacheAddr);
                                      
                                      GetTabDataW=(GetTabDataW&0xFF00)|pbCacheBuf[0];
              
                                      return GetTabDataW;
                              }
                              
                          // Remap GetTabwAddr to physical EEPROM/Flash address
                          GetTabwAddr = GetTabwAddr - UPGRADE_RAM_START_ADDR + HEADER_INFOR_FIELD_SIZE + EEPROM_SAFE_MAR
             -GIN;
                      }
              #else
                      if(GetTabwAddr < (UPGRADE_RAM_START_ADDR-1)){ // Lear modified, should concern length exceed code 
             -space boundary
                          GetTabDataW = pCode(GetTabwAddr);
                           return (GetTabDataW);
                      }else{
                          // Remap GetTabwAddr to physical EEPROM/Flash address
                          GetTabwAddr = GetTabwAddr - UPGRADE_RAM_START_ADDR + HEADER_INFOR_FIELD_SIZE + EEPROM_SAFE_MAR
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 26  

             -GIN;
                      }
              
              #endif
              #ifndef DISABLE_SPI
                  }else{
                      GetTabwAddr = wTabAddr + GetTabwAddr;
                      GetTabwAddr = GetTabwAddr + HEADER_INFOR_FIELD_SIZE + EEPROM_SAFE_MARGIN;
                  }
              #endif    
              
              //UARTString("Ow:");
              //      UARTWord2Hex(GetTabwAddr);
              
              GetIndex=(GetTabwAddr-UPGRADE_RAM_SIZE-HEADER_INFOR_FIELD_SIZE - EEPROM_SAFE_MARGIN+1)>>6; // /64
              //mapping to new addr
              bCacheLen=(GetTabwAddr+GetIndex-UPGRADE_RAM_SIZE-HEADER_INFOR_FIELD_SIZE - EEPROM_SAFE_MARGIN+1)>>6;
              
              GetTabwAddr=GetTabwAddr+bCacheLen;
              
              //UARTString("Nw:");
              //UARTWord2Hex(GetTabwAddr);
              
              if((wCacheAddr==0)|| ((GetTabwAddr) >(wCacheAddr+CACHE_BUF_LEN-2)) || (GetTabwAddr <wCacheAddr))
              {               
                      wCacheAddr=UPGRADE_RAM_SIZE+HEADER_INFOR_FIELD_SIZE + EEPROM_SAFE_MARGIN+(bCacheLen<<6);
              
                      CheckLoadCacheBufCRC8(wCacheAddr);
              }
               GetIndex = GetTabwAddr - wCacheAddr;
              
              if(GetIndex==CACHE_BUF_LEN-2) //last data in this cache buffer
              {
                      GetTabDataW=pbCacheBuf[GetIndex]<<8;
                      wCacheAddr=wCacheAddr+CACHE_BUF_LEN;
                      
                      CheckLoadCacheBufCRC8(wCacheAddr);
              
                      GetTabDataW=(GetTabDataW&0xFF00)|pbCacheBuf[0];
              }else
              {
                       GetTabDataW = *((WORD*)&pbCacheBuf[GetIndex]);
              }
              
              
              /*
                  if((bCacheLen == 0) || ((GetTabwAddr+1) >=(wCacheAddr+bCacheLen)) || (GetTabwAddr <wCacheAddr)){
                      wCacheAddr = GetTabwAddr;
                      GetTabwLen = wEEPROMSize - wCacheAddr;
                      if(GetTabwLen > CACHE_BUF_LEN){
                          for(GetIndex=0; GetIndex<CACHE_BUF_LEN; GetIndex += 32){
                              I2CEEPROMReadData(wCacheAddr+GetIndex, 32, &pbCacheBuf[GetIndex]);
                          }
                          bCacheLen = CACHE_BUF_LEN;
                      }else{
                          GetIndex = 0;
                          bCacheLen = GetTabwLen;
                          while(GetTabwLen){
                              if(GetTabwLen>=32){
                                  I2CEEPROMReadData(wCacheAddr+GetIndex, 32, &pbCacheBuf[GetIndex]);
                                  GetTabwLen = GetTabwLen - 32;
                                  GetIndex = GetIndex + 32;
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 27  

                              }else{
                                  I2CEEPROMReadData(wCacheAddr+GetIndex, GetTabwLen, &pbCacheBuf[GetIndex]);
                                  break;
                              }
                          }
                      }
                  }
              
              
                      
                  GetIndex = GetTabwAddr - wCacheAddr;
              */
                 //UARTString("wData:");
              //              UARTWord2Hex(GetTabDataW);
                  return  (GetTabDataW);
              }
              #endif
1612          // Caculate configuration descriptor wTotalLength
1613          WORD GetConfigLength(void)
1614          {
1615   1      
1616   1              VS_STREAM_FMT_TAB xdata * idata pFmtTab;
1617   1          WORD idata wTotalLength;
1618   1          WORD idata wTotalFrmInterval;
1619   1          BYTE idata Cnt;
1620   1          BYTE idata Idx;
1621   1              BYTE idata Fps;
1622   1          BYTE idata i;
1623   1      
1624   1          pFmtTab = (VS_STREAM_FMT_TAB * )pbFmtTab;
1625   1          // Caculate wTotalLength of configuration descriptor
1626   1          // wTotalLength = ConfigDesc (0x9) + IAD(0x8) + Inft0Desc(0x9) + CS VC Intf Header(0xD)
1627   1          // EXUNIT(0x1C) + CameraTerm(0x12) + PUDesc(0xB) + OutputTerm(0x9)+ EP1Desc(0x7) + CSVCEP1(0x5)
1628   1          // VS ST INTF1 Desc(0x9) + CS VS Input header (0xD+ format number) + Format1Desc (0x1B)
1629   1          // Frame1Desc (0x1A*Fmt1Framnumber+TimerIntervalNumber*4) + ColorMatch (0x6) + Fmt1StillDesc(0x6+0x4*S
             -till1Number) + Format2Desc(0x0B)
1630   1          // + Frame2Desc (0x1A * Fmt2Framenumber+TimerIntervalNumber*4) + ColorMatch(0x6) + Fmt2StillDesc(0x6+0
             -x4*Still2Number) + 4* (IntfDesc (0x9))
1631   1          // + 4*EP (0x7)
1632   1          // wTotalLength = ( 0x9+0x8+0x9+0xD+0x1C+0x12+0xB+0x9+0x7+0x5+0x9+0xD+0x6+0x6+0x40) = 0xD7
1633   1          //              = +(Format Number) + 0x1A*(Fmt1FrameNum)+ 0x4*(Still1Num) + 0x1A*(Fmt2FrameNum) + 0x4*
             -(Still2Num)
1634   1          //              = + 4*(Total Frame interval)+
1635   1          //              = if(YUY && MJPEG){ + 0x1b+0x0b} else if(YUY){+0x1b}else if(MJPEG){+0x0b}
1636   1      
1637   1          // Get total frame interval size
1638   1          wTotalFrmInterval = 0;
1639   1          if(pFmtTab->FmtList & (YUY2_MJPEG|MJPEG_YUY2)){
1640   2                      wTotalLength = 0;
1641   2                      do{
1642   3                              if(wTotalLength == 0){
1643   4                                      Cnt = pFmtTab->F1FrameNum;
1644   4                              i = Cnt + 0x5;
1645   4                              }else{
1646   4                              Cnt = pFmtTab->F2FrameNum;
1647   4                              i = 0x5 + pFmtTab->F1FrameNum + pFmtTab->F1StillNum + Cnt;
1648   4                              }
1649   3                              while(Cnt != 0){
1650   4                                      Idx = pbFmtTab[i - 1];
1651   4                                      if(pFmtTab->FmtList & YUY2_MJPEG){
1652   5                                              if(wTotalLength == 0){
1653   6                                                      Fps = MODE_YUV;
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 28  

1654   6                                              }else{
1655   6                                                      Fps = MODE_MJPEG;
1656   6                                              }
1657   5                                      }else{
1658   5                                              if(wTotalLength == 0){
1659   6                                                      Fps = MODE_MJPEG;
1660   6                                              }else{
1661   6                                                      Fps = MODE_YUV;
1662   6                                              }
1663   5                      }
1664   4                                      //if(xFrameRateV2 == FALSE){
1665   4                                      //      CaculateFrmRate(Idx, Fps);
1666   4                                      //}else{
1667   4                                              CaculateFrmRateV2(Idx, Fps);                                            
1668   4                                      //}
1669   4                          // wTotalFrmInterval = wTotalFrmInterval + Interval_Idx_Tab[Fps].nFrmCnt;
1670   4                          wTotalFrmInterval = wTotalFrmInterval + pbFrmTable[0];
1671   4                      Cnt--;
1672   4                          i --;
1673   4                      }
1674   3                              wTotalLength++;
1675   3                      }while(wTotalLength<2);
1676   2          }else{
1677   2              Cnt = pFmtTab->F1FrameNum;
1678   2              i = Cnt + 0x5;
1679   2              while(Cnt != 0){
1680   3                  // Idx = pFmtTab->F1FrmOrder[i-1];
1681   3                  Idx = pbFmtTab[i - 1];
1682   3                              if(pFmtTab->FmtList & YUY2ONLY){
1683   4                                      Fps = MODE_YUV;
1684   4                              }else{
1685   4                                      Fps = MODE_MJPEG;
1686   4                              }
1687   3                              //if(xFrameRateV2 == FALSE){
1688   3                              //      CaculateFrmRate(Idx, Fps);
1689   3                              //}else{
1690   3                                      CaculateFrmRateV2(Idx, Fps);                                            
1691   3                              //}
1692   3                  // wTotalFrmInterval = wTotalFrmInterval + Interval_Idx_Tab[Fps].nFrmCnt;
1693   3                  wTotalFrmInterval = wTotalFrmInterval + pbFrmTable[0];
1694   3                  Cnt--;
1695   3                  i--;
1696   3              }
1697   2          }
1698   1          wTotalFrmInterval = wTotalFrmInterval*4;
1699   1          // Keep Total Frame interval length
1700   1          wFrmIntervalLen = wTotalFrmInterval;
1701   1          if(pFmtTab->FmtList & (YUY2_MJPEG|MJPEG_YUY2)){
1702   2              // Support two formats
1703   2              wTotalLength = 0x2 + 0x1A*pFmtTab->F1FrameNum + 0x4*pFmtTab->F1StillNum+ 0x1A*pFmtTab->F2FrameNum 
             -+
1704   2                             0x4*pFmtTab->F2StillNum + 0x26 + 0xD7 + 0xC + wTotalFrmInterval;
1705   2      
1706   2                      if(pFmtTab->F2StillNum == 0x0){  //deleate stillImage basic Desc
1707   3                              wTotalLength=wTotalLength-6;
1708   3                      }
1709   2          }else{
1710   2                  // wTotalLength = 0x1 + 0x1A*pFmtTab->F1FrameNum + 0x4*pFmtTab->F1StillNum + 0x1B + 0xD6 + wTotalFrmI
             -nterval;
1711   2                  wTotalLength = 0x1 + 0x1A*pFmtTab->F1FrameNum + 0x4*pFmtTab->F1StillNum + 0xD7 + wTotalFrmInterval;
1712   2                      if(pFmtTab->FmtList & YUY2ONLY){
1713   3                              wTotalLength = wTotalLength + 0x1B;
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 29  

1714   3                      }else{
1715   3                              wTotalLength = wTotalLength + 0x0B;
1716   3                      }
1717   2          }
1718   1              if(pFmtTab->F1StillNum == 0x0){
1719   2                      //deleate stillImage basic Desc
1720   2                      wTotalLength=wTotalLength-6;    
1721   2              }                               
1722   1              //if((pFmtTab->F1StillNum == 0x0) && ((pFmtTab->F2StillNum == 0x0))){ 
1723   1              //      wTotalLength =(pFmtTab->FmtList & (YUY2_MJPEG|MJPEG_YUY2))? (wTotalLength - 12):(wTotalLength - 6);     
1724   1              //}
1725   1              
1726   1          //UARTByte2Hex(pFmtTab->F1FrameNum);
1727   1          //UARTByte2Hex(pFmtTab->F2FrameNum);
1728   1          //UARTByte2Hex(pFmtTab->F1StillNum);
1729   1          //UARTByte2Hex(pFmtTab->F2StillNum);
1730   1          //UARTWord2Hex(wTotalLength);
1731   1      
1732   1              //if(pCustomizeDesc != 0x0)
1733   1              {
1734   2                      if(xHighSpdMode == TRUE)
1735   2                      {               
1736   3                      //AUDIO_FUN
1737   3                      if(bDMICInput!=MICSEL_NONE)
1738   3                              wTotalLength=wTotalLength+69+(40+((bNumOfSup&0x0f)*3))*((bNumOfSup>>4)&0x0f);  //only mic       
1739   3      
1740   3                      if(pCustomizeDesc != 0x0)
1741   3                              {// HighSpeed Extra Descriptor Length
1742   4                                      wTotalLength = wTotalLength + pCustomizeDesc->bHighConfigLen;   
1743   4                              }
1744   3                      }else  //full speed
1745   2                      {       
1746   3                              // FullSpeed Extra Descriptor Length
1747   3                              if(bDMICInput!=MICSEL_NONE)
1748   3                                      wTotalLength=wTotalLength+115;//69+43+3;    //only mic support 8 and 16k
1749   3      
1750   3                         if(pCustomizeDesc != 0x0)
1751   3                              {       // FullSpeed Extra Descriptor Length
1752   4                                      wTotalLength = wTotalLength + pCustomizeDesc->bFullConfigLen;   
1753   4                              }
1754   3                      } 
1755   2              }
1756   1          
1757   1              if(xEnableHID)
1758   1              {       wTotalLength=wTotalLength+25;//HID Interface len+ HID Desc length +EP1len
1759   2              }
1760   1              return wTotalLength;
1761   1      }
1762          void ConstructStrmCurSet(BOOLEAN ibStill)
1763          {
1764   1      
1765   1          // VS_STREAM_FMT_TAB xdata * idata pFmtTab;
1766   1          BYTE data FrameIdx, nFPS;
1767   1          DWORD   data dwInterval;
1768   1          BYTE    data FrameCnt;
1769   1          WORD    data wTemp;
1770   1          BOOLEAN  data bStill;
1771   1          bStill = ibStill;
1772   1      
1773   1          // pFmtTab = (VS_STREAM_FMT_TAB * )pbFmtTab;
1774   1      
1775   1          if(bStill == FALSE){
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 30  

1776   2              // Video Probe/Commit SET_CUR
1777   2              VideoProbeCommitCtrls.bFormatIndex = pbIBuf[2];
1778   2              VideoProbeCommitCtrls.bFrameIndex  = pbIBuf[3];
1779   2              Byte0OfDWord(dwInterval) = pbIBuf[4];
1780   2              Byte1OfDWord(dwInterval) = pbIBuf[5];
1781   2              Byte2OfDWord(dwInterval) = pbIBuf[6];
1782   2              Byte3OfDWord(dwInterval) = pbIBuf[7];
1783   2              // Get format/ frame resolution
1784   2              // for code size optimize, access memory offset without data struct pointer
1785   2              FrameCnt = 0x5 + VideoProbeCommitCtrls.bFrameIndex - 0x1;
1786   2              if(VideoProbeCommitCtrls.bFormatIndex != 1){
1787   3                  FrameCnt = FrameCnt + pbFmtTab[0x1] + pbFmtTab[0x2];
1788   3              }
1789   2                      FrameIdx = pbFmtTab[FrameCnt];
1790   2              VideoProbeCommitCtrls.bResIdx = FrameIdx;
1791   2              wTemp = GetExResTable(FrameIdx, GET_WIDTH);
1792   2              StrmCurSet.wVWidth = wTemp;
1793   2              wTemp = GetExResTable(FrameIdx, GET_HEIGHT);
1794   2              StrmCurSet.wVHeight = wTemp;
1795   2              // Get correct format
1796   2              if(pbFmtTab[0] &(YUY2ONLY|YUY2_MJPEG)){
1797   3                  if(VideoProbeCommitCtrls.bFormatIndex == 1){
1798   4                      StrmCurSet.bVFormat = FMT_YUY2;
1799   4                  }else{
1800   4                      StrmCurSet.bVFormat = FMT_MJPEG;
1801   4                  }
1802   3              }else{
1803   3                  if(VideoProbeCommitCtrls.bFormatIndex == 1){
1804   4                      StrmCurSet.bVFormat = FMT_MJPEG;
1805   4                  }else{
1806   4                      StrmCurSet.bVFormat = FMT_YUY2;
1807   4                  }
1808   3              }
1809   2      
1810   2              // Get Max FPS from FrameIdx
1811   2              //if(xFrameRateV2 == FALSE){
1812   2                      //if(StrmCurSet.bVFormat == FMT_YUY2){
1813   2                 //   nFPS = CaculateFrmRate(FrameIdx, MODE_YUV);
1814   2                  //    }else{
1815   2                //      nFPS = CaculateFrmRate(FrameIdx, MODE_MJPEG);
1816   2              //      }
1817   2              //}else{
1818   2                      if(StrmCurSet.bVFormat == FMT_YUY2){
1819   3                      nFPS = CaculateFrmRateV2(FrameIdx, MODE_YUV);
1820   3                      }else{
1821   3                      nFPS = CaculateFrmRateV2(FrameIdx, MODE_MJPEG);
1822   3                      }
1823   2              //}
1824   2              // FrameCnt = Interval_Idx_Tab[nFPS].nFrmCnt;
1825   2              FrameCnt = pbFrmTable[0];
1826   2              // Default is Maximum frame rate
1827   2              // get FPS from dwFrameInterval
1828   2              // FrameIdx for temporary usage
1829   2              for(FrameIdx=FrameCnt; FrameIdx>0; FrameIdx--){
1830   3                              if(FPS_Table[GetFPSTableIndex(pbFrmTable[FrameIdx])] <= dwInterval){
1831   4                                      FrameIdx = pbFrmTable[FrameIdx];
1832   4                      break;
1833   4                  }
1834   3              }
1835   2      
1836   2                //Exposture Time Abs Ctrl
1837   2                if( VideoProbeCommitCtrls.CurFPS != FrameIdx)
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 31  

1838   2                {
1839   3                              dwETAbs=FPS_Table[GetFPSTableIndex(FrameIdx)]/1000; 
1840   3                }
1841   2                      
1842   2              VideoProbeCommitCtrls.CurFPS = FrameIdx;
1843   2              StrmCurSet.bFrameRate = FrameIdx+1;
1844   2      #ifdef DEBUG_PROB
                      UartString("prob frame");
                      UartByte2Hex(FrameIdx);
                      UartByte2Hex(StrmCurSet.bVFormat);
                      UartWord2Hex(StrmCurSet.wVWidth);
                      UartWord2Hex(StrmCurSet.wVHeight);
                      UartByte2Hex(StrmCurSet.bFrameRate);
              #endif
1852   2      
1853   2          }else{
1854   2              // Sill Probe/Commit SET_CUR
1855   2              StillProbeCommitCtrls.bFormatIndex = pbIBuf[0];
1856   2              StillProbeCommitCtrls.bFrameIndex  = pbIBuf[1];
1857   2                      FrameCnt = 0x5 + pbFmtTab[0x1] + StillProbeCommitCtrls.bFrameIndex - 0x1;
1858   2              if(StillProbeCommitCtrls.bFormatIndex != 1){
1859   3                      FrameCnt = FrameCnt + pbFmtTab[0x2] + pbFmtTab[0x3];
1860   3              }
1861   2              FrameIdx = pbFmtTab[FrameCnt];
1862   2              StillProbeCommitCtrls.bResIdx = FrameIdx;
1863   2              wTemp = GetExResTable(FrameIdx, GET_WIDTH);
1864   2              StrmCurSet.wSWidth = wTemp;
1865   2              wTemp = GetExResTable(FrameIdx, GET_HEIGHT);
1866   2              StrmCurSet.wSHeight = wTemp;
1867   2              if(pbFmtTab[0] &(YUY2ONLY|YUY2_MJPEG)){
1868   3                  if(StillProbeCommitCtrls.bFormatIndex == 1){
1869   4                      StrmCurSet.bSFormat = FMT_YUY2;
1870   4                  }else{
1871   4                      StrmCurSet.bSFormat = FMT_MJPEG;
1872   4                  }
1873   3              }else{
1874   3                  if(StillProbeCommitCtrls.bFormatIndex == 1){
1875   4                      StrmCurSet.bSFormat = FMT_MJPEG;
1876   4                  }else{
1877   4                      StrmCurSet.bSFormat = FMT_YUY2;
1878   4                  }
1879   3              }
1880   2          }
1881   1      #ifdef DEBUG_PROB
                  UartString("prob still");
                  UartByte2Hex(StrmCurSet.bSFormat);
                  UartWord2Hex(StrmCurSet.wSWidth);
                  UartWord2Hex(StrmCurSet.wSHeight);
              #endif
1887   1      
1888   1      }
1889          
1890          void ConstructDefStremSet(void)
1891          {
1892   1          BYTE data i;
1893   1          // Construct Video
1894   1          VideoProbeCommitCtrls.bFormatIndex = 0x1;
1895   1              VideoProbeCommitCtrls.bFrameIndex = 0x1;
1896   1              VideoProbeCommitCtrls.bResIdx = pbFmtTab[0x5]; // F1FrmOrder 1st element
1897   1              i = pbFmtTab[0x5];
1898   1              // Max FPS
1899   1              /*if(xFrameRateV2 == FALSE){
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 32  

1900   1                      if( pbFmtTab[0x0]& (YUY2ONLY|YUY2_MJPEG)){
1901   1                      i = CaculateFrmRate(i, MODE_YUV);
1902   1                  }else{
1903   1                  i = CaculateFrmRate(i, MODE_MJPEG);
1904   1              }
1905   1              }else{
1906   1              */if( pbFmtTab[0x0]& (YUY2ONLY|YUY2_MJPEG)){
1907   2                      i = CaculateFrmRateV2(i, MODE_YUV);
1908   2               }else{
1909   2                   i = CaculateFrmRateV2(i, MODE_MJPEG);
1910   2          }
1911   1              //}
1912   1          if(i>0){
1913   2              VideoProbeCommitCtrls.CurFPS = i; // zero base
1914   2          }else{
1915   2              VideoProbeCommitCtrls.CurFPS = 1; // something wrong here
1916   2          }
1917   1              // Construct Still
1918   1              StillProbeCommitCtrls.bFormatIndex = 0x1;
1919   1              StillProbeCommitCtrls.bFrameIndex = 0x1;
1920   1              i = 0x5 + pbFmtTab[0x1];
1921   1              StillProbeCommitCtrls.bResIdx = pbFmtTab[i];
1922   1      }
1923          /*
1924          code BYTE FRAMERATE_VER2[] = 
1925          {
1926          'A', 'L', 'V', '2'
1927          };
1928          #define FRAMERATE_VER_LENG (sizeof(FRAMERATE_VER2))
1929          void CheckFrameRateSetVer(void)
1930          {
1931                  WORD data wTempAddr;
1932                  BYTE data i;
1933                  wTempAddr = wTabAddr;
1934                  xFrameRateV2 = TRUE;
1935                  SetPtrTabEx(path_FrmRateTab);
1936                  for(i=0; i<FRAMERATE_VER_LENG; i++){
1937                          if(GetTab(i+MAX_SUPPORT_FRAME_NUM*2) != FRAMERATE_VER2[i]){
1938                                  xFrameRateV2 = FALSE;
1939                                  break;
1940                          }
1941                  }
1942                  wTabAddr = wTempAddr;
1943          
1944          }
1945          */
1946          
1947          // To prevent data overlay error, define local variable as module static variable
1948          
1949          // Caculate maximum frame rate
1950          // In YUV mode, the bottleneck is USB bandwidth
1951          // The bandwidth in high speed is 3072*8*1000 (24576000 Bytes/sec)
1952          // The bandwidth in full speed is 1023*1000   (1023000 Bytes/secs)
1953          // In MJPEG mode, the bottleneck is backend pixel clock
1954          // For CK, the maximum pixel clock is 65M Bytes/sec
1955          // The bandwidth is 65000000 bytes
1956          
1957          // 2009,04,30 Lear modified
1958          // Add customised frame interval for high/full speed mode
1959          // The new architectural are 100% backward compatible
1960          // The return value will stored in pbFrmTable
1961          
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 33  

1962          #define HIGHSPD_BANWIDHTH   (24576000)
1963          #define FULLSPD_BANDWIDTH_HALF   (511500)
1964          #define CK_PIXELCLK         (65000000)
1965          // 2009,05,04 Lear added
1966          // External FrameRate Setting Ver 2, the new setting are backward compatible
1967          // The layout described below
1968          // 
1969          // High Speed Foramt 1 FrameRate Table 16 bytes
1970          // High Speed Format 2 FrameRate Table 16 bytes
1971          // 'A' 'L' 'V' '2' signature -->Indicates version 2
1972          // Full Speed Format 1 FrameRate Count, 1 Byte
1973          // Full Speed Format 1 FrameRate Table
1974          // Full Speed Format 2 FrameRate Count, 1 Byte
1975          // Full Speed format 2 FrameRate Table
1976          // Customised framerate table
1977          // Cnt, Rate1, Rate2, Rate3, Rate4, Rate5, Rate6
1978          
1979          BYTE CaculateFrmRateV2(BYTE iResIdx, BYTE iMode)
1980          {
1981   1              static BYTE idata ResIdx,Mode;
1982   1              BYTE idata MaxFrmRate;
1983   1              BOOLEAN idata bFirstFmt;
1984   1              WORD    idata wTmpAddr;
1985   1          DWORD   idata dwSize;
1986   1              BYTE    idata i;
1987   1              BYTE    idata j;
1988   1              ResIdx=iResIdx;
1989   1              Mode=iMode;
1990   1              
1991   1              // Get format order
1992   1              bFirstFmt = FALSE;
1993   1              // YUY2 must be first
1994   1              if(Mode == MODE_YUV){
1995   2                      bFirstFmt = TRUE;
1996   2              }
1997   1          
1998   1          wTmpAddr = wTabAddr;  //push
1999   1          SetPtrTabEx(path_FrmRateTab);
2000   1          if(xHighSpdMode == TRUE){
2001   2                      if(bFirstFmt == TRUE){
2002   3                              i = ResIdx;
2003   3                      }else{
2004   3                              i = ResIdx + MAX_SUPPORT_FRAME_NUM;
2005   3                      }
2006   2               MaxFrmRate = GetTab(i);
2007   2          }else{
2008   2            // Full Speed
2009   2               //Get Image Size
2010   2               MaxFrmRate = GetExResTable(ResIdx, GET_WIDTH);
2011   2               dwSize = GetExResTable(ResIdx, GET_HEIGHT);
2012   2               dwSize = dwSize*MaxFrmRate; 
2013   2                i = MAX_SUPPORT_FRAME_NUM*2;
2014   2                j= GetTab(i);  //j:YUV frame rate number in Full Speed
2015   2      
2016   2                MaxFrmRate = 0;
2017   2                  if(bFirstFmt == TRUE){
2018   3                   //YUV
2019   3                      if(j==0)
2020   3                      {    // frame rate by image size  // Full speed mode, only support to 352*288       
2021   4                            if(dwSize <= 0x18C00){    // 352*288
2022   5                               //Patch 8051 DWORD calculate error 
2023   5                              if(dwSize<0x17050)//(FULLSPD_BANDWIDTH_HALF/30)
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 34  

2024   5                                  MaxFrmRate=30;
2025   5                              else                        
2026   5                                MaxFrmRate = FULLSPD_BANDWIDTH_HALF/dwSize; 
2027   5                            } 
2028   4                            /*
2029   4                            if(MaxFrmRate>30)
2030   4                                  MaxFrmRate=30;
2031   4                            */      
2032   4                      }else
2033   3                      {   i = ResIdx + i + 1;
2034   4                            MaxFrmRate = GetTab(i);
2035   4                      }    
2036   3                      }else{
2037   3                          //MJ
2038   3                              i = i + 1 + j;   
2039   3                      j= GetTab(i);   //j: MJ frame rate number in Full Speed 
2040   3      
2041   3                      if(j==0)
2042   3                      {    // frame rate by image size  // Full speed mode, only support to 352*288       
2043   4                         if(dwSize <= 0x140000)//1280*1024    //0x4B000: 640*480
2044   4                         {   //Patch 8051 DWORD calculate error 
2045   5                              if(dwSize<0x210fBA)//(CK_PIXELCLK/30))
2046   5                                  MaxFrmRate=30;
2047   5                              else
2048   5                                 MaxFrmRate = CK_PIXELCLK/dwSize;
2049   5                         }
2050   4                         /*
2051   4                         if(MaxFrmRate>30)
2052   4                                  MaxFrmRate=30;
2053   4                         */
2054   4                      }else
2055   3                      {   i = ResIdx + i + 1;
2056   4                          MaxFrmRate = GetTab(i);
2057   4                      }   
2058   3                      }
2059   2              }//full speed end
2060   1              
2061   1              if(MaxFrmRate & 0x80){
2062   2                      // Customized framerate
2063   2                      i = MAX_SUPPORT_FRAME_NUM*2;
2064   2                      j = GetTab(i);  //YUV frame rate number in full speed
2065   2                      i = i + 1 + j;     //  1: number of YUV frame rate in full speed 
2066   2                      j = GetTab(i); //MJ frame rate bumber in full speed
2067   2                      j = i + 1 + j;      //  1: number of MJ frame rate in full speed 
2068   2                      i = MaxFrmRate & 0x7F;
2069   2                      j = j + i*6;
2070   2      
2071   2                      pbFrmTable[0] = 0x0;
2072   2                      for(i=0; i<6; i++){
2073   3                              ResIdx = GetTab(j+i);
2074   3                              if(ResIdx!= 0){
2075   4                                      pbFrmTable[i+1] = ResIdx - 1;
2076   4                                      pbFrmTable[0]++;
2077   4                              }else{
2078   4                                      break;
2079   4                              }
2080   3                      }
2081   2                      MaxFrmRate = pbFrmTable[1];
2082   2              }else 
2083   1          {
2084   2              if(MaxFrmRate>0)
2085   2              {   if(MaxFrmRate>30)
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 35  

2086   3                      MaxFrmRate=30;
2087   3                  MaxFrmRate--;
2088   3              }   
2089   2                   //MaxFrmRate=(MaxFrmRate>30)? (30-1):(MaxFrmRate-1);
2090   2                      memcpy(pbFrmTable, &Interval_Idx_Tab[MaxFrmRate], 7);
2091   2              }    
2092   1          
2093   1              wTabAddr = wTmpAddr;//pop
2094   1              return MaxFrmRate;
2095   1      }
2096          /*
2097          BYTE CaculateFrmRate(BYTE bResIdx, BYTE bMode)
2098          {
2099             static BYTE idata ResIdx,Mode;       
2100              // Get width*height
2101              DWORD idata dwSize;
2102              WORD idata MaxFrmRate;
2103              WORD idata wTemp;
2104                  ResIdx=bResIdx;
2105                  Mode=bMode;
2106                  
2107                  wTemp = wTabAddr;
2108                  
2109                  if(xHighSpdMode == FALSE){      
2110                      MaxFrmRate = GetExResTable(ResIdx, GET_WIDTH);
2111                      dwSize = GetExResTable(ResIdx, GET_HEIGHT);
2112                      dwSize = dwSize*MaxFrmRate;
2113                  }
2114              SetPtrTabEx(path_FrmRateTab);
2115              // if YUV mode, caculate frame rate depend on USB bandwidth
2116              if(Mode == MODE_YUV){
2117                  // YUV mode
2118                  if(xHighSpdMode == TRUE){
2119                                  MaxFrmRate = GetTab(ResIdx);
2120                  }else{
2121                      // Full speed mode, only support to 352*288
2122                      if(dwSize <= 0x18C00){    // 352*288
2123                          MaxFrmRate = FULLSPD_BANDWIDTH_HALF/dwSize;
2124                      }else{
2125                          MaxFrmRate = 0;
2126                      }
2127                  }
2128              }else{
2129                  // else if MJPEG mode, caculate frame depend on backend pixel clock
2130                  // MJPEG mode
2131                  if(xHighSpdMode == TRUE){
2132                                  MaxFrmRate = GetTab(ResIdx+MAX_SUPPORT_FRAME_NUM);
2133          
2134                  }else{
2135                      if(dwSize <= 0x140000)//1280*1024  //0x4B000){ // 640*480
2136                      {    MaxFrmRate = CK_PIXELCLK/dwSize;
2137                      }else{
2138                          MaxFrmRate = 0;
2139                      }
2140                  }
2141              }
2142              // return final MAX frame rate
2143              // Maximum frame rate is 30
2144              if(MaxFrmRate > 30){
2145                  MaxFrmRate = 30;
2146              }
2147              if(MaxFrmRate > 0){
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 36  

2148                  MaxFrmRate = MaxFrmRate -1; // zero base
2149              }
2150                  wTabAddr = wTemp;
2151                  memcpy(pbFrmTable, &Interval_Idx_Tab[MaxFrmRate], 7);
2152              return ((BYTE)(MaxFrmRate&0xff));
2153          */
2154          BYTE GetFPSTableIndex(BYTE bIndex)
2155          {
2156   1          if(bIndex>59)
2157   1              return (60+((bIndex-69)/10));
2158   1          else
2159   1              return bIndex;
2160   1      
2161   1      }
2162          
2163          WORD  GetExResTable(BYTE iResIdx, BYTE iMode)
2164          {
2165   1          WORD data wTemp;
2166   1          BYTE data ResIdx;
2167   1          BYTE data Mode;
2168   1          RES_TABLE   xdata * idata pResTable;
2169   1      
2170   1          ResIdx = iResIdx;
2171   1          Mode = iMode;
2172   1          if(xExResTable == FALSE){
2173   2              if(Mode == GET_WIDTH){
2174   3                  wTemp = Res_Table[ResIdx].wWidth;
2175   3              }else{
2176   3                  wTemp = Res_Table[ResIdx].wHeight;
2177   3              }
2178   2          }else{
2179   2              pResTable = (RES_TABLE xdata *)pbResTable;
2180   2              if(Mode == GET_WIDTH){
2181   3                  wTemp = pResTable[ResIdx].wWidth;
2182   3              }else{
2183   3                  wTemp = pResTable[ResIdx].wHeight;
2184   3              }
2185   2          }
2186   1          return wTemp;
2187   1      }
2188          void LoadDefaultSetting(void)
2189          {
2190   1          BYTE data DescData;
2191   1          // Get Privacy control support status
2192   1          if(xHighSpdMode == TRUE){
2193   2              SetPtrTabEx(path_HSCameraTermDesc);
2194   2          }else{
2195   2              SetPtrTabEx(path_FSCameraTermDesc);
2196   2          }
2197   1          DescData = GetTab(0x0E);
2198   1          if(DescData >=3){
2199   2              DescData = GetTab(0x11);
2200   2              if(DescData & 0x4){               
2201   3                  xSupportPrivacy = TRUE;
2202   3                  return;
2203   3                  
2204   3              }
2205   2          }
2206   1          xSupportPrivacy = FALSE;
2207   1      }
2208          
2209          // 2009,04,10 Lear added
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 37  

2210          // Customize USB descirptor
2211          // For example, Dell USBIST
2212          // This function should be called before GetConfigurationDesc
2213          
2214          void AddDesc(BYTE FollowID, WORD wDescAddr)
2215          {
2216   1              BYTE data i = 0;
2217   1              if(pCustomizeDesc == 0x00){
2218   2                      return;
2219   2              }
2220   1              i = pCustomizeDesc->bCnt;
2221   1              i++;
2222   1              if(i<= MAX_CUSTOMIZE_DEC_NUM){
2223   2                      pCustomizeDesc->bCnt = i;
2224   2                      if((FollowID==HIGH_EP1_DESC) || (FollowID==HIGH_CONFIG_DESC)|| ((FollowID>=HIGH_EP2_ALT1_DESC)&&(FollowI
             -D<=HIGH_EP2_ALT4_DESC))){
2225   3                              pCustomizeDesc->bHighConfigLen = pCustomizeDesc->bHighConfigLen + pCode(wDescAddr);
2226   3                      }else if((FollowID==FULL_EP1_DESC) || (FollowID==FULL_CONFIG_DESC)||((FollowID>=FULL_EP2_ALT1_DESC)&&(Fo
             -llowID<=FULL_EP2_ALT4_DESC))){
2227   3                              pCustomizeDesc->bFullConfigLen = pCustomizeDesc->bFullConfigLen + pCode(wDescAddr);
2228   3                      }else{
2229   3                              pCustomizeDesc->bHighConfigLen = pCustomizeDesc->bHighConfigLen + pCode(wDescAddr);
2230   3                              pCustomizeDesc->bFullConfigLen = pCustomizeDesc->bFullConfigLen + pCode(wDescAddr);
2231   3                      }
2232   2                      pCustomizeDesc->stIDAddr[i-1].FollowingID = FollowID;
2233   2                      pCustomizeDesc->stIDAddr[i-1].wDescAddr = wDescAddr;
2234   2                      pCustomizeDesc->stIDAddr[i-1].bReported = FALSE;
2235   2              }
2236   1      }
2237          
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 38  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION Construct_ConfDesc (BEGIN)
                                           ; SOURCE LINE # 305
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 309
0000 120000      R     LCALL   GetConfigLength
0003 7800        R     MOV     R0,#LOW wConfigLen
0005 A606              MOV     @R0,AR6
0007 08                INC     R0
0008 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 310
000A 7800        E     MOV     R0,#LOW pbTmpBuf
000C 7C00        E     MOV     R4,#HIGH pbTmpBuf
000E 7D01              MOV     R5,#01H
0010 7BFF              MOV     R3,#0FFH
0012 7A00        R     MOV     R2,#HIGH USB_ST_Configuration_Desc
0014 7900        R     MOV     R1,#LOW USB_ST_Configuration_Desc
0016 7E00              MOV     R6,#00H
0018 7F09              MOV     R7,#09H
001A 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 315
001D 7800        R     MOV     R0,#LOW wConfigLen+01H
001F E6                MOV     A,@R0
0020 900000      E     MOV     DPTR,#pbTmpBuf+02H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
0024 18                DEC     R0
0025 E6                MOV     A,@R0
0026 A3                INC     DPTR
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
0028 900000      E     MOV     DPTR,#bDMICInput
002B E0                MOVX    A,@DPTR
002C 6006              JZ      ?C0001
                                           ; SOURCE LINE # 319
002E 900000      E     MOV     DPTR,#pbTmpBuf+04H
0031 7404              MOV     A,#04H
0033 F0                MOVX    @DPTR,A
0034         ?C0001:
                                           ; SOURCE LINE # 322
0034 300006      E     JNB     xEnableHID,?C0003
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
0037 900000      E     MOV     DPTR,#pbTmpBuf+04H
003A E0                MOVX    A,@DPTR
003B 04                INC     A
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
                                           ; SOURCE LINE # 334
003D         ?C0003:
003D 22                RET     
             ; FUNCTION Construct_ConfDesc (END)

             ; FUNCTION ContructCS_VS_INTFDesc (BEGIN)
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 361
0000 750000      E     MOV     pFmtTab,#HIGH pbFmtTab
0003 750000      E     MOV     pFmtTab+01H,#LOW pbFmtTab
                                           ; SOURCE LINE # 362
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 39  

0006 7800        E     MOV     R0,#LOW pbTmpBuf
0008 7C00        E     MOV     R4,#HIGH pbTmpBuf
000A 7D01              MOV     R5,#01H
000C 7BFF              MOV     R3,#0FFH
000E 7A00        R     MOV     R2,#HIGH USB_CS_VS_Interface_Desc
0010 7900        R     MOV     R1,#LOW USB_CS_VS_Interface_Desc
0012 7E00              MOV     R6,#00H
0014 7F0F              MOV     R7,#0FH
0016 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 370
0019 E500        R     MOV     A,pFmtTab+01H
001B 2404              ADD     A,#04H
001D F582              MOV     DPL,A
001F E4                CLR     A
0020 3500        R     ADDC    A,pFmtTab
0022 F583              MOV     DPH,A
0024 E0                MOVX    A,@DPTR
0025 F9                MOV     R1,A
0026 700B              JNZ     ?C0005
0028 850082      R     MOV     DPL,pFmtTab+01H
002B 850083      R     MOV     DPH,pFmtTab
002E A3                INC     DPTR
002F A3                INC     DPTR
0030 E0                MOVX    A,@DPTR
0031 6009              JZ      ?C0004
0033         ?C0005:
                                           ; SOURCE LINE # 371
0033 900000      E     MOV     DPTR,#pbTmpBuf+09H
0036 7402              MOV     A,#02H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0039 E4                CLR     A
                                           ; SOURCE LINE # 373
003A 8006              SJMP    ?C0288
003C         ?C0004:
                                           ; SOURCE LINE # 374
003C 900000      E     MOV     DPTR,#pbTmpBuf+09H
003F 7401              MOV     A,#01H
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
0042         ?C0288:
0042 900000      E     MOV     DPTR,#bCaptureMethod1
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 376
0046         ?C0006:
                                           ; SOURCE LINE # 383
0046 850082      R     MOV     DPL,pFmtTab+01H
0049 850083      R     MOV     DPH,pFmtTab
004C E0                MOVX    A,@DPTR
004D 540A              ANL     A,#0AH
004F 6074              JZ      ?C0007
                                           ; SOURCE LINE # 385
0051 900000      E     MOV     DPTR,#pbTmpBuf
0054 740F              MOV     A,#0FH
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 386
0057 900000      E     MOV     DPTR,#pbTmpBuf+03H
005A 7402              MOV     A,#02H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
005D 850082      R     MOV     DPL,pFmtTab+01H
0060 850083      R     MOV     DPH,pFmtTab
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 40  

0063 A3                INC     DPTR
0064 A3                INC     DPTR
0065 A3                INC     DPTR
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 850082      R     MOV     DPL,pFmtTab+01H
006B 850083      R     MOV     DPH,pFmtTab
006E A3                INC     DPTR
006F E0                MOVX    A,@DPTR
0070 2F                ADD     A,R7
0071 FF                MOV     R7,A
0072 E4                CLR     A
0073 33                RLC     A
0074 FE                MOV     R6,A
0075 7C00              MOV     R4,#00H
0077 7D1A              MOV     R5,#01AH
0079 120000      E     LCALL   ?C?IMUL
007C EF                MOV     A,R7
007D 2441              ADD     A,#041H
007F FD                MOV     R5,A
0080 E4                CLR     A
0081 3E                ADDC    A,R6
0082 FC                MOV     R4,A
0083 E9                MOV     A,R1
0084 FF                MOV     R7,A
0085 850082      R     MOV     DPL,pFmtTab+01H
0088 850083      R     MOV     DPH,pFmtTab
008B A3                INC     DPTR
008C A3                INC     DPTR
008D E0                MOVX    A,@DPTR
008E 2F                ADD     A,R7
008F FF                MOV     R7,A
0090 E4                CLR     A
0091 33                RLC     A
0092 FE                MOV     R6,A
0093 EF                MOV     A,R7
0094 7802              MOV     R0,#02H
0096         ?C0274:
0096 C3                CLR     C
0097 33                RLC     A
0098 CE                XCH     A,R6
0099 33                RLC     A
009A CE                XCH     A,R6
009B D8F9              DJNZ    R0,?C0274
009D 2D                ADD     A,R5
009E FF                MOV     R7,A
009F EC                MOV     A,R4
00A0 3E                ADDC    A,R6
00A1 FE                MOV     R6,A
00A2 900000      E     MOV     DPTR,#wFrmIntervalLen+01H
00A5 E0                MOVX    A,@DPTR
00A6 2F                ADD     A,R7
00A7 F500        R     MOV     wLen+01H,A
00A9 900000      E     MOV     DPTR,#wFrmIntervalLen
00AC E0                MOVX    A,@DPTR
00AD 3E                ADDC    A,R6
00AE F500        R     MOV     wLen,A
                                           ; SOURCE LINE # 392
00B0 E9                MOV     A,R1
00B1 600B              JZ      ?C0008
                                           ; SOURCE LINE # 393
00B3 7406              MOV     A,#06H
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 41  

00B5 2500        R     ADD     A,wLen+01H
00B7 F500        R     MOV     wLen+01H,A
00B9 E4                CLR     A
00BA 3500        R     ADDC    A,wLen
00BC F500        R     MOV     wLen,A
                                           ; SOURCE LINE # 394
00BE         ?C0008:
                                           ; SOURCE LINE # 396
00BE E4                CLR     A
00BF 900000      E     MOV     DPTR,#pbTmpBuf+0EH
00C2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 397
00C3 8055              SJMP    ?C0009
00C5         ?C0007:
                                           ; SOURCE LINE # 399
00C5 900000      E     MOV     DPTR,#pbTmpBuf
00C8 740E              MOV     A,#0EH
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 400
00CB 900000      E     MOV     DPTR,#pbTmpBuf+03H
00CE 7401              MOV     A,#01H
00D0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 402
00D1 850082      R     MOV     DPL,pFmtTab+01H
00D4 850083      R     MOV     DPH,pFmtTab
00D7 A3                INC     DPTR
00D8 E0                MOVX    A,@DPTR
00D9 75F01A            MOV     B,#01AH
00DC A4                MUL     AB
00DD 241F              ADD     A,#01FH
00DF FD                MOV     R5,A
00E0 E4                CLR     A
00E1 35F0              ADDC    A,B
00E3 FC                MOV     R4,A
00E4 850082      R     MOV     DPL,pFmtTab+01H
00E7 850083      R     MOV     DPH,pFmtTab
00EA A3                INC     DPTR
00EB A3                INC     DPTR
00EC E0                MOVX    A,@DPTR
00ED 75F004            MOV     B,#04H
00F0 A4                MUL     AB
00F1 2D                ADD     A,R5
00F2 FF                MOV     R7,A
00F3 E5F0              MOV     A,B
00F5 3C                ADDC    A,R4
00F6 FE                MOV     R6,A
00F7 900000      E     MOV     DPTR,#wFrmIntervalLen+01H
00FA E0                MOVX    A,@DPTR
00FB 2F                ADD     A,R7
00FC F500        R     MOV     wLen+01H,A
00FE 900000      E     MOV     DPTR,#wFrmIntervalLen
0101 E0                MOVX    A,@DPTR
0102 3E                ADDC    A,R6
0103 F500        R     MOV     wLen,A
                                           ; SOURCE LINE # 405
0105 850082      R     MOV     DPL,pFmtTab+01H
0108 850083      R     MOV     DPH,pFmtTab
010B E0                MOVX    A,@DPTR
010C 30E00B            JNB     ACC.0,?C0009
                                           ; SOURCE LINE # 406
010F 7410              MOV     A,#010H
0111 2500        R     ADD     A,wLen+01H
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 42  

0113 F500        R     MOV     wLen+01H,A
0115 E4                CLR     A
0116 3500        R     ADDC    A,wLen
0118 F500        R     MOV     wLen,A
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
011A         ?C0009:
                                           ; SOURCE LINE # 409
011A 850082      R     MOV     DPL,pFmtTab+01H
011D 850083      R     MOV     DPH,pFmtTab
0120 A3                INC     DPTR
0121 A3                INC     DPTR
0122 E0                MOVX    A,@DPTR
0123 600B              JZ      ?C0011
                                           ; SOURCE LINE # 410
0125 7406              MOV     A,#06H
0127 2500        R     ADD     A,wLen+01H
0129 F500        R     MOV     wLen+01H,A
012B E4                CLR     A
012C 3500        R     ADDC    A,wLen
012E F500        R     MOV     wLen,A
                                           ; SOURCE LINE # 411
0130         ?C0011:
                                           ; SOURCE LINE # 412
0130 900000      E     MOV     DPTR,#pbTmpBuf+04H
0133 E500        R     MOV     A,wLen+01H
0135 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 413
0136 A3                INC     DPTR
0137 E500        R     MOV     A,wLen
0139 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 414
013A 22                RET     
             ; FUNCTION ContructCS_VS_INTFDesc (END)

             ; FUNCTION Construct_UC_FORMAT_Desc (BEGIN)
                                           ; SOURCE LINE # 430
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 435
0000 7800        E     MOV     R0,#LOW pbTmpBuf
0002 7C00        E     MOV     R4,#HIGH pbTmpBuf
0004 7D01              MOV     R5,#01H
0006 7BFF              MOV     R3,#0FFH
0008 7A00        R     MOV     R2,#HIGH USB_CS_VS_UC_Format_Desc
000A 7900        R     MOV     R1,#LOW USB_CS_VS_UC_Format_Desc
000C 7E00              MOV     R6,#00H
000E 7F1B              MOV     R7,#01BH
0010 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 441
0013 900000      E     MOV     DPTR,#pbFmtTab
0016 E0                MOVX    A,@DPTR
0017 5403              ANL     A,#03H
0019 900000      E     MOV     DPTR,#pbTmpBuf+03H
001C 6008              JZ      ?C0013
                                           ; SOURCE LINE # 443
001E 7401              MOV     A,#01H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
0021 900000      E     MOV     DPTR,#pbFmtTab+01H
                                           ; SOURCE LINE # 445
0024 8006              SJMP    ?C0289
0026         ?C0013:
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 43  

                                           ; SOURCE LINE # 447
0026 7402              MOV     A,#02H
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 448
0029 900000      E     MOV     DPTR,#pbFmtTab+03H
002C         ?C0289:
002C E0                MOVX    A,@DPTR
002D 900000      E     MOV     DPTR,#pbTmpBuf+04H
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
                                           ; SOURCE LINE # 470
0031         ?C0015:
0031 22                RET     
             ; FUNCTION Construct_UC_FORMAT_Desc (END)

             ; FUNCTION Construct_MJ_FORMAT_Desc (BEGIN)
                                           ; SOURCE LINE # 471
                                           ; SOURCE LINE # 472
                                           ; SOURCE LINE # 473
0000 900000      E     MOV     DPTR,#pbTmpBuf
0003 740B              MOV     A,#0BH
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 474
0006 A3                INC     DPTR
0007 7424              MOV     A,#024H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 475
000A A3                INC     DPTR
000B 7406              MOV     A,#06H
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 477
000E 900000      E     MOV     DPTR,#pbFmtTab
0011 E0                MOVX    A,@DPTR
0012 540C              ANL     A,#0CH
0014 900000      E     MOV     DPTR,#pbTmpBuf+03H
0017 6008              JZ      ?C0016
                                           ; SOURCE LINE # 479
0019 7401              MOV     A,#01H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 480
001C 900000      E     MOV     DPTR,#pbFmtTab+01H
                                           ; SOURCE LINE # 481
001F 8006              SJMP    ?C0290
0021         ?C0016:
                                           ; SOURCE LINE # 483
0021 7402              MOV     A,#02H
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 484
0024 900000      E     MOV     DPTR,#pbFmtTab+03H
0027         ?C0290:
0027 E0                MOVX    A,@DPTR
0028 900000      E     MOV     DPTR,#pbTmpBuf+04H
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 485
002C         ?C0017:
                                           ; SOURCE LINE # 486
002C 900000      E     MOV     DPTR,#pbTmpBuf+05H
002F 7401              MOV     A,#01H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
0032 A3                INC     DPTR
0033 F0                MOVX    @DPTR,A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 44  

                                           ; SOURCE LINE # 488
0034 E4                CLR     A
0035 A3                INC     DPTR
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 489
0037 A3                INC     DPTR
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
0039 A3                INC     DPTR
003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
003B A3                INC     DPTR
003C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
003D 22                RET     
             ; FUNCTION Construct_MJ_FORMAT_Desc (END)

             ; FUNCTION Construct_ColorMatch_Desc (BEGIN)
                                           ; SOURCE LINE # 494
                                           ; SOURCE LINE # 495
                                           ; SOURCE LINE # 496
0000 900000      E     MOV     DPTR,#pbTmpBuf
0003 7406              MOV     A,#06H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
0006 A3                INC     DPTR
0007 7424              MOV     A,#024H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
000A A3                INC     DPTR
000B 740D              MOV     A,#0DH
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
000E A3                INC     DPTR
000F 7401              MOV     A,#01H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
0012 A3                INC     DPTR
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
0014 A3                INC     DPTR
0015 7404              MOV     A,#04H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 502
0018 22                RET     
             ; FUNCTION Construct_ColorMatch_Desc (END)

             ; FUNCTION _Construct_IMG_Frm_Desc (BEGIN)
                                           ; SOURCE LINE # 504
;---- Variable 'iDescID' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 511
;---- Variable 'DescID' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 513
0000 900000      E     MOV     DPTR,#pbTmpBuf+01H
0003 7424              MOV     A,#024H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 514
0006 A3                INC     DPTR
0007 7403              MOV     A,#03H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 515
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 45  

000A E4                CLR     A
000B A3                INC     DPTR
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 516
000D BF1F0A            CJNE    R7,#01FH,?C0020
                                           ; SOURCE LINE # 519
0010 900000      E     MOV     DPTR,#pbFmtTab
0013 E0                MOVX    A,@DPTR
0014 5403              ANL     A,#03H
0016 600F              JZ      ?C0292
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 522
0018 8008              SJMP    ?C0291
001A         ?C0020:
                                           ; SOURCE LINE # 527
001A 900000      E     MOV     DPTR,#pbFmtTab
001D E0                MOVX    A,@DPTR
001E 540C              ANL     A,#0CH
0020 6005              JZ      ?C0024
                                           ; SOURCE LINE # 529
0022         ?C0291:
0022 750001      R     MOV     FrmNum,#01H
                                           ; SOURCE LINE # 530
0025 8003              SJMP    ?C0023
0027         ?C0024:
                                           ; SOURCE LINE # 532
0027         ?C0292:
0027 750002      R     MOV     FrmNum,#02H
                                           ; SOURCE LINE # 533
                                           ; SOURCE LINE # 534
002A         ?C0023:
                                           ; SOURCE LINE # 535
002A E500        R     MOV     A,FrmNum
002C B40110            CJNE    A,#01H,?C0026
                                           ; SOURCE LINE # 536
002F 900000      E     MOV     DPTR,#pbFmtTab+02H
0032 E0                MOVX    A,@DPTR
0033 F500        R     MOV     FrmNum,A
                                           ; SOURCE LINE # 537
0035 900000      E     MOV     DPTR,#pbFmtTab+01H
0038 E0                MOVX    A,@DPTR
0039 2405              ADD     A,#05H
003B F500        R     MOV     OffSet,A
                                           ; SOURCE LINE # 538
003D 8016              SJMP    ?C0027
003F         ?C0026:
                                           ; SOURCE LINE # 539
003F 900000      E     MOV     DPTR,#pbFmtTab+04H
0042 E0                MOVX    A,@DPTR
0043 F500        R     MOV     FrmNum,A
                                           ; SOURCE LINE # 540
0045 900000      E     MOV     DPTR,#pbFmtTab+01H
0048 E0                MOVX    A,@DPTR
0049 2405              ADD     A,#05H
004B FF                MOV     R7,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E 2F                ADD     A,R7
004F FF                MOV     R7,A
0050 A3                INC     DPTR
0051 E0                MOVX    A,@DPTR
0052 2F                ADD     A,R7
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 46  

0053 F500        R     MOV     OffSet,A
                                           ; SOURCE LINE # 541
0055         ?C0027:
                                           ; SOURCE LINE # 542
0055 7400        E     MOV     A,#LOW pbFmtTab
0057 2500        R     ADD     A,OffSet
0059 F582              MOV     DPL,A
005B E4                CLR     A
005C 3400        E     ADDC    A,#HIGH pbFmtTab
005E AF82              MOV     R7,DPL
0060 7800        R     MOV     R0,#LOW pStillRes
0062 F6                MOV     @R0,A
0063 08                INC     R0
0064 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 544
0066 900000      E     MOV     DPTR,#pbTmpBuf+04H
0069 E500        R     MOV     A,FrmNum
006B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 545
006C 25E0              ADD     A,ACC
006E 25E0              ADD     A,ACC
0070 2406              ADD     A,#06H
0072 900000      E     MOV     DPTR,#pbTmpBuf
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
0076 E4                CLR     A
0077 F500        R     MOV     FrmNum,A
0079         ?C0030:
                                           ; SOURCE LINE # 547
                                           ; SOURCE LINE # 548
0079 7800        R     MOV     R0,#LOW pStillRes
007B E6                MOV     A,@R0
007C FC                MOV     R4,A
007D 08                INC     R0
007E E6                MOV     A,@R0
007F 8C83              MOV     DPH,R4
0081 2500        R     ADD     A,FrmNum
0083 F582              MOV     DPL,A
0085 E4                CLR     A
0086 3583              ADDC    A,DPH
0088 F583              MOV     DPH,A
008A E0                MOVX    A,@DPTR
008B F500        R     MOV     ResIdx,A
                                           ; SOURCE LINE # 549
008D E500        R     MOV     A,FrmNum
008F 25E0              ADD     A,ACC
0091 25E0              ADD     A,ACC
0093 F500        R     MOV     OffSet,A
                                           ; SOURCE LINE # 551
0095 7D01              MOV     R5,#01H
0097 AF00        R     MOV     R7,ResIdx
0099 120000      R     LCALL   _GetExResTable
009C 8E00        R     MOV     wTemp,R6
009E 8F00        R     MOV     wTemp+01H,R7
                                           ; SOURCE LINE # 552
00A0 7400        E     MOV     A,#LOW pbTmpBuf+05H
00A2 2500        R     ADD     A,OffSet
00A4 F582              MOV     DPL,A
00A6 E4                CLR     A
00A7 3400        E     ADDC    A,#HIGH pbTmpBuf+05H
00A9 F583              MOV     DPH,A
00AB E500        R     MOV     A,wTemp+01H
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 47  

00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
00AE 7400        E     MOV     A,#LOW pbTmpBuf+06H
00B0 2500        R     ADD     A,OffSet
00B2 F582              MOV     DPL,A
00B4 E4                CLR     A
00B5 3400        E     ADDC    A,#HIGH pbTmpBuf+06H
00B7 F583              MOV     DPH,A
00B9 E500        R     MOV     A,wTemp
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
00BC 7D02              MOV     R5,#02H
00BE AF00        R     MOV     R7,ResIdx
00C0 120000      R     LCALL   _GetExResTable
00C3 8E00        R     MOV     wTemp,R6
00C5 8F00        R     MOV     wTemp+01H,R7
                                           ; SOURCE LINE # 555
00C7 7400        E     MOV     A,#LOW pbTmpBuf+07H
00C9 2500        R     ADD     A,OffSet
00CB F582              MOV     DPL,A
00CD E4                CLR     A
00CE 3400        E     ADDC    A,#HIGH pbTmpBuf+07H
00D0 F583              MOV     DPH,A
00D2 E500        R     MOV     A,wTemp+01H
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 556
00D5 7400        E     MOV     A,#LOW pbTmpBuf+08H
00D7 2500        R     ADD     A,OffSet
00D9 F582              MOV     DPL,A
00DB E4                CLR     A
00DC 3400        E     ADDC    A,#HIGH pbTmpBuf+08H
00DE F583              MOV     DPH,A
00E0 E500        R     MOV     A,wTemp
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 557
00E3 0500        R     INC     FrmNum
                                           ; SOURCE LINE # 558
00E5 900000      E     MOV     DPTR,#pbTmpBuf+04H
00E8 E0                MOVX    A,@DPTR
00E9 FF                MOV     R7,A
00EA E500        R     MOV     A,FrmNum
00EC C3                CLR     C
00ED 9F                SUBB    A,R7
00EE 4089              JC      ?C0030
                                           ; SOURCE LINE # 560
00F0 900000      E     MOV     DPTR,#pbTmpBuf
00F3 E0                MOVX    A,@DPTR
00F4 14                DEC     A
00F5 F500        R     MOV     FrmNum,A
                                           ; SOURCE LINE # 562
00F7 2400        E     ADD     A,#LOW pbTmpBuf
00F9 F582              MOV     DPL,A
00FB E4                CLR     A
00FC 3400        E     ADDC    A,#HIGH pbTmpBuf
00FE F583              MOV     DPH,A
0100 E4                CLR     A
0101 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 563
0102 22                RET     
             ; FUNCTION _Construct_IMG_Frm_Desc (END)

             ; FUNCTION _Construct_Frm_Desc (BEGIN)
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 48  

                                           ; SOURCE LINE # 565
;---- Variable 'iDescID' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 566
                                           ; SOURCE LINE # 575
0000 7800        R     MOV     R0,#LOW DescID
0002 EF                MOV     A,R7
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 577
0004 900000      E     MOV     DPTR,#pbTmpBuf+01H
0007 7424              MOV     A,#024H
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
000A 900000      E     MOV     DPTR,#bCaptureMethod1
000D E0                MOVX    A,@DPTR
000E 900000      E     MOV     DPTR,#pbTmpBuf+04H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 585
0012 EF                MOV     A,R7
0013 D3                SETB    C
0014 941E              SUBB    A,#01EH
0016 5037              JNC     ?C0032
                                           ; SOURCE LINE # 587
0018 900000      E     MOV     DPTR,#pbTmpBuf+02H
001B 7405              MOV     A,#05H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
001E E6                MOV     A,@R0
001F FE                MOV     R6,A
0020 24F2              ADD     A,#0F2H
0022 A3                INC     DPTR
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 589
0024 EE                MOV     A,R6
0025 24F6              ADD     A,#0F6H
0027 7800        R     MOV     R0,#LOW FrameCnt
0029 F6                MOV     @R0,A
                                           ; SOURCE LINE # 590
002A 900000      E     MOV     DPTR,#pbFmtTab
002D E0                MOVX    A,@DPTR
002E 5403              ANL     A,#03H
0030 7008              JNZ     ?C0033
                                           ; SOURCE LINE # 592
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 26                ADD     A,@R0
0035 FF                MOV     R7,A
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 2F                ADD     A,R7
0039 F6                MOV     @R0,A
                                           ; SOURCE LINE # 593
003A         ?C0033:
                                           ; SOURCE LINE # 594
003A 7800        R     MOV     R0,#LOW FrameCnt
003C E6                MOV     A,@R0
003D 2400        E     ADD     A,#LOW pbFmtTab
003F F582              MOV     DPL,A
0041 E4                CLR     A
0042 3400        E     ADDC    A,#HIGH pbFmtTab
0044 F583              MOV     DPH,A
0046 E0                MOVX    A,@DPTR
0047 FF                MOV     R7,A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 49  

0048 7800        R     MOV     R0,#LOW ResIdx
004A F6                MOV     @R0,A
                                           ; SOURCE LINE # 598
004B 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 605
004D 8037              SJMP    ?C0294
004F         ?C0032:
                                           ; SOURCE LINE # 607
004F 900000      E     MOV     DPTR,#pbTmpBuf+02H
0052 7407              MOV     A,#07H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 608
0055 7800        R     MOV     R0,#LOW DescID
0057 E6                MOV     A,@R0
0058 FE                MOV     R6,A
0059 24DF              ADD     A,#0DFH
005B A3                INC     DPTR
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 609
005D EE                MOV     A,R6
005E 24E3              ADD     A,#0E3H
0060 7800        R     MOV     R0,#LOW FrameCnt
0062 F6                MOV     @R0,A
                                           ; SOURCE LINE # 610
0063 900000      E     MOV     DPTR,#pbFmtTab
0066 E0                MOVX    A,@DPTR
0067 540C              ANL     A,#0CH
0069 7008              JNZ     ?C0035
                                           ; SOURCE LINE # 612
006B A3                INC     DPTR
006C E0                MOVX    A,@DPTR
006D 26                ADD     A,@R0
006E FF                MOV     R7,A
006F A3                INC     DPTR
0070 E0                MOVX    A,@DPTR
0071 2F                ADD     A,R7
0072 F6                MOV     @R0,A
                                           ; SOURCE LINE # 613
0073         ?C0035:
                                           ; SOURCE LINE # 614
0073 7800        R     MOV     R0,#LOW FrameCnt
0075 E6                MOV     A,@R0
0076 2400        E     ADD     A,#LOW pbFmtTab
0078 F582              MOV     DPL,A
007A E4                CLR     A
007B 3400        E     ADDC    A,#HIGH pbFmtTab
007D F583              MOV     DPH,A
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 7800        R     MOV     R0,#LOW ResIdx
0083 F6                MOV     @R0,A
                                           ; SOURCE LINE # 618
0084 7D02              MOV     R5,#02H
0086         ?C0294:
0086 120000      R     LCALL   _CaculateFrmRateV2
0089 7800        R     MOV     R0,#LOW FrameRate
008B A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 626
008D         ?C0034:
                                           ; SOURCE LINE # 627
008D 120000      R     LCALL   L?0326
0090 7800        R     MOV     R0,#LOW wTemp
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 50  

0092 A606              MOV     @R0,AR6
0094 08                INC     R0
0095 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 628
0097 7800        R     MOV     R0,#LOW ResIdx
0099 E6                MOV     A,@R0
009A FF                MOV     R7,A
009B 7D02              MOV     R5,#02H
009D 120000      R     LCALL   _GetExResTable
00A0 E4                CLR     A
00A1 FC                MOV     R4,A
00A2 FD                MOV     R5,A
00A3 7800        R     MOV     R0,#LOW dwTemp
00A5 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 629
00A8 7800        R     MOV     R0,#LOW wTemp
00AA E6                MOV     A,@R0
00AB FE                MOV     R6,A
00AC 08                INC     R0
00AD E6                MOV     A,@R0
00AE FF                MOV     R7,A
00AF E4                CLR     A
00B0 FC                MOV     R4,A
00B1 FD                MOV     R5,A
00B2 7800        R     MOV     R0,#LOW dwTemp
00B4 120000      E     LCALL   ?C?LLDIDATA0
00B7 120000      E     LCALL   ?C?LMUL
00BA 7800        R     MOV     R0,#LOW dwTemp
00BC 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 630
00BF 7800        R     MOV     R0,#LOW DescID
00C1 E6                MOV     A,@R0
00C2 D3                SETB    C
00C3 941E              SUBB    A,#01EH
00C5 7800        R     MOV     R0,#LOW dwTemp
00C7 5008              JNC     ?C0036
                                           ; SOURCE LINE # 631
00C9 120000      E     LCALL   ?C?LLDIDATA
00CC E4                CLR     A
00CD 7B02              MOV     R3,#02H
                                           ; SOURCE LINE # 632
00CF 8006              SJMP    ?C0293
00D1         ?C0036:
                                           ; SOURCE LINE # 633
00D1 120000      E     LCALL   ?C?LLDIDATA
00D4 E4                CLR     A
00D5 7B03              MOV     R3,#03H
00D7         ?C0293:
00D7 FA                MOV     R2,A
00D8 F9                MOV     R1,A
00D9 F8                MOV     R0,A
00DA 120000      E     LCALL   ?C?LMUL
00DD 7800        R     MOV     R0,#LOW dwTemp
00DF 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 634
00E2         ?C0037:
                                           ; SOURCE LINE # 637
00E2 900000      E     MOV     DPTR,#pbFrmTable
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 7800        R     MOV     R0,#LOW FrameCnt
00E9 F6                MOV     @R0,A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 51  

                                           ; SOURCE LINE # 638
00EA 25E0              ADD     A,ACC
00EC 25E0              ADD     A,ACC
00EE 241A              ADD     A,#01AH
00F0 900000      E     MOV     DPTR,#pbTmpBuf
00F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 640
00F4 750000      E     MOV     ?_DWORDBig2Little_f?BYTE+03H,#00H
00F7 750000      R     MOV     ?_DWORDBig2Little_f?BYTE+04H,#HIGH dwTemp
00FA 750000      R     MOV     ?_DWORDBig2Little_f?BYTE+05H,#LOW dwTemp
00FD 7B01              MOV     R3,#01H
00FF 7A00        E     MOV     R2,#HIGH pbTmpBuf+011H
0101 7900        E     MOV     R1,#LOW pbTmpBuf+011H
0103 120000      E     LCALL   _DWORDBig2Little_f
                                           ; SOURCE LINE # 643
0106 7800        R     MOV     R0,#LOW FrameRate
0108 E6                MOV     A,@R0
0109 2401              ADD     A,#01H
010B FF                MOV     R7,A
010C E4                CLR     A
010D 33                RLC     A
010E FE                MOV     R6,A
010F E4                CLR     A
0110 FC                MOV     R4,A
0111 FD                MOV     R5,A
0112 7800        R     MOV     R0,#LOW dwTemp
0114 120000      E     LCALL   ?C?LLDIDATA0
0117 120000      E     LCALL   ?C?LMUL
011A 7800        R     MOV     R0,#LOW dwTemp1
011C 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 644
011F 7800        R     MOV     R0,#LOW dwTemp1
0121 120000      E     LCALL   ?C?LLDIDATA
0124 7803              MOV     R0,#03H
0126 120000      E     LCALL   ?C?LSHL
0129 7800        R     MOV     R0,#LOW dwTemp1
012B 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 647
012E 750000      E     MOV     ?_DWORDBig2Little_f?BYTE+03H,#00H
0131 750000      R     MOV     ?_DWORDBig2Little_f?BYTE+04H,#HIGH dwTemp1
0134 750000      R     MOV     ?_DWORDBig2Little_f?BYTE+05H,#LOW dwTemp1
0137 7B01              MOV     R3,#01H
0139 7A00        E     MOV     R2,#HIGH pbTmpBuf+0DH
013B 7900        E     MOV     R1,#LOW pbTmpBuf+0DH
013D 120000      E     LCALL   _DWORDBig2Little_f
                                           ; SOURCE LINE # 650
0140 7800        R     MOV     R0,#LOW FrameCnt
0142 E6                MOV     A,@R0
0143 2400        E     ADD     A,#LOW pbFrmTable
0145 F582              MOV     DPL,A
0147 E4                CLR     A
0148 3400        E     ADDC    A,#HIGH pbFrmTable
014A F583              MOV     DPH,A
014C E0                MOVX    A,@DPTR
014D 2401              ADD     A,#01H
014F FF                MOV     R7,A
0150 E4                CLR     A
0151 33                RLC     A
0152 FE                MOV     R6,A
0153 E4                CLR     A
0154 FC                MOV     R4,A
0155 FD                MOV     R5,A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 52  

0156 08                INC     R0
0157 120000      E     LCALL   ?C?LLDIDATA0
015A 120000      E     LCALL   ?C?LMUL
015D 7800        R     MOV     R0,#LOW dwTemp
015F 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 652
0162 7800        R     MOV     R0,#LOW dwTemp
0164 120000      E     LCALL   ?C?LLDIDATA
0167 7803              MOV     R0,#03H
0169 120000      E     LCALL   ?C?LSHL
016C 7800        R     MOV     R0,#LOW dwTemp
016E 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 655
0171 750000      E     MOV     ?_DWORDBig2Little_f?BYTE+03H,#00H
0174 750000      R     MOV     ?_DWORDBig2Little_f?BYTE+04H,#HIGH dwTemp
0177 750000      R     MOV     ?_DWORDBig2Little_f?BYTE+05H,#LOW dwTemp
017A 7B01              MOV     R3,#01H
017C 7A00        E     MOV     R2,#HIGH pbTmpBuf+09H
017E 7900        E     MOV     R1,#LOW pbTmpBuf+09H
0180 120000      E     LCALL   _DWORDBig2Little_f
                                           ; SOURCE LINE # 657
0183 120000      R     LCALL   L?0326
0186 7800        R     MOV     R0,#LOW wTemp
0188 A606              MOV     @R0,AR6
018A 08                INC     R0
018B A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 658
018D E6                MOV     A,@R0
018E 900000      E     MOV     DPTR,#pbTmpBuf+05H
0191 F0                MOVX    @DPTR,A
0192 18                DEC     R0
0193 E6                MOV     A,@R0
0194 A3                INC     DPTR
0195 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 660
0196 7800        R     MOV     R0,#LOW ResIdx
0198 E6                MOV     A,@R0
0199 FF                MOV     R7,A
019A 7D02              MOV     R5,#02H
019C 120000      R     LCALL   _GetExResTable
019F 7800        R     MOV     R0,#LOW wTemp
01A1 A606              MOV     @R0,AR6
01A3 08                INC     R0
01A4 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 661
01A6 E6                MOV     A,@R0
01A7 900000      E     MOV     DPTR,#pbTmpBuf+07H
01AA F0                MOVX    @DPTR,A
01AB 18                DEC     R0
01AC E6                MOV     A,@R0
01AD A3                INC     DPTR
01AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 665
01AF 900000      E     MOV     DPTR,#pbFrmTable+01H
01B2 E0                MOVX    A,@DPTR
01B3 FF                MOV     R7,A
01B4 120000      R     LCALL   _GetFPSTableIndex
01B7 EF                MOV     A,R7
01B8 75F004            MOV     B,#04H
01BB A4                MUL     AB
01BC 2400        E     ADD     A,#LOW FPS_Table
01BE F9                MOV     R1,A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 53  

01BF 7400        E     MOV     A,#HIGH FPS_Table
01C1 35F0              ADDC    A,B
01C3 7500FF      E     MOV     ?_DWORDBig2Little_f?BYTE+03H,#0FFH
01C6 F500        E     MOV     ?_DWORDBig2Little_f?BYTE+04H,A
01C8 8900        E     MOV     ?_DWORDBig2Little_f?BYTE+05H,R1
01CA 7B01              MOV     R3,#01H
01CC 7A00        E     MOV     R2,#HIGH pbTmpBuf+015H
01CE 7900        E     MOV     R1,#LOW pbTmpBuf+015H
01D0 120000      E     LCALL   _DWORDBig2Little_f
                                           ; SOURCE LINE # 666
01D3 7800        R     MOV     R0,#LOW FrameCnt
01D5 E6                MOV     A,@R0
01D6 900000      E     MOV     DPTR,#pbTmpBuf+019H
01D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 667
01DA E4                CLR     A
01DB 7800        R     MOV     R0,#LOW ResIdx
01DD F6                MOV     @R0,A
01DE         ?C0038:
01DE 7800        R     MOV     R0,#LOW ResIdx
01E0 E6                MOV     A,@R0
01E1 FF                MOV     R7,A
01E2 C3                CLR     C
01E3 7800        R     MOV     R0,#LOW FrameCnt
01E5 96                SUBB    A,@R0
01E6 5047              JNC     ?C0041
                                           ; SOURCE LINE # 669
01E8 7400        E     MOV     A,#LOW pbFrmTable+01H
01EA 2F                ADD     A,R7
01EB F582              MOV     DPL,A
01ED E4                CLR     A
01EE 3400        E     ADDC    A,#HIGH pbFrmTable+01H
01F0 F583              MOV     DPH,A
01F2 E0                MOVX    A,@DPTR
01F3 FF                MOV     R7,A
01F4 120000      R     LCALL   _GetFPSTableIndex
01F7 75F004            MOV     B,#04H
01FA EF                MOV     A,R7
01FB 900000      E     MOV     DPTR,#FPS_Table
01FE 120000      E     LCALL   ?C?OFFXADD
0201 120000      E     LCALL   ?C?LLDCODE
0204 7800        R     MOV     R0,#LOW dwTemp
0206 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 671
0209 7800        R     MOV     R0,#LOW ResIdx
020B E6                MOV     A,@R0
020C 75F004            MOV     B,#04H
020F A4                MUL     AB
0210 2400        E     ADD     A,#LOW pbTmpBuf+01AH
0212 F9                MOV     R1,A
0213 7400        E     MOV     A,#HIGH pbTmpBuf+01AH
0215 35F0              ADDC    A,B
0217 FA                MOV     R2,A
0218 7B01              MOV     R3,#01H
021A C003              PUSH    AR3
021C 1B                DEC     R3
021D 8B00        E     MOV     ?_DWORDBig2Little_f?BYTE+03H,R3
021F 750000      R     MOV     ?_DWORDBig2Little_f?BYTE+04H,#HIGH dwTemp
0222 750000      R     MOV     ?_DWORDBig2Little_f?BYTE+05H,#LOW dwTemp
0225 D003              POP     AR3
0227 120000      E     LCALL   _DWORDBig2Little_f
                                           ; SOURCE LINE # 672
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 54  

022A 7800        R     MOV     R0,#LOW ResIdx
022C 06                INC     @R0
022D 80AF              SJMP    ?C0038
                                           ; SOURCE LINE # 673
022F         ?C0041:
022F 22                RET     
             ; FUNCTION _Construct_Frm_Desc (END)

             ; FUNCTION ConstrcutStrmIDSequence (BEGIN)
                                           ; SOURCE LINE # 698
;---- Variable 'Fmt1Idx' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 699
                                           ; SOURCE LINE # 705
0000 750000      E     MOV     pFmtTab,#HIGH pbFmtTab
0003 750000      E     MOV     pFmtTab+01H,#LOW pbFmtTab
                                           ; SOURCE LINE # 706
0006 750000      E     MOV     pTab,#HIGH pbFmtTab+045H
0009 750000      E     MOV     pTab+01H,#LOW pbFmtTab+045H
                                           ; SOURCE LINE # 707
000C 0500        R     INC     pTab+01H
000E E500        R     MOV     A,pTab+01H
0010 AC00        R     MOV     R4,pTab
0012 7002              JNZ     ?C0275
0014 0500        R     INC     pTab
0016         ?C0275:
0016 14                DEC     A
0017 F582              MOV     DPL,A
0019 8C83              MOV     DPH,R4
001B 740D              MOV     A,#0DH
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 709
001E 850082      R     MOV     DPL,pFmtTab+01H
0021 850083      R     MOV     DPH,pFmtTab
0024 E0                MOVX    A,@DPTR
0025 5403              ANL     A,#03H
0027 6004              JZ      ?C0042
                                           ; SOURCE LINE # 711
0029 7F0E              MOV     R7,#0EH
                                           ; SOURCE LINE # 712
002B 8002              SJMP    ?C0043
002D         ?C0042:
                                           ; SOURCE LINE # 714
002D 7F21              MOV     R7,#021H
                                           ; SOURCE LINE # 715
002F         ?C0043:
                                           ; SOURCE LINE # 716
002F 0500        R     INC     pTab+01H
0031 E500        R     MOV     A,pTab+01H
0033 AC00        R     MOV     R4,pTab
0035 7002              JNZ     ?C0276
0037 0500        R     INC     pTab
0039         ?C0276:
0039 14                DEC     A
003A F582              MOV     DPL,A
003C 8C83              MOV     DPH,R4
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 717
;---- Variable 'i' assigned to Register 'R6' ----
0040 E4                CLR     A
0041 FE                MOV     R6,A
0042         ?C0044:
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 55  

0042 850082      R     MOV     DPL,pFmtTab+01H
0045 850083      R     MOV     DPH,pFmtTab
0048 A3                INC     DPTR
0049 E0                MOVX    A,@DPTR
004A FD                MOV     R5,A
004B EE                MOV     A,R6
004C C3                CLR     C
004D 9D                SUBB    A,R5
004E 5018              JNC     ?C0045
                                           ; SOURCE LINE # 718
0050 EF                MOV     A,R7
0051 04                INC     A
0052 2E                ADD     A,R6
0053 FD                MOV     R5,A
0054 0500        R     INC     pTab+01H
0056 E500        R     MOV     A,pTab+01H
0058 AA00        R     MOV     R2,pTab
005A 7002              JNZ     ?C0277
005C 0500        R     INC     pTab
005E         ?C0277:
005E 14                DEC     A
005F F582              MOV     DPL,A
0061 8A83              MOV     DPH,R2
0063 ED                MOV     A,R5
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 719
0065 0E                INC     R6
0066 80DA              SJMP    ?C0044
0068         ?C0045:
                                           ; SOURCE LINE # 721
0068 900000      E     MOV     DPTR,#pbFmtTab+02H
006B E0                MOVX    A,@DPTR
006C D3                SETB    C
006D 9400              SUBB    A,#00H
006F 4029              JC      ?C0047
                                           ; SOURCE LINE # 722
0071 BF0E14            CJNE    R7,#0EH,?C0048
                                           ; SOURCE LINE # 723
0074 0500        R     INC     pTab+01H
0076 E500        R     MOV     A,pTab+01H
0078 AC00        R     MOV     R4,pTab
007A 7002              JNZ     ?C0278
007C 0500        R     INC     pTab
007E         ?C0278:
007E 14                DEC     A
007F F582              MOV     DPL,A
0081 8C83              MOV     DPH,R4
0083 741F              MOV     A,#01FH
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 724
0086 8012              SJMP    ?C0047
0088         ?C0048:
                                           ; SOURCE LINE # 725
0088 0500        R     INC     pTab+01H
008A E500        R     MOV     A,pTab+01H
008C AC00        R     MOV     R4,pTab
008E 7002              JNZ     ?C0279
0090 0500        R     INC     pTab
0092         ?C0279:
0092 14                DEC     A
0093 F582              MOV     DPL,A
0095 8C83              MOV     DPH,R4
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 56  

0097 7432              MOV     A,#032H
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 726
                                           ; SOURCE LINE # 727
009A         ?C0047:
                                           ; SOURCE LINE # 728
009A 0500        R     INC     pTab+01H
009C E500        R     MOV     A,pTab+01H
009E AC00        R     MOV     R4,pTab
00A0 7002              JNZ     ?C0280
00A2 0500        R     INC     pTab
00A4         ?C0280:
00A4 14                DEC     A
00A5 F582              MOV     DPL,A
00A7 8C83              MOV     DPH,R4
00A9 7420              MOV     A,#020H
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 729
00AC 850082      R     MOV     DPL,pFmtTab+01H
00AF 850083      R     MOV     DPH,pFmtTab
00B2 E0                MOVX    A,@DPTR
00B3 540A              ANL     A,#0AH
00B5 7003              JNZ     $ + 5H
00B7 020000      R     LJMP    ?C0050
                                           ; SOURCE LINE # 731
00BA BF0E04            CJNE    R7,#0EH,?C0051
                                           ; SOURCE LINE # 732
00BD 7F21              MOV     R7,#021H
                                           ; SOURCE LINE # 733
00BF 8002              SJMP    ?C0052
00C1         ?C0051:
                                           ; SOURCE LINE # 734
00C1 7F0E              MOV     R7,#0EH
                                           ; SOURCE LINE # 735
00C3         ?C0052:
                                           ; SOURCE LINE # 736
00C3 0500        R     INC     pTab+01H
00C5 E500        R     MOV     A,pTab+01H
00C7 AC00        R     MOV     R4,pTab
00C9 7002              JNZ     ?C0281
00CB 0500        R     INC     pTab
00CD         ?C0281:
00CD 14                DEC     A
00CE F582              MOV     DPL,A
00D0 8C83              MOV     DPH,R4
00D2 EF                MOV     A,R7
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 737
00D4 E4                CLR     A
00D5 FE                MOV     R6,A
00D6         ?C0053:
00D6 850082      R     MOV     DPL,pFmtTab+01H
00D9 850083      R     MOV     DPH,pFmtTab
00DC A3                INC     DPTR
00DD A3                INC     DPTR
00DE A3                INC     DPTR
00DF E0                MOVX    A,@DPTR
00E0 FD                MOV     R5,A
00E1 EE                MOV     A,R6
00E2 C3                CLR     C
00E3 9D                SUBB    A,R5
00E4 5018              JNC     ?C0054
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 57  

                                           ; SOURCE LINE # 738
00E6 EF                MOV     A,R7
00E7 04                INC     A
00E8 2E                ADD     A,R6
00E9 FD                MOV     R5,A
00EA 0500        R     INC     pTab+01H
00EC E500        R     MOV     A,pTab+01H
00EE AA00        R     MOV     R2,pTab
00F0 7002              JNZ     ?C0282
00F2 0500        R     INC     pTab
00F4         ?C0282:
00F4 14                DEC     A
00F5 F582              MOV     DPL,A
00F7 8A83              MOV     DPH,R2
00F9 ED                MOV     A,R5
00FA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 739
00FB 0E                INC     R6
00FC 80D8              SJMP    ?C0053
00FE         ?C0054:
                                           ; SOURCE LINE # 741
00FE 900000      E     MOV     DPTR,#pbFmtTab+04H
0101 E0                MOVX    A,@DPTR
0102 D3                SETB    C
0103 9400              SUBB    A,#00H
0105 4029              JC      ?C0056
                                           ; SOURCE LINE # 742
0107 BF0E14            CJNE    R7,#0EH,?C0057
                                           ; SOURCE LINE # 743
010A 0500        R     INC     pTab+01H
010C E500        R     MOV     A,pTab+01H
010E AC00        R     MOV     R4,pTab
0110 7002              JNZ     ?C0283
0112 0500        R     INC     pTab
0114         ?C0283:
0114 14                DEC     A
0115 F582              MOV     DPL,A
0117 8C83              MOV     DPH,R4
0119 741F              MOV     A,#01FH
011B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 744
011C 8012              SJMP    ?C0056
011E         ?C0057:
                                           ; SOURCE LINE # 745
011E 0500        R     INC     pTab+01H
0120 E500        R     MOV     A,pTab+01H
0122 AC00        R     MOV     R4,pTab
0124 7002              JNZ     ?C0284
0126 0500        R     INC     pTab
0128         ?C0284:
0128 14                DEC     A
0129 F582              MOV     DPL,A
012B 8C83              MOV     DPH,R4
012D 7432              MOV     A,#032H
012F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 746
                                           ; SOURCE LINE # 747
0130         ?C0056:
                                           ; SOURCE LINE # 748
0130 0500        R     INC     pTab+01H
0132 E500        R     MOV     A,pTab+01H
0134 AC00        R     MOV     R4,pTab
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 58  

0136 7002              JNZ     ?C0285
0138 0500        R     INC     pTab
013A         ?C0285:
013A 14                DEC     A
013B F582              MOV     DPL,A
013D 8C83              MOV     DPH,R4
013F 7420              MOV     A,#020H
0141 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 749
0142         ?C0050:
                                           ; SOURCE LINE # 750
0142 850082      R     MOV     DPL,pTab+01H
0145 850083      R     MOV     DPH,pTab
0148 74FF              MOV     A,#0FFH
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 759
014B 22                RET     
             ; FUNCTION ConstrcutStrmIDSequence (END)

             ; FUNCTION _AutoGenDesc (BEGIN)
                                           ; SOURCE LINE # 761
0000 8F00        R     MOV     DescID,R7
                                           ; SOURCE LINE # 762
                                           ; SOURCE LINE # 766
0002 E500        R     MOV     A,DescID
0004 C3                CLR     C
0005 940F              SUBB    A,#0FH
0007 4007              JC      ?C0062
0009 E500        R     MOV     A,DescID
000B D3                SETB    C
000C 941E              SUBB    A,#01EH
000E 400E              JC      ?C0061
0010         ?C0062:
0010 E500        R     MOV     A,DescID
0012 C3                CLR     C
0013 9422              SUBB    A,#022H
0015 400C              JC      ?C0060
0017 E500        R     MOV     A,DescID
0019 D3                SETB    C
001A 9431              SUBB    A,#031H
001C 5005              JNC     ?C0060
001E         ?C0061:
                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 768
001E AF00        R     MOV     R7,DescID
0020 020000      R     LJMP    _Construct_Frm_Desc
                                           ; SOURCE LINE # 770
0023         ?C0060:
                                           ; SOURCE LINE # 771
0023 E500        R     MOV     A,DescID
0025 120000      E     LCALL   ?C?CCASE
0028 0000        R     DW      ?C0066
002A 01                DB      01H
002B 0000        R     DW      ?C0066
002D 02                DB      02H
002E 0000        R     DW      ?C0067
0030 0D                DB      0DH
0031 0000        R     DW      ?C0068
0033 0E                DB      0EH
0034 0000        R     DW      ?C0070
0036 1F                DB      01FH
0037 0000        R     DW      ?C0071
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 59  

0039 20                DB      020H
003A 0000        R     DW      ?C0072
003C 21                DB      021H
003D 0000        R     DW      ?C0070
003F 32                DB      032H
0040 0000              DW      00H
0042 0000        R     DW      ?C0063
                                           ; SOURCE LINE # 772
                                           ; SOURCE LINE # 773
0044         ?C0066:
                                           ; SOURCE LINE # 774
0044 020000      R     LJMP    Construct_ConfDesc
                                           ; SOURCE LINE # 775
                                           ; SOURCE LINE # 776
0047         ?C0067:
                                           ; SOURCE LINE # 777
0047 020000      R     LJMP    ContructCS_VS_INTFDesc
                                           ; SOURCE LINE # 778
                                           ; SOURCE LINE # 779
004A         ?C0068:
                                           ; SOURCE LINE # 780
004A 020000      R     LJMP    Construct_UC_FORMAT_Desc
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 782
                                           ; SOURCE LINE # 783
004D         ?C0070:
                                           ; SOURCE LINE # 784
004D AF00        R     MOV     R7,DescID
004F 020000      R     LJMP    _Construct_IMG_Frm_Desc
                                           ; SOURCE LINE # 785
                                           ; SOURCE LINE # 786
0052         ?C0071:
                                           ; SOURCE LINE # 787
0052 020000      R     LJMP    Construct_ColorMatch_Desc
                                           ; SOURCE LINE # 788
                                           ; SOURCE LINE # 789
0055         ?C0072:
                                           ; SOURCE LINE # 790
0055 120000      R     LCALL   Construct_MJ_FORMAT_Desc
                                           ; SOURCE LINE # 791
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
0058         ?C0063:
0058 22                RET     
             ; FUNCTION _AutoGenDesc (END)

             ; FUNCTION _SetPtrTabById (BEGIN)
                                           ; SOURCE LINE # 794
;---- Variable 'iDescID' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 795
                                           ; SOURCE LINE # 798
0000 8F00        R     MOV     DescID,R7
                                           ; SOURCE LINE # 800
0002 C200        E     CLR     xExtendTabMap
                                           ; SOURCE LINE # 808
0004 E500        R     MOV     A,DescID
0006 7021              JNZ     ?C0073
                                           ; SOURCE LINE # 809
0008 20000A      E     JB      xBDGP16,?C0074
000B 300007      E     JNB     xBDGP13,?C0074
                                           ; SOURCE LINE # 811
000E 750000      E     MOV     wTabAddr,#HIGH USBDeviceDesc10
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 60  

0011 750000      E     MOV     wTabAddr+01H,#LOW USBDeviceDesc10
                                           ; SOURCE LINE # 812
0014 22                RET     
0015         ?C0074:
0015 30000A      E     JNB     xBDGP16,?C0076
0018 200007      E     JB      xBDGP13,?C0076
                                           ; SOURCE LINE # 814
001B 750000      E     MOV     wTabAddr,#HIGH USBDeviceDescCN
001E 750000      E     MOV     wTabAddr+01H,#LOW USBDeviceDescCN
                                           ; SOURCE LINE # 815
0021 22                RET     
0022         ?C0076:
                                           ; SOURCE LINE # 816
                                           ; SOURCE LINE # 817
0022 750000      E     MOV     wTabAddr,#HIGH USBDeviceDesc
0025 750000      E     MOV     wTabAddr+01H,#LOW USBDeviceDesc
                                           ; SOURCE LINE # 818
0028 22                RET     
                                           ; SOURCE LINE # 821
0029         ?C0073:
                                           ; SOURCE LINE # 828
0029 E500        R     MOV     A,DescID
002B 640C              XRL     A,#0CH
002D 7003              JNZ     $ + 5H
002F 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 831
0032         ?C0079:
                                           ; SOURCE LINE # 832
0032 E500        R     MOV     A,DescID
0034 C3                CLR     C
0035 9403              SUBB    A,#03H
0037 4014              JC      ?C0080
0039 E500        R     MOV     A,DescID
003B D3                SETB    C
003C 940B              SUBB    A,#0BH
003E 500D              JNC     ?C0080
                                           ; SOURCE LINE # 833
0040 E500        R     MOV     A,DescID
0042 25E0              ADD     A,ACC
0044 2400        R     ADD     A,#LOW TableAddr
0046 F582              MOV     DPL,A
0048 E4                CLR     A
0049 3400        R     ADDC    A,#HIGH TableAddr
004B 8019              SJMP    ?C0295
                                           ; SOURCE LINE # 835
004D         ?C0080:
                                           ; SOURCE LINE # 837
004D E500        R     MOV     A,DescID
004F C3                CLR     C
0050 9433              SUBB    A,#033H
0052 401E              JC      ?C0081
0054 E500        R     MOV     A,DescID
0056 D3                SETB    C
0057 9454              SUBB    A,#054H
0059 5017              JNC     ?C0081
                                           ; SOURCE LINE # 838
005B E500        R     MOV     A,DescID
005D 25E0              ADD     A,ACC
005F 2400        R     ADD     A,#LOW TableAddr+0FFB6H
0061 F582              MOV     DPL,A
0063 E4                CLR     A
0064 3400        R     ADDC    A,#HIGH TableAddr+0FFB6H
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 61  

0066         ?C0295:
0066 F583              MOV     DPH,A
0068 E4                CLR     A
0069 93                MOVC    A,@A+DPTR
006A F500        E     MOV     wTabAddr,A
006C 7401              MOV     A,#01H
006E 93                MOVC    A,@A+DPTR
006F F500        E     MOV     wTabAddr+01H,A
0071 22                RET     
                                           ; SOURCE LINE # 841
0072         ?C0081:
                                           ; SOURCE LINE # 842
0072 E500        R     MOV     A,DescID
0074 B45507            CJNE    A,#055H,?C0082
                                           ; SOURCE LINE # 844
0077 750000      E     MOV     wTabAddr,#HIGH PwrLineCtrl
007A 750000      E     MOV     wTabAddr+01H,#LOW PwrLineCtrl
007D 22                RET     
                                           ; SOURCE LINE # 849
007E         ?C0082:
                                           ; SOURCE LINE # 850
007E E500        R     MOV     A,DescID
0080 C3                CLR     C
0081 9456              SUBB    A,#056H
0083 4048              JC      ?C0083
0085 E500        R     MOV     A,DescID
0087 D3                SETB    C
0088 946B              SUBB    A,#06BH
008A 5041              JNC     ?C0083
                                           ; SOURCE LINE # 851
008C E500        R     MOV     A,DescID
008E 25E0              ADD     A,ACC
0090 2400        R     ADD     A,#LOW TableAddr+0FFB6H
0092 F582              MOV     DPL,A
0094 E4                CLR     A
0095 3400        R     ADDC    A,#HIGH TableAddr+0FFB6H
0097 F583              MOV     DPH,A
0099 E4                CLR     A
009A 93                MOVC    A,@A+DPTR
009B F500        E     MOV     wTabAddr,A
009D 7401              MOV     A,#01H
009F 93                MOVC    A,@A+DPTR
00A0 F500        E     MOV     wTabAddr+01H,A
                                           ; SOURCE LINE # 852
00A2 E500        R     MOV     A,DescID
00A4 B46402            CJNE    A,#064H,?C0084
                                           ; SOURCE LINE # 853
00A7 C200        E     CLR     xExResTable
                                           ; SOURCE LINE # 854
00A9         ?C0084:
                                           ; SOURCE LINE # 856
00A9 E500        R     MOV     A,DescID
00AB B46709            CJNE    A,#067H,?C0085
00AE 300006      E     JNB     xBDGP16,?C0085
                                           ; SOURCE LINE # 857
                                           ; SOURCE LINE # 858
00B1 750000      E     MOV     wTabAddr,#HIGH HighStrmFormatTab_AX
00B4 750000      E     MOV     wTabAddr+01H,#LOW HighStrmFormatTab_AX
                                           ; SOURCE LINE # 859
00B7         ?C0085:
                                           ; SOURCE LINE # 861
00B7 E500        R     MOV     A,DescID
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 62  

00B9 6468              XRL     A,#068H
00BB 6003              JZ      $ + 5H
00BD 020000      R     LJMP    ?C0078
00C0 200003      E     JB      xBDGP16,$ + 6H
00C3 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 862
                                           ; SOURCE LINE # 863
00C6 750000      E     MOV     wTabAddr,#HIGH FullStrmFormatTab_AX
00C9 750000      E     MOV     wTabAddr+01H,#LOW FullStrmFormatTab_AX
                                           ; SOURCE LINE # 864
00CC 22                RET     
                                           ; SOURCE LINE # 867
00CD         ?C0083:
                                           ; SOURCE LINE # 868
00CD E500        R     MOV     A,DescID
00CF C3                CLR     C
00D0 946C              SUBB    A,#06CH
00D2 4066              JC      ?C0087
00D4 E500        R     MOV     A,DescID
00D6 D3                SETB    C
00D7 9475              SUBB    A,#075H
00D9 505F              JNC     ?C0087
                                           ; SOURCE LINE # 869
00DB E500        R     MOV     A,DescID
00DD 120000      E     LCALL   ?C?CCASE
00E0 0000        R     DW      ?C0089
00E2 6C                DB      06CH
00E3 0000        R     DW      ?C0090
00E5 6D                DB      06DH
00E6 0000        R     DW      ?C0091
00E8 6E                DB      06EH
00E9 0000        R     DW      ?C0092
00EB 6F                DB      06FH
00EC 0000        R     DW      ?C0093
00EE 70                DB      070H
00EF 0000        R     DW      ?C0094
00F1 71                DB      071H
00F2 0000        R     DW      ?C0095
00F4 72                DB      072H
00F5 0000        R     DW      ?C0096
00F7 73                DB      073H
00F8 0000        R     DW      ?C0097
00FA 74                DB      074H
00FB 0000        R     DW      ?C0098
00FD 75                DB      075H
00FE 0000              DW      00H
0100 0000        R     DW      ?C0078
                                           ; SOURCE LINE # 870
0102         ?C0089:
                                           ; SOURCE LINE # 871
0102 900000      E     MOV     DPTR,#pbExSetTabResv
                                           ; SOURCE LINE # 872
0105 802B              SJMP    ?C0304
                                           ; SOURCE LINE # 873
0107         ?C0090:
                                           ; SOURCE LINE # 874
0107 900000      E     MOV     DPTR,#pbExSetTabResv+02H
010A         ?C0296:
                                           ; SOURCE LINE # 875
010A 8026              SJMP    ?C0304
                                           ; SOURCE LINE # 876
010C         ?C0091:
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 63  

                                           ; SOURCE LINE # 877
010C 900000      E     MOV     DPTR,#pbExSetTabResv+04H
010F         ?C0297:
                                           ; SOURCE LINE # 878
010F 8021              SJMP    ?C0304
                                           ; SOURCE LINE # 879
0111         ?C0092:
                                           ; SOURCE LINE # 880
0111 900000      E     MOV     DPTR,#pbExSetTabResv+06H
0114         ?C0298:
                                           ; SOURCE LINE # 881
0114 801C              SJMP    ?C0304
                                           ; SOURCE LINE # 882
0116         ?C0093:
                                           ; SOURCE LINE # 883
0116 900000      E     MOV     DPTR,#pbExSetTabResv+08H
0119         ?C0299:
                                           ; SOURCE LINE # 884
0119 8017              SJMP    ?C0304
                                           ; SOURCE LINE # 885
011B         ?C0094:
                                           ; SOURCE LINE # 886
011B 900000      E     MOV     DPTR,#pbExSetTabResv+0AH
011E         ?C0300:
                                           ; SOURCE LINE # 887
011E 8012              SJMP    ?C0304
                                           ; SOURCE LINE # 888
0120         ?C0095:
                                           ; SOURCE LINE # 889
0120 900000      E     MOV     DPTR,#pbExSetTabResv+0CH
0123         ?C0301:
                                           ; SOURCE LINE # 890
0123 800D              SJMP    ?C0304
                                           ; SOURCE LINE # 891
0125         ?C0096:
                                           ; SOURCE LINE # 892
0125 900000      E     MOV     DPTR,#pbExSetTabResv+0EH
0128         ?C0302:
                                           ; SOURCE LINE # 893
0128 8008              SJMP    ?C0304
                                           ; SOURCE LINE # 894
012A         ?C0097:
                                           ; SOURCE LINE # 895
012A 900000      E     MOV     DPTR,#pbExSetTabResv+010H
012D         ?C0303:
                                           ; SOURCE LINE # 896
012D 8003              SJMP    ?C0304
                                           ; SOURCE LINE # 897
012F         ?C0098:
                                           ; SOURCE LINE # 898
012F 900000      E     MOV     DPTR,#pbExSetTabResv+012H
0132         ?C0304:
0132 E0                MOVX    A,@DPTR
0133 F500        E     MOV     wTabAddr,A
0135 A3                INC     DPTR
0136 E0                MOVX    A,@DPTR
0137 F500        E     MOV     wTabAddr+01H,A
                                           ; SOURCE LINE # 899
0139 22                RET     
                                           ; SOURCE LINE # 900
                                           ; SOURCE LINE # 902
013A         ?C0087:
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 64  

                                           ; SOURCE LINE # 905
013A E500        R     MOV     A,DescID
013C C3                CLR     C
013D 9476              SUBB    A,#076H
013F 400A              JC      ?C0099
0141 E500        R     MOV     A,DescID
0143 D3                SETB    C
0144 947B              SUBB    A,#07BH
0146 5003              JNC     $ + 5H
0148 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 906
                                           ; SOURCE LINE # 908
014B         ?C0099:
                                           ; SOURCE LINE # 911
014B E500        R     MOV     A,DescID
014D C3                CLR     C
014E 947C              SUBB    A,#07CH
0150 403A              JC      ?C0100
0152 E500        R     MOV     A,DescID
0154 9483              SUBB    A,#083H
0156 5034              JNC     ?C0100
                                           ; SOURCE LINE # 912
                                           ; SOURCE LINE # 913
0158 75F002            MOV     B,#02H
015B E500        R     MOV     A,DescID
015D 900000      R     MOV     DPTR,#TableAddr-06AH
0160 120000      E     LCALL   ?C?OFFXADD
0163 E4                CLR     A
0164 93                MOVC    A,@A+DPTR
0165 F500        E     MOV     wTabAddr,A
0167 7401              MOV     A,#01H
0169 93                MOVC    A,@A+DPTR
016A F500        E     MOV     wTabAddr+01H,A
                                           ; SOURCE LINE # 915
016C E500        R     MOV     A,DescID
016E 647F              XRL     A,#07FH
0170 6003              JZ      $ + 5H
0172 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 916
                                           ; SOURCE LINE # 917
0175 200003      E     JB      xHighSpdMode,$ + 6H
0178 020000      R     LJMP    ?C0078
017B 900000      E     MOV     DPTR,#bSupFormat
017E E0                MOVX    A,@DPTR
017F 20E703            JB      ACC.7,$ + 6H
0182 020000      R     LJMP    ?C0078
                                           ; SOURCE LINE # 918
                                           ; SOURCE LINE # 919
0185 750000      E     MOV     wTabAddr,#HIGH AU_DMIC_ARRAY_IT_Desc
0188 750000      E     MOV     wTabAddr+01H,#LOW AU_DMIC_ARRAY_IT_Desc
                                           ; SOURCE LINE # 920
                                           ; SOURCE LINE # 922
018B 22                RET     
                                           ; SOURCE LINE # 924
018C         ?C0100:
                                           ; SOURCE LINE # 925
018C E500        R     MOV     A,DescID
018E 6483              XRL     A,#083H
0190 6076              JZ      ?C0078
                                           ; SOURCE LINE # 928
0192         ?C0103:
                                           ; SOURCE LINE # 929
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 65  

0192 E500        R     MOV     A,DescID
0194 C3                CLR     C
0195 9484              SUBB    A,#084H
0197 402B              JC      ?C0104
0199 E500        R     MOV     A,DescID
019B D3                SETB    C
019C 948B              SUBB    A,#08BH
019E 5024              JNC     ?C0104
                                           ; SOURCE LINE # 930
                                           ; SOURCE LINE # 931
01A0 75F002            MOV     B,#02H
01A3 E500        R     MOV     A,DescID
01A5 900000      R     MOV     DPTR,#TableAddr-06CH
01A8 120000      E     LCALL   ?C?OFFXADD
01AB E4                CLR     A
01AC 93                MOVC    A,@A+DPTR
01AD F500        E     MOV     wTabAddr,A
01AF 7401              MOV     A,#01H
01B1 93                MOVC    A,@A+DPTR
01B2 F500        E     MOV     wTabAddr+01H,A
                                           ; SOURCE LINE # 933
01B4 E500        R     MOV     A,DescID
01B6 B48502            CJNE    A,#085H,?C0105
                                           ; SOURCE LINE # 934
01B9 C200        E     CLR     xExAuSetExist
01BB         ?C0105:
                                           ; SOURCE LINE # 936
01BB E500        R     MOV     A,DescID
01BD 6487              XRL     A,#087H
01BF 7047              JNZ     ?C0078
                                           ; SOURCE LINE # 937
01C1 C200        E     CLR     xExVolGainExist
01C3 22                RET     
                                           ; SOURCE LINE # 940
01C4         ?C0104:
                                           ; SOURCE LINE # 943
01C4 E500        R     MOV     A,DescID
01C6 C3                CLR     C
01C7 948C              SUBB    A,#08CH
01C9 4026              JC      ?C0107
                                           ; SOURCE LINE # 946
01CB 7474              MOV     A,#074H
01CD 2500        R     ADD     A,DescID
01CF F500        R     MOV     DescID,A
                                           ; SOURCE LINE # 947
01D1 750000      R     MOV     wAddr,#00H
01D4 F500        R     MOV     wAddr+01H,A
                                           ; SOURCE LINE # 948
01D6 E500        R     MOV     A,wAddr+01H
01D8 25E0              ADD     A,ACC
01DA F500        R     MOV     wAddr+01H,A
01DC E500        R     MOV     A,wAddr
01DE 33                RLC     A
01DF F500        R     MOV     wAddr,A
                                           ; SOURCE LINE # 949
01E1 900000      E     MOV     DPTR,#wIdxTabAddrOffset
01E4 E0                MOVX    A,@DPTR
01E5 FE                MOV     R6,A
01E6 A3                INC     DPTR
01E7 E0                MOVX    A,@DPTR
01E8 2500        R     ADD     A,wAddr+01H
01EA F500        R     MOV     wAddr+01H,A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 66  

01EC EE                MOV     A,R6
01ED 3500        R     ADDC    A,wAddr
01EF F500        R     MOV     wAddr,A
                                           ; SOURCE LINE # 950
01F1         ?C0107:
                                           ; SOURCE LINE # 952
01F1 E4                CLR     A
01F2 2500        R     ADD     A,wAddr+01H
01F4 F500        R     MOV     wAddr+01H,A
01F6 7480              MOV     A,#080H
01F8 3500        R     ADDC    A,wAddr
01FA F500        R     MOV     wAddr,A
                                           ; SOURCE LINE # 953
01FC AF00        R     MOV     R7,wAddr+01H
01FE FE                MOV     R6,A
01FF 120000      R     LCALL   _GetTabMapWord
0202 8E00        E     MOV     wTabAddr,R6
0204 8F00        E     MOV     wTabAddr+01H,R7
                                           ; SOURCE LINE # 967
0206 D200        E     SETB    xExtendTabMap
                                           ; SOURCE LINE # 985
0208         ?C0078:
0208 22                RET     
             ; FUNCTION _SetPtrTabById (END)

             ; FUNCTION _SetPtrTabEx (BEGIN)
                                           ; SOURCE LINE # 990
;---- Variable 'iIdxOffset' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 991
                                           ; SOURCE LINE # 995
0000 E4                CLR     A
0001 7800        R     MOV     R0,#LOW testflag
0003 F6                MOV     @R0,A
                                           ; SOURCE LINE # 998
0004 7800        R     MOV     R0,#LOW IdxOffset
0006 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1007
0008 C200        E     CLR     xExtendTabMap
                                           ; SOURCE LINE # 1009
000A 30001A      E     JNB     xSetFileExist,?C0108
                                           ; SOURCE LINE # 1011
000D E6                MOV     A,@R0
000E FF                MOV     R7,A
000F 900000      E     MOV     DPTR,#wSetStartAddr+01H
0012 E0                MOVX    A,@DPTR
0013 2F                ADD     A,R7
0014 FF                MOV     R7,A
0015 900000      E     MOV     DPTR,#wSetStartAddr
0018 E0                MOVX    A,@DPTR
0019 3400              ADDC    A,#00H
001B CF                XCH     A,R7
001C 2400              ADD     A,#00H
001E F500        R     MOV     wAddr+01H,A
0020 EF                MOV     A,R7
0021 3480              ADDC    A,#080H
0023 F500        R     MOV     wAddr,A
                                           ; SOURCE LINE # 1012
0025 8010              SJMP    ?C0109
0027         ?C0108:
                                           ; SOURCE LINE # 1014
0027 7800        R     MOV     R0,#LOW IdxOffset
0029 E6                MOV     A,@R0
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 67  

002A 2400        E     ADD     A,#LOW InternalIdxTable
002C F582              MOV     DPL,A
002E E4                CLR     A
002F 3400        E     ADDC    A,#HIGH InternalIdxTable
0031 AF82              MOV     R7,DPL
0033 F500        R     MOV     wAddr,A
0035 8F00        R     MOV     wAddr+01H,R7
                                           ; SOURCE LINE # 1015
0037         ?C0109:
                                           ; SOURCE LINE # 1022
0037 7800        R     MOV     R0,#LOW IdxOffset
0039 E6                MOV     A,@R0
003A 24EB              ADD     A,#0EBH
003C 6008              JZ      ?C0113
003E 24EC              ADD     A,#0ECH
0040 6004              JZ      ?C0113
0042 2428              ADD     A,#028H
0044 7007              JNZ     ?C0114
                                           ; SOURCE LINE # 1023
                                           ; SOURCE LINE # 1024
                                           ; SOURCE LINE # 1025
0046         ?C0113:
                                           ; SOURCE LINE # 1028
0046 850000      E     MOV     wTabAddr,wAddr
0049 850000      E     MOV     wTabAddr+01H,wAddr+01H
                                           ; SOURCE LINE # 1029
004C 22                RET     
                                           ; SOURCE LINE # 1030
004D         ?C0114:
                                           ; SOURCE LINE # 1031
004D AF00        R     MOV     R7,wAddr+01H
004F AE00        R     MOV     R6,wAddr
0051 120000      R     LCALL   _GetTabMapByte
0054 8F00        R     MOV     bIdx,R7
                                           ; SOURCE LINE # 1032
0056 120000      R     LCALL   _SetPtrTabById
                                           ; SOURCE LINE # 1044
                                           ; SOURCE LINE # 1045
                                           ; SOURCE LINE # 1055
0059         ?C0115:
0059 22                RET     
             ; FUNCTION _SetPtrTabEx (END)

             ; FUNCTION ConstructResTable (BEGIN)
                                           ; SOURCE LINE # 1057
                                           ; SOURCE LINE # 1058
                                           ; SOURCE LINE # 1063
0000 D200        E     SETB    xExResTable
                                           ; SOURCE LINE # 1064
0002 7F46              MOV     R7,#046H
0004 120000      R     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 1065
0007 300036      E     JNB     xExResTable,?C0120
                                           ; SOURCE LINE # 1068
000A E4                CLR     A
000B FF                MOV     R7,A
000C FE                MOV     R6,A
000D 120000      R     LCALL   _GetTab
0010 8F00        R     MOV     Cnt,R7
                                           ; SOURCE LINE # 1069
0012 E500        R     MOV     A,Cnt
0014 25E0              ADD     A,ACC
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 68  

0016 25E0              ADD     A,ACC
0018 F500        R     MOV     Cnt,A
                                           ; SOURCE LINE # 1070
001A E4                CLR     A
001B F500        R     MOV     i,A
001D         ?C0117:
001D E500        R     MOV     A,i
001F C3                CLR     C
0020 9500        R     SUBB    A,Cnt
0022 501C              JNC     ?C0120
                                           ; SOURCE LINE # 1072
0024 E500        R     MOV     A,i
0026 2401              ADD     A,#01H
0028 FF                MOV     R7,A
0029 E4                CLR     A
002A 33                RLC     A
002B FE                MOV     R6,A
002C 120000      R     LCALL   _GetTab
002F 7400        E     MOV     A,#LOW pbResTable
0031 2500        R     ADD     A,i
0033 F582              MOV     DPL,A
0035 E4                CLR     A
0036 3400        E     ADDC    A,#HIGH pbResTable
0038 F583              MOV     DPH,A
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1073
003C 0500        R     INC     i
003E 80DD              SJMP    ?C0117
                                           ; SOURCE LINE # 1074
                                           ; SOURCE LINE # 1075
0040         ?C0120:
0040 22                RET     
             ; FUNCTION ConstructResTable (END)

             ; FUNCTION ConstructStreamTable (BEGIN)
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1081
0000 300004      E     JNB     xHighSpdMode,?C0121
                                           ; SOURCE LINE # 1082
0003 7F36              MOV     R7,#036H
                                           ; SOURCE LINE # 1083
0005 8002              SJMP    ?C0305
0007         ?C0121:
                                           ; SOURCE LINE # 1084
0007 7F37              MOV     R7,#037H
0009         ?C0305:
0009 120000      R     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 1085
000C         ?C0122:
                                           ; SOURCE LINE # 1088
000C 750001      R     MOV     i,#01H
000F 750005      R     MOV     j,#05H
0012         ?C0123:
                                           ; SOURCE LINE # 1089
0012 AF00        R     MOV     R7,i
0014 7E00              MOV     R6,#00H
0016 120000      R     LCALL   _GetTab
0019 EF                MOV     A,R7
001A 2500        R     ADD     A,j
001C F500        R     MOV     j,A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 69  

                                           ; SOURCE LINE # 1090
001E 0500        R     INC     i
0020 E500        R     MOV     A,i
0022 C3                CLR     C
0023 9405              SUBB    A,#05H
0025 40EB              JC      ?C0123
0027         ?C0124:
                                           ; SOURCE LINE # 1091
0027 E4                CLR     A
0028 F500        R     MOV     i,A
002A         ?C0126:
002A E500        R     MOV     A,i
002C C3                CLR     C
002D 9500        R     SUBB    A,j
002F 5018              JNC     ?C0127
                                           ; SOURCE LINE # 1092
0031 AF00        R     MOV     R7,i
0033 7E00              MOV     R6,#00H
0035 120000      R     LCALL   _GetTab
0038 7400        E     MOV     A,#LOW pbFmtTab
003A 2500        R     ADD     A,i
003C F582              MOV     DPL,A
003E E4                CLR     A
003F 3400        E     ADDC    A,#HIGH pbFmtTab
0041 F583              MOV     DPH,A
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1093
0045 0500        R     INC     i
0047 80E1              SJMP    ?C0126
0049         ?C0127:
                                           ; SOURCE LINE # 1094
0049 120000      R     LCALL   ConstructResTable
                                           ; SOURCE LINE # 1095
004C 020000      R     LJMP    ConstrcutStrmIDSequence
             ; FUNCTION ConstructStreamTable (END)

             ; FUNCTION _GetTabXdata (BEGIN)
                                           ; SOURCE LINE # 1099
;---- Variable 'index' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1100
                                           ; SOURCE LINE # 1101
0000 7400        E     MOV     A,#LOW pbTmpBuf
0002 2F                ADD     A,R7
0003 F582              MOV     DPL,A
0005 E4                CLR     A
0006 3400        E     ADDC    A,#HIGH pbTmpBuf
0008 F583              MOV     DPH,A
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
                                           ; SOURCE LINE # 1102
000C         ?C0130:
000C 22                RET     
             ; FUNCTION _GetTabXdata (END)

             ; FUNCTION _GetTabMapByte (BEGIN)
                                           ; SOURCE LINE # 1105
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1106
                                           ; SOURCE LINE # 1107
0000 900000      R     MOV     DPTR,#GetTabMapAddr
0003 EE                MOV     A,R6
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 70  

0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1120
0008 C3                CLR     C
0009 EE                MOV     A,R6
000A 9480              SUBB    A,#080H
000C 4018              JC      ?C0131
000E 900027            MOV     DPTR,#027H
0011 E0                MOVX    A,@DPTR
0012 20E411            JB      ACC.4,?C0131
                                           ; SOURCE LINE # 1121
                                           ; SOURCE LINE # 1129
0015 120000      E     LCALL   WaitPartialFWLoad
                                           ; SOURCE LINE # 1130
0018 900000      R     MOV     DPTR,#GetTabMapAddr
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F F582              MOV     DPL,A
0021 8E83              MOV     DPH,R6
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 22                RET     
                                           ; SOURCE LINE # 1131
0026         ?C0131:
                                           ; SOURCE LINE # 1132
                                           ; SOURCE LINE # 1134
0026 900000      R     MOV     DPTR,#GetTabMapAddr
0029 E0                MOVX    A,@DPTR
002A FE                MOV     R6,A
002B A3                INC     DPTR
002C E0                MOVX    A,@DPTR
002D F582              MOV     DPL,A
002F 8E83              MOV     DPH,R6
0031 E4                CLR     A
0032 93                MOVC    A,@A+DPTR
0033 FF                MOV     R7,A
                                           ; SOURCE LINE # 1135
                                           ; SOURCE LINE # 1137
0034         ?C0132:
0034 22                RET     
             ; FUNCTION _GetTabMapByte (END)

             ; FUNCTION _GetTabMapWord (BEGIN)
                                           ; SOURCE LINE # 1138
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1139
                                           ; SOURCE LINE # 1140
0000 900000      R     MOV     DPTR,#GetTabMapAddr
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1152
0008 C3                CLR     C
0009 EE                MOV     A,R6
000A 9480              SUBB    A,#080H
000C 401B              JC      ?C0134
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 71  

000E 900027            MOV     DPTR,#027H
0011 E0                MOVX    A,@DPTR
0012 20E414            JB      ACC.4,?C0134
                                           ; SOURCE LINE # 1153
                                           ; SOURCE LINE # 1162
0015 120000      E     LCALL   WaitPartialFWLoad
                                           ; SOURCE LINE # 1163
0018 900000      R     MOV     DPTR,#GetTabMapAddr
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F F582              MOV     DPL,A
0021 8E83              MOV     DPH,R6
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 22                RET     
                                           ; SOURCE LINE # 1164
0029         ?C0134:
                                           ; SOURCE LINE # 1165
                                           ; SOURCE LINE # 1166
0029 900000      R     MOV     DPTR,#GetTabMapAddr
002C E0                MOVX    A,@DPTR
002D FE                MOV     R6,A
002E A3                INC     DPTR
002F E0                MOVX    A,@DPTR
0030 F582              MOV     DPL,A
0032 8E83              MOV     DPH,R6
0034 E4                CLR     A
0035 93                MOVC    A,@A+DPTR
0036 FE                MOV     R6,A
0037 7401              MOV     A,#01H
0039 93                MOVC    A,@A+DPTR
003A FF                MOV     R7,A
                                           ; SOURCE LINE # 1167
                                           ; SOURCE LINE # 1168
003B         ?C0135:
003B 22                RET     
             ; FUNCTION _GetTabMapWord (END)

             ; FUNCTION L?0325 (BEGIN)
0000 900000      E     MOV     DPTR,#bCacheLen
0003 E0                MOVX    A,@DPTR
0004 75F040            MOV     B,#040H
0007 A4                MUL     AB
0008 FF                MOV     R7,A
0009 AEF0              MOV     R6,B
000B 900000      E     MOV     DPTR,#wSetFileDataAddr+01H
000E E0                MOVX    A,@DPTR
000F 2F                ADD     A,R7
0010 F500        E     MOV     wCacheAddr+01H,A
0012 900000      E     MOV     DPTR,#wSetFileDataAddr
0015 E0                MOVX    A,@DPTR
0016 3E                ADDC    A,R6
0017 F500        E     MOV     wCacheAddr,A
0019 AF00        E     MOV     R7,wCacheAddr+01H
001B FE                MOV     R6,A
             ; FUNCTION _CheckLoadCacheBufCRC8 (BEGIN)
                                           ; SOURCE LINE # 1170
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 72  

;---- Variable 'wwStartAddr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1171
                                           ; SOURCE LINE # 1173
001C E4                CLR     A
001D 7800        R     MOV     R0,#LOW bOld_FWLoadState
001F F6                MOV     @R0,A
                                           ; SOURCE LINE # 1174
0020 7800        R     MOV     R0,#LOW wStartAddr
0022 A606              MOV     @R0,AR6
0024 08                INC     R0
0025 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1178
0027 E500        E     MOV     A,bFWLoadState
0029 600A              JZ      ?C0137
                                           ; SOURCE LINE # 1179
                                           ; SOURCE LINE # 1180
002B 120000      E     LCALL   WaitPartialFWLoad
                                           ; SOURCE LINE # 1181
002E 7800        R     MOV     R0,#LOW bOld_FWLoadState
0030 A600        E     MOV     @R0,bFWLoadState
                                           ; SOURCE LINE # 1182
0032 E4                CLR     A
0033 F500        E     MOV     bFWLoadState,A
                                           ; SOURCE LINE # 1183
0035         ?C0137:
                                           ; SOURCE LINE # 1185
0035 E4                CLR     A
0036 7800        R     MOV     R0,#LOW checkcount
0038 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1186
0039         CacheBufCRC8LOOP:
                                           ; SOURCE LINE # 1189
0039 900501            MOV     DPTR,#0501H
003C 7440              MOV     A,#040H
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1190
003F A3                INC     DPTR
0040 E4                CLR     A
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1197
0042 900500            MOV     DPTR,#0500H
0045 7403              MOV     A,#03H
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1207
0048 7800        R     MOV     R0,#LOW wStartAddr
004A E6                MOV     A,@R0
004B FE                MOV     R6,A
004C 08                INC     R0
004D E6                MOV     A,@R0
004E FF                MOV     R7,A
004F 7B01              MOV     R3,#01H
0051 7A00        E     MOV     R2,#HIGH pbCacheBuf
0053 7900        E     MOV     R1,#LOW pbCacheBuf
0055 7D20              MOV     R5,#020H
0057 120000      E     LCALL   _I2CEEPROMReadData
                                           ; SOURCE LINE # 1208
005A 7800        R     MOV     R0,#LOW wStartAddr+01H
005C E6                MOV     A,@R0
005D 2420              ADD     A,#020H
005F FF                MOV     R7,A
0060 18                DEC     R0
0061 E4                CLR     A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 73  

0062 36                ADDC    A,@R0
0063 FE                MOV     R6,A
0064 7B01              MOV     R3,#01H
0066 7A00        E     MOV     R2,#HIGH pbCacheBuf+020H
0068 7900        E     MOV     R1,#LOW pbCacheBuf+020H
006A 7D20              MOV     R5,#020H
006C 120000      E     LCALL   _I2CEEPROMReadData
                                           ; SOURCE LINE # 1215
006F 900503            MOV     DPTR,#0503H
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 900000      E     MOV     DPTR,#pbCacheBuf+03FH
0077 E0                MOVX    A,@DPTR
0078 6F                XRL     A,R7
0079 6010              JZ      ?C0139
                                           ; SOURCE LINE # 1216
                                           ; SOURCE LINE # 1222
007B 7800        R     MOV     R0,#LOW checkcount
007D E6                MOV     A,@R0
007E C3                CLR     C
007F 9403              SUBB    A,#03H
0081 5003              JNC     ?C0140
                                           ; SOURCE LINE # 1223
                                           ; SOURCE LINE # 1224
0083 06                INC     @R0
                                           ; SOURCE LINE # 1225
0084 80B3              SJMP    CacheBufCRC8LOOP
                                           ; SOURCE LINE # 1226
0086         ?C0140:
                                           ; SOURCE LINE # 1227
0086 E4                CLR     A
0087 F500        E     MOV     wCacheAddr,A
0089 F500        E     MOV     wCacheAddr+01H,A
                                           ; SOURCE LINE # 1228
008B         ?C0139:
                                           ; SOURCE LINE # 1229
008B 7800        R     MOV     R0,#LOW bOld_FWLoadState
008D E6                MOV     A,@R0
008E 6002              JZ      ?C0142
                                           ; SOURCE LINE # 1230
                                           ; SOURCE LINE # 1231
0090 F500        E     MOV     bFWLoadState,A
                                           ; SOURCE LINE # 1232
                                           ; SOURCE LINE # 1234
0092         ?C0142:
0092 22                RET     
             ; FUNCTION _CheckLoadCacheBufCRC8 (END)

             ; FUNCTION L?0328 (BEGIN)
0000 7800        R     MOV     R0,#LOW i
0002 7620              MOV     @R0,#020H
0004 E6                MOV     A,@R0
0005 FF                MOV     R7,A
0006 7E00              MOV     R6,#00H
             ; FUNCTION _GetTab (BEGIN)
                                           ; SOURCE LINE # 1250
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1251
                                           ; SOURCE LINE # 1252
0008 8E00        R     MOV     GetTabwAddr,R6
000A 8F00        R     MOV     GetTabwAddr+01H,R7
                                           ; SOURCE LINE # 1254
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 74  

000C E500        E     MOV     A,wTabAddr+01H
000E 2500        R     ADD     A,GetTabwAddr+01H
0010 F500        R     MOV     GetTabwAddr+01H,A
0012 E500        E     MOV     A,wTabAddr
0014 3500        R     ADDC    A,GetTabwAddr
0016 F500        R     MOV     GetTabwAddr,A
                                           ; SOURCE LINE # 1256
0018 200009      E     JB      xExtendTabMap,?C0143
                                           ; SOURCE LINE # 1258
001B AF00        R     MOV     R7,GetTabwAddr+01H
001D FE                MOV     R6,A
001E 120000      R     LCALL   _GetTabMapByte
0021 8F00        R     MOV     GetTabData,R7
                                           ; SOURCE LINE # 1259
0023 22                RET     
                                           ; SOURCE LINE # 1260
0024         ?C0143:
                                           ; SOURCE LINE # 1264
0024 200026      E     JB      xOTPSettingExist,?C0145
                                           ; SOURCE LINE # 1265
                                           ; SOURCE LINE # 1268
0027 900000      E     MOV     DPTR,#wSetFileDataAddr
002A E0                MOVX    A,@DPTR
002B FE                MOV     R6,A
002C A3                INC     DPTR
002D E0                MOVX    A,@DPTR
002E FF                MOV     R7,A
002F C3                CLR     C
0030 E500        R     MOV     A,GetTabwAddr+01H
0032 9F                SUBB    A,R7
0033 FF                MOV     R7,A
0034 E500        R     MOV     A,GetTabwAddr
0036 9E                SUBB    A,R6
0037 FE                MOV     R6,A
0038 7C00              MOV     R4,#00H
003A 7D3F              MOV     R5,#03FH
003C 120000      E     LCALL   ?C?UIDIV
003F 900000      E     MOV     DPTR,#bCacheLen
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1270
0044 2500        R     ADD     A,GetTabwAddr+01H
0046 F500        R     MOV     GetTabwAddr+01H,A
0048 E4                CLR     A
0049 3500        R     ADDC    A,GetTabwAddr
004B F500        R     MOV     GetTabwAddr,A
                                           ; SOURCE LINE # 1282
004D         ?C0145:
                                           ; SOURCE LINE # 1288
004D E500        E     MOV     A,wCacheAddr+01H
004F 4500        E     ORL     A,wCacheAddr
0051 601D              JZ      ?C0147
0053 E500        E     MOV     A,wCacheAddr+01H
0055 243F              ADD     A,#03FH
0057 FF                MOV     R7,A
0058 E4                CLR     A
0059 3500        E     ADDC    A,wCacheAddr
005B FE                MOV     R6,A
005C D3                SETB    C
005D E500        R     MOV     A,GetTabwAddr+01H
005F 9F                SUBB    A,R7
0060 E500        R     MOV     A,GetTabwAddr
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 75  

0062 9E                SUBB    A,R6
0063 500B              JNC     ?C0147
0065 C3                CLR     C
0066 E500        R     MOV     A,GetTabwAddr+01H
0068 9500        E     SUBB    A,wCacheAddr+01H
006A E500        R     MOV     A,GetTabwAddr
006C 9500        E     SUBB    A,wCacheAddr
006E 5034              JNC     ?C0146
0070         ?C0147:
                                           ; SOURCE LINE # 1289
                                           ; SOURCE LINE # 1291
0070 30002E      E     JNB     xOTPSettingExist,?C0148
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1293
0073 850000      E     MOV     wCacheAddr,GetTabwAddr
0076 850000      E     MOV     wCacheAddr+01H,GetTabwAddr+01H
                                           ; SOURCE LINE # 1294
0079 120000      E     LCALL   WaitPartialFWLoad
                                           ; SOURCE LINE # 1295
007C 7B01              MOV     R3,#01H
007E 7A00        E     MOV     R2,#HIGH pbCacheBuf
0080 7900        E     MOV     R1,#LOW pbCacheBuf
0082 7D20              MOV     R5,#020H
0084 AF00        E     MOV     R7,wCacheAddr+01H
0086 AE00        E     MOV     R6,wCacheAddr
0088 120000      E     LCALL   _OTPReadData
                                           ; SOURCE LINE # 1296
008B E500        E     MOV     A,wCacheAddr+01H
008D 2420              ADD     A,#020H
008F FF                MOV     R7,A
0090 E4                CLR     A
0091 3500        E     ADDC    A,wCacheAddr
0093 FE                MOV     R6,A
0094 7B01              MOV     R3,#01H
0096 7A00        E     MOV     R2,#HIGH pbCacheBuf+020H
0098 7900        E     MOV     R1,#LOW pbCacheBuf+020H
009A 7D20              MOV     R5,#020H
009C 120000      E     LCALL   _OTPReadData
                                           ; SOURCE LINE # 1297
009F 8003              SJMP    ?C0146
00A1         ?C0148:
                                           ; SOURCE LINE # 1298
                                           ; SOURCE LINE # 1300
                                           ; SOURCE LINE # 1302
00A1 120000      R     LCALL   L?0325
                                           ; SOURCE LINE # 1304
                                           ; SOURCE LINE # 1306
00A4         ?C0146:
                                           ; SOURCE LINE # 1307
00A4 C3                CLR     C
00A5 E500        R     MOV     A,GetTabwAddr+01H
00A7 9500        E     SUBB    A,wCacheAddr+01H
00A9 F500        R     MOV     GetIndex,A
                                           ; SOURCE LINE # 1309
00AB 2400        E     ADD     A,#LOW pbCacheBuf
00AD F582              MOV     DPL,A
00AF E4                CLR     A
00B0 3400        E     ADDC    A,#HIGH pbCacheBuf
00B2 F583              MOV     DPH,A
00B4 E0                MOVX    A,@DPTR
00B5 F500        R     MOV     GetTabData,A
                                           ; SOURCE LINE # 1314
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 76  

00B7 FF                MOV     R7,A
                                           ; SOURCE LINE # 1315
00B8         ?C0144:
00B8 22                RET     
             ; FUNCTION _GetTab (END)

             ; FUNCTION _GetTabW (BEGIN)
                                           ; SOURCE LINE # 1317
;---- Variable 'wAddr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 1318
                                           ; SOURCE LINE # 1320
0000 8E00        R     MOV     GetTabwAddr,R6
0002 8F00        R     MOV     GetTabwAddr+01H,R7
                                           ; SOURCE LINE # 1322
0004 E500        E     MOV     A,wTabAddr+01H
0006 2500        R     ADD     A,GetTabwAddr+01H
0008 F500        R     MOV     GetTabwAddr+01H,A
000A E500        E     MOV     A,wTabAddr
000C 3500        R     ADDC    A,GetTabwAddr
000E F500        R     MOV     GetTabwAddr,A
                                           ; SOURCE LINE # 1324
0010 20000B      E     JB      xExtendTabMap,?C0150
                                           ; SOURCE LINE # 1326
0013 AF00        R     MOV     R7,GetTabwAddr+01H
0015 FE                MOV     R6,A
0016 120000      R     LCALL   _GetTabMapWord
0019 8E00        R     MOV     GetTabDataW,R6
001B 8F00        R     MOV     GetTabDataW+01H,R7
                                           ; SOURCE LINE # 1327
001D 22                RET     
                                           ; SOURCE LINE # 1328
001E         ?C0150:
                                           ; SOURCE LINE # 1332
001E 200026      E     JB      xOTPSettingExist,?C0152
                                           ; SOURCE LINE # 1333
                                           ; SOURCE LINE # 1336
0021 900000      E     MOV     DPTR,#wSetFileDataAddr
0024 E0                MOVX    A,@DPTR
0025 FE                MOV     R6,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 C3                CLR     C
002A E500        R     MOV     A,GetTabwAddr+01H
002C 9F                SUBB    A,R7
002D FF                MOV     R7,A
002E E500        R     MOV     A,GetTabwAddr
0030 9E                SUBB    A,R6
0031 FE                MOV     R6,A
0032 7C00              MOV     R4,#00H
0034 7D3F              MOV     R5,#03FH
0036 120000      E     LCALL   ?C?UIDIV
0039 900000      E     MOV     DPTR,#bCacheLen
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1338
003E 2500        R     ADD     A,GetTabwAddr+01H
0040 F500        R     MOV     GetTabwAddr+01H,A
0042 E4                CLR     A
0043 3500        R     ADDC    A,GetTabwAddr
0045 F500        R     MOV     GetTabwAddr,A
                                           ; SOURCE LINE # 1347
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 77  

0047         ?C0152:
                                           ; SOURCE LINE # 1350
0047 E500        E     MOV     A,wCacheAddr+01H
0049 4500        E     ORL     A,wCacheAddr
004B 601D              JZ      ?C0154
004D E500        E     MOV     A,wCacheAddr+01H
004F 243E              ADD     A,#03EH
0051 FF                MOV     R7,A
0052 E4                CLR     A
0053 3500        E     ADDC    A,wCacheAddr
0055 FE                MOV     R6,A
0056 D3                SETB    C
0057 E500        R     MOV     A,GetTabwAddr+01H
0059 9F                SUBB    A,R7
005A E500        R     MOV     A,GetTabwAddr
005C 9E                SUBB    A,R6
005D 500B              JNC     ?C0154
005F C3                CLR     C
0060 E500        R     MOV     A,GetTabwAddr+01H
0062 9500        E     SUBB    A,wCacheAddr+01H
0064 E500        R     MOV     A,GetTabwAddr
0066 9500        E     SUBB    A,wCacheAddr
0068 5034              JNC     ?C0153
006A         ?C0154:
                                           ; SOURCE LINE # 1351
                                           ; SOURCE LINE # 1353
006A 30002E      E     JNB     xOTPSettingExist,?C0155
                                           ; SOURCE LINE # 1354
                                           ; SOURCE LINE # 1355
006D 850000      E     MOV     wCacheAddr,GetTabwAddr
0070 850000      E     MOV     wCacheAddr+01H,GetTabwAddr+01H
                                           ; SOURCE LINE # 1356
0073 120000      E     LCALL   WaitPartialFWLoad
                                           ; SOURCE LINE # 1357
0076 7B01              MOV     R3,#01H
0078 7A00        E     MOV     R2,#HIGH pbCacheBuf
007A 7900        E     MOV     R1,#LOW pbCacheBuf
007C 7D20              MOV     R5,#020H
007E AF00        E     MOV     R7,wCacheAddr+01H
0080 AE00        E     MOV     R6,wCacheAddr
0082 120000      E     LCALL   _OTPReadData
                                           ; SOURCE LINE # 1358
0085 E500        E     MOV     A,wCacheAddr+01H
0087 2420              ADD     A,#020H
0089 FF                MOV     R7,A
008A E4                CLR     A
008B 3500        E     ADDC    A,wCacheAddr
008D FE                MOV     R6,A
008E 7B01              MOV     R3,#01H
0090 7A00        E     MOV     R2,#HIGH pbCacheBuf+020H
0092 7900        E     MOV     R1,#LOW pbCacheBuf+020H
0094 7D20              MOV     R5,#020H
0096 120000      E     LCALL   _OTPReadData
                                           ; SOURCE LINE # 1359
0099 8003              SJMP    ?C0153
009B         ?C0155:
                                           ; SOURCE LINE # 1360
                                           ; SOURCE LINE # 1362
                                           ; SOURCE LINE # 1364
009B 120000      R     LCALL   L?0325
                                           ; SOURCE LINE # 1366
                                           ; SOURCE LINE # 1368
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 78  

009E         ?C0153:
                                           ; SOURCE LINE # 1369
009E C3                CLR     C
009F E500        R     MOV     A,GetTabwAddr+01H
00A1 9500        E     SUBB    A,wCacheAddr+01H
00A3 F500        R     MOV     GetIndex,A
                                           ; SOURCE LINE # 1371
00A5 643E              XRL     A,#03EH
00A7 7058              JNZ     ?C0157
                                           ; SOURCE LINE # 1372
                                           ; SOURCE LINE # 1373
00A9 7400        E     MOV     A,#LOW pbCacheBuf
00AB 2500        R     ADD     A,GetIndex
00AD F582              MOV     DPL,A
00AF E4                CLR     A
00B0 3400        E     ADDC    A,#HIGH pbCacheBuf
00B2 F583              MOV     DPH,A
00B4 E0                MOVX    A,@DPTR
00B5 750000      R     MOV     GetTabDataW+01H,#00H
00B8 F500        R     MOV     GetTabDataW,A
                                           ; SOURCE LINE # 1374
00BA 7440              MOV     A,#040H
00BC 2500        E     ADD     A,wCacheAddr+01H
00BE F500        E     MOV     wCacheAddr+01H,A
00C0 E4                CLR     A
00C1 3500        E     ADDC    A,wCacheAddr
00C3 F500        E     MOV     wCacheAddr,A
                                           ; SOURCE LINE # 1377
00C5 300024      E     JNB     xOTPSettingExist,?C0158
                                           ; SOURCE LINE # 1378
                                           ; SOURCE LINE # 1379
00C8 7B01              MOV     R3,#01H
00CA 7A00        E     MOV     R2,#HIGH pbCacheBuf
00CC 7900        E     MOV     R1,#LOW pbCacheBuf
00CE 7D20              MOV     R5,#020H
00D0 AF00        E     MOV     R7,wCacheAddr+01H
00D2 FE                MOV     R6,A
00D3 120000      E     LCALL   _OTPReadData
                                           ; SOURCE LINE # 1380
00D6 E500        E     MOV     A,wCacheAddr+01H
00D8 2420              ADD     A,#020H
00DA FF                MOV     R7,A
00DB E4                CLR     A
00DC 3500        E     ADDC    A,wCacheAddr
00DE FE                MOV     R6,A
00DF 7B01              MOV     R3,#01H
00E1 7A00        E     MOV     R2,#HIGH pbCacheBuf+020H
00E3 7900        E     MOV     R1,#LOW pbCacheBuf+020H
00E5 7D20              MOV     R5,#020H
00E7 120000      E     LCALL   _OTPReadData
                                           ; SOURCE LINE # 1381
00EA 8007              SJMP    ?C0159
00EC         ?C0158:
                                           ; SOURCE LINE # 1382
                                           ; SOURCE LINE # 1384
00EC AF00        E     MOV     R7,wCacheAddr+01H
00EE AE00        E     MOV     R6,wCacheAddr
00F0 120000      R     LCALL   _CheckLoadCacheBufCRC8
                                           ; SOURCE LINE # 1386
00F3         ?C0159:
                                           ; SOURCE LINE # 1389
00F3 900000      E     MOV     DPTR,#pbCacheBuf
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 79  

00F6 E0                MOVX    A,@DPTR
00F7 FD                MOV     R5,A
00F8 E500        R     MOV     A,GetTabDataW
00FA F500        R     MOV     GetTabDataW,A
00FC ED                MOV     A,R5
00FD F500        R     MOV     GetTabDataW+01H,A
                                           ; SOURCE LINE # 1390
00FF 8012              SJMP    ?C0160
0101         ?C0157:
                                           ; SOURCE LINE # 1391
                                           ; SOURCE LINE # 1392
0101 7400        E     MOV     A,#LOW pbCacheBuf
0103 2500        R     ADD     A,GetIndex
0105 F582              MOV     DPL,A
0107 E4                CLR     A
0108 3400        E     ADDC    A,#HIGH pbCacheBuf
010A F583              MOV     DPH,A
010C E0                MOVX    A,@DPTR
010D F500        R     MOV     GetTabDataW,A
010F A3                INC     DPTR
0110 E0                MOVX    A,@DPTR
0111 F500        R     MOV     GetTabDataW+01H,A
                                           ; SOURCE LINE # 1393
0113         ?C0160:
                                           ; SOURCE LINE # 1395
0113 AE00        R     MOV     R6,GetTabDataW
0115 AF00        R     MOV     R7,GetTabDataW+01H
                                           ; SOURCE LINE # 1396
0117         ?C0151:
0117 22                RET     
             ; FUNCTION _GetTabW (END)

             ; FUNCTION GetConfigLength (BEGIN)
                                           ; SOURCE LINE # 1613
                                           ; SOURCE LINE # 1614
                                           ; SOURCE LINE # 1624
0000 7800        R     MOV     R0,#LOW pFmtTab
0002 7600        E     MOV     @R0,#HIGH pbFmtTab
0004 08                INC     R0
0005 7600        E     MOV     @R0,#LOW pbFmtTab
                                           ; SOURCE LINE # 1638
0007 E4                CLR     A
0008 7800        R     MOV     R0,#LOW wTotalFrmInterval
000A F6                MOV     @R0,A
000B 08                INC     R0
000C F6                MOV     @R0,A
                                           ; SOURCE LINE # 1639
000D 7800        R     MOV     R0,#LOW pFmtTab
000F E6                MOV     A,@R0
0010 FE                MOV     R6,A
0011 08                INC     R0
0012 E6                MOV     A,@R0
0013 F582              MOV     DPL,A
0015 8E83              MOV     DPH,R6
0017 E0                MOVX    A,@DPTR
0018 540A              ANL     A,#0AH
001A 7003              JNZ     $ + 5H
001C 020000      R     LJMP    ?C0161
                                           ; SOURCE LINE # 1640
001F E4                CLR     A
0020 08                INC     R0
0021 F6                MOV     @R0,A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 80  

0022 08                INC     R0
0023 F6                MOV     @R0,A
0024         ?C0164:
                                           ; SOURCE LINE # 1641
                                           ; SOURCE LINE # 1642
0024 7800        R     MOV     R0,#LOW wTotalLength+01H
0026 E6                MOV     A,@R0
0027 18                DEC     R0
0028 46                ORL     A,@R0
0029 7800        R     MOV     R0,#LOW pFmtTab
002B 7011              JNZ     ?C0165
                                           ; SOURCE LINE # 1643
002D E6                MOV     A,@R0
002E FE                MOV     R6,A
002F 08                INC     R0
0030 E6                MOV     A,@R0
0031 F582              MOV     DPL,A
0033 8E83              MOV     DPH,R6
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 7800        R     MOV     R0,#LOW Cnt
0039 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1644
003A 2405              ADD     A,#05H
                                           ; SOURCE LINE # 1645
003C 8029              SJMP    ?C0307
003E         ?C0165:
                                           ; SOURCE LINE # 1646
003E E6                MOV     A,@R0
003F FE                MOV     R6,A
0040 08                INC     R0
0041 E6                MOV     A,@R0
0042 FF                MOV     R7,A
0043 F582              MOV     DPL,A
0045 8E83              MOV     DPH,R6
0047 A3                INC     DPTR
0048 A3                INC     DPTR
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B FD                MOV     R5,A
004C 7800        R     MOV     R0,#LOW Cnt
004E F6                MOV     @R0,A
                                           ; SOURCE LINE # 1647
004F 8F82              MOV     DPL,R7
0051 8E83              MOV     DPH,R6
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 2405              ADD     A,#05H
0057 FF                MOV     R7,A
0058 7800        R     MOV     R0,#LOW pFmtTab
005A E6                MOV     A,@R0
005B FA                MOV     R2,A
005C 08                INC     R0
005D E6                MOV     A,@R0
005E F582              MOV     DPL,A
0060 8A83              MOV     DPH,R2
0062 A3                INC     DPTR
0063 A3                INC     DPTR
0064 E0                MOVX    A,@DPTR
0065 2F                ADD     A,R7
0066 2D                ADD     A,R5
0067         ?C0307:
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 81  

0067 7800        R     MOV     R0,#LOW i
0069 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1648
006A         ?C0167:
                                           ; SOURCE LINE # 1649
006A 7800        R     MOV     R0,#LOW Cnt
006C E6                MOV     A,@R0
006D 6055              JZ      ?C0168
                                           ; SOURCE LINE # 1650
006F 7800        R     MOV     R0,#LOW i
0071 E6                MOV     A,@R0
0072 2400        E     ADD     A,#LOW pbFmtTab+0FFFFH
0074 F582              MOV     DPL,A
0076 E4                CLR     A
0077 3400        E     ADDC    A,#HIGH pbFmtTab+0FFFFH
0079 F583              MOV     DPH,A
007B E0                MOVX    A,@DPTR
007C 7800        R     MOV     R0,#LOW Idx
007E F6                MOV     @R0,A
                                           ; SOURCE LINE # 1651
007F 7800        R     MOV     R0,#LOW pFmtTab
0081 E6                MOV     A,@R0
0082 FE                MOV     R6,A
0083 08                INC     R0
0084 E6                MOV     A,@R0
0085 F582              MOV     DPL,A
0087 8E83              MOV     DPH,R6
0089 E0                MOVX    A,@DPTR
008A 30E111            JNB     ACC.1,?C0169
                                           ; SOURCE LINE # 1652
008D 7800        R     MOV     R0,#LOW wTotalLength+01H
008F E6                MOV     A,@R0
0090 18                DEC     R0
0091 46                ORL     A,@R0
0092 7800        R     MOV     R0,#LOW Fps
0094 7004              JNZ     ?C0170
                                           ; SOURCE LINE # 1653
0096 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1654
0098 8013              SJMP    ?C0172
009A         ?C0170:
                                           ; SOURCE LINE # 1655
009A 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 1656
                                           ; SOURCE LINE # 1657
009C 800F              SJMP    ?C0172
009E         ?C0169:
                                           ; SOURCE LINE # 1658
009E 7800        R     MOV     R0,#LOW wTotalLength+01H
00A0 E6                MOV     A,@R0
00A1 18                DEC     R0
00A2 46                ORL     A,@R0
00A3 7800        R     MOV     R0,#LOW Fps
00A5 7004              JNZ     ?C0173
                                           ; SOURCE LINE # 1659
00A7 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 1660
00A9 8002              SJMP    ?C0172
00AB         ?C0173:
                                           ; SOURCE LINE # 1661
00AB 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1662
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 82  

                                           ; SOURCE LINE # 1663
00AD         ?C0172:
                                           ; SOURCE LINE # 1667
00AD 120000      R     LCALL   L?0329
                                           ; SOURCE LINE # 1670
00B0 900000      E     MOV     DPTR,#pbFrmTable
00B3 E0                MOVX    A,@DPTR
00B4 7800        R     MOV     R0,#LOW wTotalFrmInterval+01H
00B6 26                ADD     A,@R0
00B7 F6                MOV     @R0,A
00B8 18                DEC     R0
00B9 E4                CLR     A
00BA 36                ADDC    A,@R0
00BB F6                MOV     @R0,A
                                           ; SOURCE LINE # 1671
00BC 7800        R     MOV     R0,#LOW Cnt
00BE 16                DEC     @R0
                                           ; SOURCE LINE # 1672
00BF 7800        R     MOV     R0,#LOW i
00C1 16                DEC     @R0
                                           ; SOURCE LINE # 1673
00C2 80A6              SJMP    ?C0167
00C4         ?C0168:
                                           ; SOURCE LINE # 1674
00C4 7800        R     MOV     R0,#LOW wTotalLength+01H
00C6 06                INC     @R0
00C7 E6                MOV     A,@R0
00C8 18                DEC     R0
00C9 7001              JNZ     ?C0286
00CB 06                INC     @R0
00CC         ?C0286:
                                           ; SOURCE LINE # 1675
00CC C3                CLR     C
00CD 7800        R     MOV     R0,#LOW wTotalLength+01H
00CF E6                MOV     A,@R0
00D0 9402              SUBB    A,#02H
00D2 18                DEC     R0
00D3 E6                MOV     A,@R0
00D4 9400              SUBB    A,#00H
00D6 5003              JNC     $ + 5H
00D8 020000      R     LJMP    ?C0164
                                           ; SOURCE LINE # 1676
00DB 8056              SJMP    ?C0175
00DD         ?C0161:
                                           ; SOURCE LINE # 1677
00DD 7800        R     MOV     R0,#LOW pFmtTab
00DF E6                MOV     A,@R0
00E0 FE                MOV     R6,A
00E1 08                INC     R0
00E2 E6                MOV     A,@R0
00E3 F582              MOV     DPL,A
00E5 8E83              MOV     DPH,R6
00E7 A3                INC     DPTR
00E8 E0                MOVX    A,@DPTR
00E9 7800        R     MOV     R0,#LOW Cnt
00EB F6                MOV     @R0,A
                                           ; SOURCE LINE # 1678
00EC 2405              ADD     A,#05H
00EE 7800        R     MOV     R0,#LOW i
00F0 F6                MOV     @R0,A
00F1         ?C0176:
                                           ; SOURCE LINE # 1679
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 83  

00F1 7800        R     MOV     R0,#LOW Cnt
00F3 E6                MOV     A,@R0
00F4 603D              JZ      ?C0175
                                           ; SOURCE LINE # 1681
00F6 7800        R     MOV     R0,#LOW i
00F8 E6                MOV     A,@R0
00F9 2400        E     ADD     A,#LOW pbFmtTab+0FFFFH
00FB F582              MOV     DPL,A
00FD E4                CLR     A
00FE 3400        E     ADDC    A,#HIGH pbFmtTab+0FFFFH
0100 F583              MOV     DPH,A
0102 E0                MOVX    A,@DPTR
0103 7800        R     MOV     R0,#LOW Idx
0105 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1682
0106 7800        R     MOV     R0,#LOW pFmtTab
0108 E6                MOV     A,@R0
0109 FE                MOV     R6,A
010A 08                INC     R0
010B E6                MOV     A,@R0
010C F582              MOV     DPL,A
010E 8E83              MOV     DPH,R6
0110 E0                MOVX    A,@DPTR
0111 7800        R     MOV     R0,#LOW Fps
0113 30E004            JNB     ACC.0,?C0178
                                           ; SOURCE LINE # 1683
0116 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1684
0118 8002              SJMP    ?C0179
011A         ?C0178:
                                           ; SOURCE LINE # 1685
011A 7602              MOV     @R0,#02H
                                           ; SOURCE LINE # 1686
011C         ?C0179:
                                           ; SOURCE LINE # 1690
011C 120000      R     LCALL   L?0329
                                           ; SOURCE LINE # 1693
011F 900000      E     MOV     DPTR,#pbFrmTable
0122 E0                MOVX    A,@DPTR
0123 7800        R     MOV     R0,#LOW wTotalFrmInterval+01H
0125 26                ADD     A,@R0
0126 F6                MOV     @R0,A
0127 18                DEC     R0
0128 E4                CLR     A
0129 36                ADDC    A,@R0
012A F6                MOV     @R0,A
                                           ; SOURCE LINE # 1694
012B 7800        R     MOV     R0,#LOW Cnt
012D 16                DEC     @R0
                                           ; SOURCE LINE # 1695
012E 7800        R     MOV     R0,#LOW i
0130 16                DEC     @R0
                                           ; SOURCE LINE # 1696
0131 80BE              SJMP    ?C0176
                                           ; SOURCE LINE # 1697
0133         ?C0175:
                                           ; SOURCE LINE # 1698
0133 7800        R     MOV     R0,#LOW wTotalFrmInterval
0135 E6                MOV     A,@R0
0136 FE                MOV     R6,A
0137 08                INC     R0
0138 E6                MOV     A,@R0
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 84  

0139 7802              MOV     R0,#02H
013B         ?C0287:
013B C3                CLR     C
013C 33                RLC     A
013D CE                XCH     A,R6
013E 33                RLC     A
013F CE                XCH     A,R6
0140 D8F9              DJNZ    R0,?C0287
0142 FF                MOV     R7,A
0143 7800        R     MOV     R0,#LOW wTotalFrmInterval
0145 EE                MOV     A,R6
0146 F6                MOV     @R0,A
0147 08                INC     R0
0148 EF                MOV     A,R7
0149 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1700
014A 900000      E     MOV     DPTR,#wFrmIntervalLen
014D EE                MOV     A,R6
014E F0                MOVX    @DPTR,A
014F A3                INC     DPTR
0150 EF                MOV     A,R7
0151 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1701
0152 7800        R     MOV     R0,#LOW pFmtTab
0154 E6                MOV     A,@R0
0155 FE                MOV     R6,A
0156 08                INC     R0
0157 E6                MOV     A,@R0
0158 F582              MOV     DPL,A
015A 8E83              MOV     DPH,R6
015C E0                MOVX    A,@DPTR
015D F9                MOV     R1,A
015E 540A              ANL     A,#0AH
0160 6079              JZ      ?C0180
                                           ; SOURCE LINE # 1703
0162 18                DEC     R0
0163 E6                MOV     A,@R0
0164 FC                MOV     R4,A
0165 08                INC     R0
0166 E6                MOV     A,@R0
0167 FD                MOV     R5,A
0168 F582              MOV     DPL,A
016A 8C83              MOV     DPH,R4
016C A3                INC     DPTR
016D A3                INC     DPTR
016E E0                MOVX    A,@DPTR
016F 75F004            MOV     B,#04H
0172 A4                MUL     AB
0173 FB                MOV     R3,A
0174 AAF0              MOV     R2,B
0176 8D82              MOV     DPL,R5
0178 8C83              MOV     DPH,R4
017A A3                INC     DPTR
017B E0                MOVX    A,@DPTR
017C 75F01A            MOV     B,#01AH
017F A4                MUL     AB
0180 2B                ADD     A,R3
0181 FD                MOV     R5,A
0182 E5F0              MOV     A,B
0184 3A                ADDC    A,R2
0185 FC                MOV     R4,A
0186 18                DEC     R0
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 85  

0187 E6                MOV     A,@R0
0188 FA                MOV     R2,A
0189 08                INC     R0
018A E6                MOV     A,@R0
018B FB                MOV     R3,A
018C F582              MOV     DPL,A
018E 8A83              MOV     DPH,R2
0190 A3                INC     DPTR
0191 A3                INC     DPTR
0192 A3                INC     DPTR
0193 E0                MOVX    A,@DPTR
0194 75F01A            MOV     B,#01AH
0197 A4                MUL     AB
0198 2D                ADD     A,R5
0199 FD                MOV     R5,A
019A E5F0              MOV     A,B
019C 3C                ADDC    A,R4
019D FC                MOV     R4,A
019E 8B82              MOV     DPL,R3
01A0 8A83              MOV     DPH,R2
01A2 E582              MOV     A,DPL
01A4 2404              ADD     A,#04H
01A6 F582              MOV     DPL,A
01A8 E4                CLR     A
01A9 3583              ADDC    A,DPH
01AB F583              MOV     DPH,A
01AD E0                MOVX    A,@DPTR
01AE FB                MOV     R3,A
01AF 75F004            MOV     B,#04H
01B2 A4                MUL     AB
01B3 2D                ADD     A,R5
01B4 FF                MOV     R7,A
01B5 E5F0              MOV     A,B
01B7 3C                ADDC    A,R4
01B8 CF                XCH     A,R7
01B9 240B              ADD     A,#0BH
01BB CF                XCH     A,R7
01BC 3401              ADDC    A,#01H
01BE FE                MOV     R6,A
01BF EF                MOV     A,R7
01C0 7800        R     MOV     R0,#LOW wTotalFrmInterval+01H
01C2 26                ADD     A,@R0
01C3 FF                MOV     R7,A
01C4 EE                MOV     A,R6
01C5 18                DEC     R0
01C6 36                ADDC    A,@R0
01C7 7800        R     MOV     R0,#LOW wTotalLength
01C9 F6                MOV     @R0,A
01CA 08                INC     R0
01CB A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1706
01CD EB                MOV     A,R3
01CE 7056              JNZ     ?C0182
                                           ; SOURCE LINE # 1707
01D0 74FA              MOV     A,#0FAH
01D2 26                ADD     A,@R0
01D3 F6                MOV     @R0,A
01D4 18                DEC     R0
01D5 74FF              MOV     A,#0FFH
01D7 36                ADDC    A,@R0
01D8 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1708
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 86  

                                           ; SOURCE LINE # 1709
01D9 804B              SJMP    ?C0182
01DB         ?C0180:
                                           ; SOURCE LINE # 1711
01DB 7800        R     MOV     R0,#LOW pFmtTab
01DD E6                MOV     A,@R0
01DE FC                MOV     R4,A
01DF 08                INC     R0
01E0 E6                MOV     A,@R0
01E1 FD                MOV     R5,A
01E2 F582              MOV     DPL,A
01E4 8C83              MOV     DPH,R4
01E6 A3                INC     DPTR
01E7 A3                INC     DPTR
01E8 E0                MOVX    A,@DPTR
01E9 75F004            MOV     B,#04H
01EC A4                MUL     AB
01ED FB                MOV     R3,A
01EE AAF0              MOV     R2,B
01F0 8D82              MOV     DPL,R5
01F2 8C83              MOV     DPH,R4
01F4 A3                INC     DPTR
01F5 E0                MOVX    A,@DPTR
01F6 75F01A            MOV     B,#01AH
01F9 A4                MUL     AB
01FA 2B                ADD     A,R3
01FB FF                MOV     R7,A
01FC E5F0              MOV     A,B
01FE 3A                ADDC    A,R2
01FF CF                XCH     A,R7
0200 24D8              ADD     A,#0D8H
0202 CF                XCH     A,R7
0203 3400              ADDC    A,#00H
0205 FE                MOV     R6,A
0206 EF                MOV     A,R7
0207 7800        R     MOV     R0,#LOW wTotalFrmInterval+01H
0209 26                ADD     A,@R0
020A FF                MOV     R7,A
020B EE                MOV     A,R6
020C 18                DEC     R0
020D 36                ADDC    A,@R0
020E 7800        R     MOV     R0,#LOW wTotalLength
0210 F6                MOV     @R0,A
0211 08                INC     R0
0212 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1712
0214 E9                MOV     A,R1
0215 30E004            JNB     ACC.0,?C0183
                                           ; SOURCE LINE # 1713
0218 741B              MOV     A,#01BH
                                           ; SOURCE LINE # 1714
021A 8004              SJMP    ?C0306
021C         ?C0183:
                                           ; SOURCE LINE # 1715
021C 7800        R     MOV     R0,#LOW wTotalLength+01H
021E 740B              MOV     A,#0BH
0220         ?C0306:
0220 26                ADD     A,@R0
0221 F6                MOV     @R0,A
0222 18                DEC     R0
0223 E4                CLR     A
0224 36                ADDC    A,@R0
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 87  

0225 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1716
                                           ; SOURCE LINE # 1717
0226         ?C0182:
                                           ; SOURCE LINE # 1718
0226 7800        R     MOV     R0,#LOW pFmtTab
0228 E6                MOV     A,@R0
0229 FE                MOV     R6,A
022A 08                INC     R0
022B E6                MOV     A,@R0
022C F582              MOV     DPL,A
022E 8E83              MOV     DPH,R6
0230 A3                INC     DPTR
0231 A3                INC     DPTR
0232 E0                MOVX    A,@DPTR
0233 700B              JNZ     ?C0185
                                           ; SOURCE LINE # 1720
0235 7800        R     MOV     R0,#LOW wTotalLength+01H
0237 74FA              MOV     A,#0FAH
0239 26                ADD     A,@R0
023A F6                MOV     @R0,A
023B 18                DEC     R0
023C 74FF              MOV     A,#0FFH
023E 36                ADDC    A,@R0
023F F6                MOV     @R0,A
                                           ; SOURCE LINE # 1721
0240         ?C0185:
                                           ; SOURCE LINE # 1733
                                           ; SOURCE LINE # 1734
0240 300046      E     JNB     xHighSpdMode,?C0186
                                           ; SOURCE LINE # 1735
                                           ; SOURCE LINE # 1737
0243 900000      E     MOV     DPTR,#bDMICInput
0246 E0                MOVX    A,@DPTR
0247 602F              JZ      ?C0187
                                           ; SOURCE LINE # 1738
0249 900000      E     MOV     DPTR,#bNumOfSup
024C E0                MOVX    A,@DPTR
024D FD                MOV     R5,A
024E 540F              ANL     A,#0FH
0250 75F003            MOV     B,#03H
0253 A4                MUL     AB
0254 2428              ADD     A,#028H
0256 FF                MOV     R7,A
0257 E4                CLR     A
0258 35F0              ADDC    A,B
025A FE                MOV     R6,A
025B ED                MOV     A,R5
025C C4                SWAP    A
025D 540F              ANL     A,#0FH
025F 7C00              MOV     R4,#00H
0261 540F              ANL     A,#0FH
0263 FD                MOV     R5,A
0264 120000      E     LCALL   ?C?IMUL
0267 7800        R     MOV     R0,#LOW wTotalLength+01H
0269 E6                MOV     A,@R0
026A 2445              ADD     A,#045H
026C FD                MOV     R5,A
026D 18                DEC     R0
026E E4                CLR     A
026F 36                ADDC    A,@R0
0270 CD                XCH     A,R5
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 88  

0271 2F                ADD     A,R7
0272 08                INC     R0
0273 F6                MOV     @R0,A
0274 ED                MOV     A,R5
0275 3E                ADDC    A,R6
0276 18                DEC     R0
0277 F6                MOV     @R0,A
0278         ?C0187:
                                           ; SOURCE LINE # 1740
0278 900000      E     MOV     DPTR,#pCustomizeDesc
027B E0                MOVX    A,@DPTR
027C FE                MOV     R6,A
027D A3                INC     DPTR
027E E0                MOVX    A,@DPTR
027F FF                MOV     R7,A
0280 4E                ORL     A,R6
0281 6030              JZ      ?C0189
                                           ; SOURCE LINE # 1741
                                           ; SOURCE LINE # 1742
0283 8F82              MOV     DPL,R7
0285 8E83              MOV     DPH,R6
                                           ; SOURCE LINE # 1743
                                           ; SOURCE LINE # 1744
0287 8020              SJMP    ?C0308
0289         ?C0186:
                                           ; SOURCE LINE # 1745
                                           ; SOURCE LINE # 1747
0289 900000      E     MOV     DPTR,#bDMICInput
028C E0                MOVX    A,@DPTR
028D 600A              JZ      ?C0190
                                           ; SOURCE LINE # 1748
028F 7800        R     MOV     R0,#LOW wTotalLength+01H
0291 7473              MOV     A,#073H
0293 26                ADD     A,@R0
0294 F6                MOV     @R0,A
0295 18                DEC     R0
0296 E4                CLR     A
0297 36                ADDC    A,@R0
0298 F6                MOV     @R0,A
0299         ?C0190:
                                           ; SOURCE LINE # 1750
0299 900000      E     MOV     DPTR,#pCustomizeDesc
029C E0                MOVX    A,@DPTR
029D FE                MOV     R6,A
029E A3                INC     DPTR
029F E0                MOVX    A,@DPTR
02A0 FF                MOV     R7,A
02A1 4E                ORL     A,R6
02A2 600F              JZ      ?C0189
                                           ; SOURCE LINE # 1751
                                           ; SOURCE LINE # 1752
02A4 8F82              MOV     DPL,R7
02A6 8E83              MOV     DPH,R6
02A8 A3                INC     DPTR
02A9         ?C0308:
02A9 A3                INC     DPTR
02AA E0                MOVX    A,@DPTR
02AB 7800        R     MOV     R0,#LOW wTotalLength+01H
02AD 26                ADD     A,@R0
02AE F6                MOV     @R0,A
02AF 18                DEC     R0
02B0 E4                CLR     A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 89  

02B1 36                ADDC    A,@R0
02B2 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1753
                                           ; SOURCE LINE # 1754
02B3         ?C0189:
                                           ; SOURCE LINE # 1755
                                           ; SOURCE LINE # 1757
02B3 30000A      E     JNB     xEnableHID,?C0192
                                           ; SOURCE LINE # 1758
02B6 7800        R     MOV     R0,#LOW wTotalLength+01H
02B8 7419              MOV     A,#019H
02BA 26                ADD     A,@R0
02BB F6                MOV     @R0,A
02BC 18                DEC     R0
02BD E4                CLR     A
02BE 36                ADDC    A,@R0
02BF F6                MOV     @R0,A
                                           ; SOURCE LINE # 1759
02C0         ?C0192:
                                           ; SOURCE LINE # 1760
02C0 7800        R     MOV     R0,#LOW wTotalLength
02C2 E6                MOV     A,@R0
02C3 FE                MOV     R6,A
02C4 08                INC     R0
02C5 E6                MOV     A,@R0
02C6 FF                MOV     R7,A
                                           ; SOURCE LINE # 1761
02C7         ?C0193:
02C7 22                RET     
             ; FUNCTION GetConfigLength (END)

             ; FUNCTION _ConstructStrmCurSet (BEGIN)
                                           ; SOURCE LINE # 1762
;---- Variable 'ibStill' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1763
                                           ; SOURCE LINE # 1771
;---- Variable 'bStill' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1775
0000 EF                MOV     A,R7
0001 6003              JZ      $ + 5H
0003 020000      R     LJMP    ?C0194
                                           ; SOURCE LINE # 1777
0006 900000      E     MOV     DPTR,#pbIBuf+02H
0009 E0                MOVX    A,@DPTR
000A 900000      E     MOV     DPTR,#VideoProbeCommitCtrls
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1778
000E 900000      E     MOV     DPTR,#pbIBuf+03H
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 900000      E     MOV     DPTR,#VideoProbeCommitCtrls+01H
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1779
0017 900000      E     MOV     DPTR,#pbIBuf+04H
001A E0                MOVX    A,@DPTR
001B F500        R     MOV     dwInterval+03H,A
                                           ; SOURCE LINE # 1780
001D A3                INC     DPTR
001E E0                MOVX    A,@DPTR
001F F500        R     MOV     dwInterval+02H,A
                                           ; SOURCE LINE # 1781
0021 A3                INC     DPTR
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 90  

0022 E0                MOVX    A,@DPTR
0023 F500        R     MOV     dwInterval+01H,A
                                           ; SOURCE LINE # 1782
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 F500        R     MOV     dwInterval,A
                                           ; SOURCE LINE # 1785
0029 EF                MOV     A,R7
002A 2404              ADD     A,#04H
002C F500        R     MOV     FrameCnt,A
                                           ; SOURCE LINE # 1786
002E 900000      E     MOV     DPTR,#VideoProbeCommitCtrls
0031 E0                MOVX    A,@DPTR
0032 6401              XRL     A,#01H
0034 600C              JZ      ?C0195
                                           ; SOURCE LINE # 1787
0036 900000      E     MOV     DPTR,#pbFmtTab+01H
0039 E0                MOVX    A,@DPTR
003A 2500        R     ADD     A,FrameCnt
003C FF                MOV     R7,A
003D A3                INC     DPTR
003E E0                MOVX    A,@DPTR
003F 2F                ADD     A,R7
0040 F500        R     MOV     FrameCnt,A
                                           ; SOURCE LINE # 1788
0042         ?C0195:
                                           ; SOURCE LINE # 1789
0042 7400        E     MOV     A,#LOW pbFmtTab
0044 2500        R     ADD     A,FrameCnt
0046 F582              MOV     DPL,A
0048 E4                CLR     A
0049 3400        E     ADDC    A,#HIGH pbFmtTab
004B F583              MOV     DPH,A
004D E0                MOVX    A,@DPTR
004E F500        R     MOV     FrameIdx,A
                                           ; SOURCE LINE # 1790
0050 900000      E     MOV     DPTR,#VideoProbeCommitCtrls+02H
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1791
0054 7D01              MOV     R5,#01H
0056 FF                MOV     R7,A
0057 120000      R     LCALL   _GetExResTable
005A 8E00        R     MOV     wTemp,R6
005C 8F00        R     MOV     wTemp+01H,R7
                                           ; SOURCE LINE # 1792
005E 850000      E     MOV     StrmCurSet+01H,wTemp
0061 850000      E     MOV     StrmCurSet+02H,wTemp+01H
                                           ; SOURCE LINE # 1793
0064 7D02              MOV     R5,#02H
0066 AF00        R     MOV     R7,FrameIdx
0068 120000      R     LCALL   _GetExResTable
006B 8E00        R     MOV     wTemp,R6
006D 8F00        R     MOV     wTemp+01H,R7
                                           ; SOURCE LINE # 1794
006F 850000      E     MOV     StrmCurSet+03H,wTemp
0072 850000      E     MOV     StrmCurSet+04H,wTemp+01H
                                           ; SOURCE LINE # 1796
0075 900000      E     MOV     DPTR,#pbFmtTab
0078 E0                MOVX    A,@DPTR
0079 5403              ANL     A,#03H
007B 600B              JZ      ?C0196
                                           ; SOURCE LINE # 1797
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 91  

007D 900000      E     MOV     DPTR,#VideoProbeCommitCtrls
0080 E0                MOVX    A,@DPTR
0081 B40102            CJNE    A,#01H,?C0197
                                           ; SOURCE LINE # 1798
                                           ; SOURCE LINE # 1799
0084 800E              SJMP    ?C0310
0086         ?C0197:
                                           ; SOURCE LINE # 1800
                                           ; SOURCE LINE # 1801
                                           ; SOURCE LINE # 1802
0086 8007              SJMP    ?C0311
0088         ?C0196:
                                           ; SOURCE LINE # 1803
0088 900000      E     MOV     DPTR,#VideoProbeCommitCtrls
008B E0                MOVX    A,@DPTR
008C B40105            CJNE    A,#01H,?C0200
                                           ; SOURCE LINE # 1804
008F         ?C0311:
008F 750002      E     MOV     StrmCurSet,#02H
                                           ; SOURCE LINE # 1805
0092 8003              SJMP    ?C0199
0094         ?C0200:
                                           ; SOURCE LINE # 1806
0094         ?C0310:
0094 750001      E     MOV     StrmCurSet,#01H
                                           ; SOURCE LINE # 1807
                                           ; SOURCE LINE # 1808
0097         ?C0199:
                                           ; SOURCE LINE # 1818
0097 E500        E     MOV     A,StrmCurSet
0099 B40104            CJNE    A,#01H,?C0202
                                           ; SOURCE LINE # 1819
009C 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 1820
009E 8002              SJMP    ?C0309
00A0         ?C0202:
                                           ; SOURCE LINE # 1821
00A0 7D02              MOV     R5,#02H
00A2         ?C0309:
00A2 AF00        R     MOV     R7,FrameIdx
00A4 120000      R     LCALL   _CaculateFrmRateV2
00A7 8F00        R     MOV     nFPS,R7
                                           ; SOURCE LINE # 1822
00A9         ?C0203:
                                           ; SOURCE LINE # 1825
00A9 900000      E     MOV     DPTR,#pbFrmTable
00AC E0                MOVX    A,@DPTR
00AD F500        R     MOV     FrameCnt,A
                                           ; SOURCE LINE # 1829
00AF 850000      R     MOV     FrameIdx,FrameCnt
00B2         ?C0204:
00B2 E500        R     MOV     A,FrameIdx
00B4 D3                SETB    C
00B5 9400              SUBB    A,#00H
00B7 403F              JC      ?C0205
                                           ; SOURCE LINE # 1830
00B9 7400        E     MOV     A,#LOW pbFrmTable
00BB 2500        R     ADD     A,FrameIdx
00BD F582              MOV     DPL,A
00BF E4                CLR     A
00C0 3400        E     ADDC    A,#HIGH pbFrmTable
00C2 F583              MOV     DPH,A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 92  

00C4 E0                MOVX    A,@DPTR
00C5 FF                MOV     R7,A
00C6 120000      R     LCALL   _GetFPSTableIndex
00C9 75F004            MOV     B,#04H
00CC EF                MOV     A,R7
00CD 900000      E     MOV     DPTR,#FPS_Table
00D0 120000      E     LCALL   ?C?OFFXADD
00D3 120000      E     LCALL   ?C?LLDCODE
00D6 AB00        R     MOV     R3,dwInterval+03H
00D8 AA00        R     MOV     R2,dwInterval+02H
00DA A900        R     MOV     R1,dwInterval+01H
00DC A800        R     MOV     R0,dwInterval
00DE C3                CLR     C
00DF 120000      E     LCALL   ?C?ULCMP
00E2 4010              JC      ?C0206
                                           ; SOURCE LINE # 1831
00E4 7400        E     MOV     A,#LOW pbFrmTable
00E6 2500        R     ADD     A,FrameIdx
00E8 F582              MOV     DPL,A
00EA E4                CLR     A
00EB 3400        E     ADDC    A,#HIGH pbFrmTable
00ED F583              MOV     DPH,A
00EF E0                MOVX    A,@DPTR
00F0 F500        R     MOV     FrameIdx,A
                                           ; SOURCE LINE # 1832
00F2 8004              SJMP    ?C0205
                                           ; SOURCE LINE # 1833
                                           ; SOURCE LINE # 1834
00F4         ?C0206:
00F4 1500        R     DEC     FrameIdx
00F6 80BA              SJMP    ?C0204
00F8         ?C0205:
                                           ; SOURCE LINE # 1837
00F8 900000      E     MOV     DPTR,#VideoProbeCommitCtrls+03H
00FB E0                MOVX    A,@DPTR
00FC 6500        R     XRL     A,FrameIdx
00FE 6022              JZ      ?C0208
                                           ; SOURCE LINE # 1838
                                           ; SOURCE LINE # 1839
0100 AF00        R     MOV     R7,FrameIdx
0102 120000      R     LCALL   _GetFPSTableIndex
0105 75F004            MOV     B,#04H
0108 EF                MOV     A,R7
0109 900000      E     MOV     DPTR,#FPS_Table
010C 120000      E     LCALL   ?C?OFFXADD
010F 120000      E     LCALL   ?C?LLDCODE
0112 E4                CLR     A
0113 7BE8              MOV     R3,#0E8H
0115 7A03              MOV     R2,#03H
0117 F9                MOV     R1,A
0118 F8                MOV     R0,A
0119 120000      E     LCALL   ?C?ULDIV
011C 900000      E     MOV     DPTR,#dwETAbs
011F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1840
0122         ?C0208:
                                           ; SOURCE LINE # 1842
0122 900000      E     MOV     DPTR,#VideoProbeCommitCtrls+03H
0125 E500        R     MOV     A,FrameIdx
0127 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1843
0128 04                INC     A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 93  

0129 F500        E     MOV     StrmCurSet+05H,A
                                           ; SOURCE LINE # 1853
012B 22                RET     
012C         ?C0194:
                                           ; SOURCE LINE # 1855
012C 900000      E     MOV     DPTR,#pbIBuf
012F E0                MOVX    A,@DPTR
0130 900000      E     MOV     DPTR,#StillProbeCommitCtrls
0133 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1856
0134 900000      E     MOV     DPTR,#pbIBuf+01H
0137 E0                MOVX    A,@DPTR
0138 FF                MOV     R7,A
0139 900000      E     MOV     DPTR,#StillProbeCommitCtrls+01H
013C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1857
013D 900000      E     MOV     DPTR,#pbFmtTab+01H
0140 E0                MOVX    A,@DPTR
0141 2F                ADD     A,R7
0142 2404              ADD     A,#04H
0144 F500        R     MOV     FrameCnt,A
                                           ; SOURCE LINE # 1858
0146 900000      E     MOV     DPTR,#StillProbeCommitCtrls
0149 E0                MOVX    A,@DPTR
014A 6401              XRL     A,#01H
014C 600C              JZ      ?C0210
                                           ; SOURCE LINE # 1859
014E 900000      E     MOV     DPTR,#pbFmtTab+02H
0151 E0                MOVX    A,@DPTR
0152 2500        R     ADD     A,FrameCnt
0154 FF                MOV     R7,A
0155 A3                INC     DPTR
0156 E0                MOVX    A,@DPTR
0157 2F                ADD     A,R7
0158 F500        R     MOV     FrameCnt,A
                                           ; SOURCE LINE # 1860
015A         ?C0210:
                                           ; SOURCE LINE # 1861
015A 7400        E     MOV     A,#LOW pbFmtTab
015C 2500        R     ADD     A,FrameCnt
015E F582              MOV     DPL,A
0160 E4                CLR     A
0161 3400        E     ADDC    A,#HIGH pbFmtTab
0163 F583              MOV     DPH,A
0165 E0                MOVX    A,@DPTR
0166 F500        R     MOV     FrameIdx,A
                                           ; SOURCE LINE # 1862
0168 900000      E     MOV     DPTR,#StillProbeCommitCtrls+02H
016B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1863
016C 7D01              MOV     R5,#01H
016E FF                MOV     R7,A
016F 120000      R     LCALL   _GetExResTable
0172 8E00        R     MOV     wTemp,R6
0174 8F00        R     MOV     wTemp+01H,R7
                                           ; SOURCE LINE # 1864
0176 850000      E     MOV     StrmCurSet+07H,wTemp
0179 850000      E     MOV     StrmCurSet+08H,wTemp+01H
                                           ; SOURCE LINE # 1865
017C 7D02              MOV     R5,#02H
017E AF00        R     MOV     R7,FrameIdx
0180 120000      R     LCALL   _GetExResTable
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 94  

0183 8E00        R     MOV     wTemp,R6
0185 8F00        R     MOV     wTemp+01H,R7
                                           ; SOURCE LINE # 1866
0187 850000      E     MOV     StrmCurSet+09H,wTemp
018A 850000      E     MOV     StrmCurSet+0AH,wTemp+01H
                                           ; SOURCE LINE # 1867
018D 900000      E     MOV     DPTR,#pbFmtTab
0190 E0                MOVX    A,@DPTR
0191 5403              ANL     A,#03H
0193 600B              JZ      ?C0211
                                           ; SOURCE LINE # 1868
0195 900000      E     MOV     DPTR,#StillProbeCommitCtrls
0198 E0                MOVX    A,@DPTR
0199 B40102            CJNE    A,#01H,?C0212
                                           ; SOURCE LINE # 1869
                                           ; SOURCE LINE # 1870
019C 800D              SJMP    ?C0312
019E         ?C0212:
                                           ; SOURCE LINE # 1871
                                           ; SOURCE LINE # 1872
                                           ; SOURCE LINE # 1873
019E 8007              SJMP    ?C0313
01A0         ?C0211:
                                           ; SOURCE LINE # 1874
01A0 900000      E     MOV     DPTR,#StillProbeCommitCtrls
01A3 E0                MOVX    A,@DPTR
01A4 B40104            CJNE    A,#01H,?C0215
                                           ; SOURCE LINE # 1875
01A7         ?C0313:
01A7 750002      E     MOV     StrmCurSet+06H,#02H
                                           ; SOURCE LINE # 1876
01AA 22                RET     
01AB         ?C0215:
                                           ; SOURCE LINE # 1877
01AB         ?C0312:
01AB 750001      E     MOV     StrmCurSet+06H,#01H
                                           ; SOURCE LINE # 1878
                                           ; SOURCE LINE # 1879
                                           ; SOURCE LINE # 1880
                                           ; SOURCE LINE # 1888
01AE         ?C0217:
01AE 22                RET     
             ; FUNCTION _ConstructStrmCurSet (END)

             ; FUNCTION ConstructDefStremSet (BEGIN)
                                           ; SOURCE LINE # 1890
                                           ; SOURCE LINE # 1891
                                           ; SOURCE LINE # 1894
0000 900000      E     MOV     DPTR,#VideoProbeCommitCtrls
0003 7401              MOV     A,#01H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1895
0006 A3                INC     DPTR
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1896
0008 900000      E     MOV     DPTR,#pbFmtTab+05H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D 900000      E     MOV     DPTR,#VideoProbeCommitCtrls+02H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1897
;---- Variable 'i' assigned to Register 'R7' ----
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 95  

                                           ; SOURCE LINE # 1906
0011 900000      E     MOV     DPTR,#pbFmtTab
0014 E0                MOVX    A,@DPTR
0015 5403              ANL     A,#03H
0017 6004              JZ      ?C0218
                                           ; SOURCE LINE # 1907
0019 7D01              MOV     R5,#01H
                                           ; SOURCE LINE # 1908
001B 8002              SJMP    ?C0314
001D         ?C0218:
                                           ; SOURCE LINE # 1909
001D 7D02              MOV     R5,#02H
001F         ?C0314:
001F 120000      R     LCALL   _CaculateFrmRateV2
                                           ; SOURCE LINE # 1910
0022         ?C0219:
                                           ; SOURCE LINE # 1912
0022 EF                MOV     A,R7
0023 D3                SETB    C
0024 9400              SUBB    A,#00H
0026 900000      E     MOV     DPTR,#VideoProbeCommitCtrls+03H
0029 4004              JC      ?C0220
                                           ; SOURCE LINE # 1913
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1914
002D 8003              SJMP    ?C0221
002F         ?C0220:
                                           ; SOURCE LINE # 1915
002F 7401              MOV     A,#01H
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1916
0032         ?C0221:
                                           ; SOURCE LINE # 1918
0032 900000      E     MOV     DPTR,#StillProbeCommitCtrls
0035 7401              MOV     A,#01H
0037 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1919
0038 A3                INC     DPTR
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1920
003A 900000      E     MOV     DPTR,#pbFmtTab+01H
003D E0                MOVX    A,@DPTR
003E 2405              ADD     A,#05H
                                           ; SOURCE LINE # 1921
0040 2400        E     ADD     A,#LOW pbFmtTab
0042 F582              MOV     DPL,A
0044 E4                CLR     A
0045 3400        E     ADDC    A,#HIGH pbFmtTab
0047 F583              MOV     DPH,A
0049 E0                MOVX    A,@DPTR
004A 900000      E     MOV     DPTR,#StillProbeCommitCtrls+02H
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1922
004E 22                RET     
             ; FUNCTION ConstructDefStremSet (END)

             ; FUNCTION L?0329 (BEGIN)
0000 7800        R     MOV     R0,#LOW Idx
0002 E6                MOV     A,@R0
0003 FF                MOV     R7,A
0004 08                INC     R0
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 96  

0005 E6                MOV     A,@R0
0006 FD                MOV     R5,A
             ; FUNCTION _CaculateFrmRateV2 (BEGIN)
                                           ; SOURCE LINE # 1979
;---- Variable 'iMode' assigned to Register 'R5' ----
;---- Variable 'iResIdx' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 1980
                                           ; SOURCE LINE # 1988
0007 7800        R     MOV     R0,#LOW ResIdx
0009 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 1989
000B 08                INC     R0
000C ED                MOV     A,R5
000D F6                MOV     @R0,A
                                           ; SOURCE LINE # 1992
000E E4                CLR     A
000F 7800        R     MOV     R0,#LOW bFirstFmt
0011 F6                MOV     @R0,A
                                           ; SOURCE LINE # 1994
0012 BD0102            CJNE    R5,#01H,?C0223
                                           ; SOURCE LINE # 1995
0015 7601              MOV     @R0,#01H
                                           ; SOURCE LINE # 1996
0017         ?C0223:
                                           ; SOURCE LINE # 1998
0017 7800        R     MOV     R0,#LOW wTmpAddr
0019 A600        E     MOV     @R0,wTabAddr
001B 08                INC     R0
001C A600        E     MOV     @R0,wTabAddr+01H
                                           ; SOURCE LINE # 1999
001E 7F4D              MOV     R7,#04DH
0020 120000      R     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 2000
0023 30001B      E     JNB     xHighSpdMode,?C0224
                                           ; SOURCE LINE # 2001
0026 7800        R     MOV     R0,#LOW bFirstFmt
0028 E6                MOV     A,@R0
0029 7800        R     MOV     R0,#LOW ResIdx
002B B40106            CJNE    A,#01H,?C0225
                                           ; SOURCE LINE # 2002
002E E6                MOV     A,@R0
002F 7800        R     MOV     R0,#LOW i
0031 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2003
0032 8006              SJMP    ?C0226
0034         ?C0225:
                                           ; SOURCE LINE # 2004
0034 E6                MOV     A,@R0
0035 2410              ADD     A,#010H
0037 7900        R     MOV     R1,#LOW i
0039 F7                MOV     @R1,A
                                           ; SOURCE LINE # 2005
003A         ?C0226:
                                           ; SOURCE LINE # 2006
003A 7800        R     MOV     R0,#LOW i
003C E6                MOV     A,@R0
003D FF                MOV     R7,A
                                           ; SOURCE LINE # 2007
003E 020000      R     LJMP    ?C0318
0041         ?C0224:
                                           ; SOURCE LINE # 2010
0041 7800        R     MOV     R0,#LOW ResIdx
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 97  

0043 120000      R     LCALL   L?0327
0046 7800        R     MOV     R0,#LOW MaxFrmRate
0048 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 2011
004A 7800        R     MOV     R0,#LOW ResIdx
004C E6                MOV     A,@R0
004D FF                MOV     R7,A
004E 7D02              MOV     R5,#02H
0050 120000      R     LCALL   _GetExResTable
0053 E4                CLR     A
0054 FC                MOV     R4,A
0055 FD                MOV     R5,A
0056 7800        R     MOV     R0,#LOW dwSize
0058 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 2012
005B 7800        R     MOV     R0,#LOW MaxFrmRate
005D E6                MOV     A,@R0
005E FF                MOV     R7,A
005F E4                CLR     A
0060 FC                MOV     R4,A
0061 FD                MOV     R5,A
0062 FE                MOV     R6,A
0063 7800        R     MOV     R0,#LOW dwSize
0065 120000      E     LCALL   ?C?LLDIDATA0
0068 120000      E     LCALL   ?C?LMUL
006B 7800        R     MOV     R0,#LOW dwSize
006D 120000      E     LCALL   ?C?LSTIDATA
                                           ; SOURCE LINE # 2013
                                           ; SOURCE LINE # 2014
0070 120000      R     LCALL   L?0328
0073 7800        R     MOV     R0,#LOW j
0075 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 2016
0077 E4                CLR     A
0078 7800        R     MOV     R0,#LOW MaxFrmRate
007A F6                MOV     @R0,A
                                           ; SOURCE LINE # 2017
007B 08                INC     R0
007C E6                MOV     A,@R0
007D 6401              XRL     A,#01H
007F 7048              JNZ     ?C0228
                                           ; SOURCE LINE # 2019
0081 7800        R     MOV     R0,#LOW j
0083 E6                MOV     A,@R0
0084 7038              JNZ     ?C0229
                                           ; SOURCE LINE # 2020
                                           ; SOURCE LINE # 2021
0086 FF                MOV     R7,A
0087 7E8C              MOV     R6,#08CH
0089 7D01              MOV     R5,#01H
008B FC                MOV     R4,A
008C 7800        R     MOV     R0,#LOW dwSize
008E 120000      E     LCALL   ?C?LLDIDATA0
0091 D3                SETB    C
0092 120000      E     LCALL   ?C?ULCMP
0095 4003              JC      $ + 5H
0097 020000      R     LJMP    ?C0227
                                           ; SOURCE LINE # 2023
009A 7F50              MOV     R7,#050H
009C 7E70              MOV     R6,#070H
009E 7D01              MOV     R5,#01H
00A0 7C00              MOV     R4,#00H
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 98  

00A2 7800        R     MOV     R0,#LOW dwSize
00A4 120000      E     LCALL   ?C?LLDIDATA0
00A7 C3                CLR     C
00A8 120000      E     LCALL   ?C?ULCMP
00AB 5002              JNC     ?C0231
                                           ; SOURCE LINE # 2024
00AD 8051              SJMP    ?C0316
00AF         ?C0231:
                                           ; SOURCE LINE # 2026
00AF 7800        R     MOV     R0,#LOW dwSize
00B1 120000      E     LCALL   ?C?LLDIDATA0
00B4 7F0C              MOV     R7,#0CH
00B6 7ECE              MOV     R6,#0CEH
00B8 7D07              MOV     R5,#07H
00BA 7C00              MOV     R4,#00H
                                           ; SOURCE LINE # 2027
                                           ; SOURCE LINE # 2032
00BC 8055              SJMP    ?C0317
00BE         ?C0229:
                                           ; SOURCE LINE # 2033
00BE 7900        R     MOV     R1,#LOW ResIdx
00C0 E7                MOV     A,@R1
00C1 7800        R     MOV     R0,#LOW i
00C3 26                ADD     A,@R0
00C4 04                INC     A
00C5 FF                MOV     R7,A
00C6 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2034
00C7         ?C0315:
                                           ; SOURCE LINE # 2035
                                           ; SOURCE LINE # 2036
00C7 8058              SJMP    ?C0318
00C9         ?C0228:
                                           ; SOURCE LINE # 2038
00C9 7800        R     MOV     R0,#LOW i
00CB E6                MOV     A,@R0
00CC 04                INC     A
00CD 08                INC     R0
00CE 26                ADD     A,@R0
00CF FF                MOV     R7,A
00D0 18                DEC     R0
00D1 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2039
00D2 7E00              MOV     R6,#00H
00D4 120000      R     LCALL   _GetTab
00D7 7800        R     MOV     R0,#LOW j
00D9 EF                MOV     A,R7
00DA F6                MOV     @R0,A
                                           ; SOURCE LINE # 2041
00DB 703B              JNZ     ?C0235
                                           ; SOURCE LINE # 2042
                                           ; SOURCE LINE # 2043
00DD FF                MOV     R7,A
00DE FE                MOV     R6,A
00DF 7D14              MOV     R5,#014H
00E1 FC                MOV     R4,A
00E2 7800        R     MOV     R0,#LOW dwSize
00E4 120000      E     LCALL   ?C?LLDIDATA0
00E7 D3                SETB    C
00E8 120000      E     LCALL   ?C?ULCMP
00EB 503D              JNC     ?C0227
                                           ; SOURCE LINE # 2044
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 99  

                                           ; SOURCE LINE # 2045
00ED 7FBA              MOV     R7,#0BAH
00EF 7E0F              MOV     R6,#0FH
00F1 7D21              MOV     R5,#021H
00F3 7C00              MOV     R4,#00H
00F5 7800        R     MOV     R0,#LOW dwSize
00F7 120000      E     LCALL   ?C?LLDIDATA0
00FA C3                CLR     C
00FB 120000      E     LCALL   ?C?ULCMP
00FE 5006              JNC     ?C0237
                                           ; SOURCE LINE # 2046
0100         ?C0316:
0100 7800        R     MOV     R0,#LOW MaxFrmRate
0102 761E              MOV     @R0,#01EH
0104 8024              SJMP    ?C0227
0106         ?C0237:
                                           ; SOURCE LINE # 2048
0106 7800        R     MOV     R0,#LOW dwSize
0108 120000      E     LCALL   ?C?LLDIDATA0
010B 7F40              MOV     R7,#040H
010D 7ED2              MOV     R6,#0D2H
010F 7DDF              MOV     R5,#0DFH
0111 7C03              MOV     R4,#03H
0113         ?C0317:
0113 120000      E     LCALL   ?C?ULDIV
                                           ; SOURCE LINE # 2049
                                           ; SOURCE LINE # 2054
0116 800E              SJMP    ?C0319
0118         ?C0235:
                                           ; SOURCE LINE # 2055
0118 7900        R     MOV     R1,#LOW ResIdx
011A E7                MOV     A,@R1
011B 7800        R     MOV     R0,#LOW i
011D 26                ADD     A,@R0
011E 04                INC     A
011F FF                MOV     R7,A
0120 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2056
0121         ?C0318:
0121 7E00              MOV     R6,#00H
0123 120000      R     LCALL   _GetTab
0126         ?C0319:
0126 7800        R     MOV     R0,#LOW MaxFrmRate
0128 A607              MOV     @R0,AR7
                                           ; SOURCE LINE # 2057
                                           ; SOURCE LINE # 2058
                                           ; SOURCE LINE # 2059
012A         ?C0227:
                                           ; SOURCE LINE # 2061
012A 7800        R     MOV     R0,#LOW MaxFrmRate
012C E6                MOV     A,@R0
012D 30E770            JNB     ACC.7,?C0240
                                           ; SOURCE LINE # 2063
                                           ; SOURCE LINE # 2064
0130 120000      R     LCALL   L?0328
0133 7800        R     MOV     R0,#LOW j
0135 EF                MOV     A,R7
0136 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2065
0137 18                DEC     R0
0138 E6                MOV     A,@R0
0139 04                INC     A
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 100 

013A 2F                ADD     A,R7
013B FF                MOV     R7,A
013C F6                MOV     @R0,A
                                           ; SOURCE LINE # 2066
013D 7E00              MOV     R6,#00H
013F 120000      R     LCALL   _GetTab
0142 7800        R     MOV     R0,#LOW j
0144 EF                MOV     A,R7
0145 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2067
0146 18                DEC     R0
0147 E6                MOV     A,@R0
0148 04                INC     A
0149 2F                ADD     A,R7
014A 08                INC     R0
014B F6                MOV     @R0,A
                                           ; SOURCE LINE # 2068
014C 7800        R     MOV     R0,#LOW MaxFrmRate
014E E6                MOV     A,@R0
014F 547F              ANL     A,#07FH
0151 7800        R     MOV     R0,#LOW i
0153 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2069
0154 75F006            MOV     B,#06H
0157 A4                MUL     AB
0158 08                INC     R0
0159 26                ADD     A,@R0
015A F6                MOV     @R0,A
                                           ; SOURCE LINE # 2071
015B E4                CLR     A
015C 900000      E     MOV     DPTR,#pbFrmTable
015F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2072
0160 18                DEC     R0
0161 F6                MOV     @R0,A
0162         ?C0241:
0162 7800        R     MOV     R0,#LOW i
0164 E6                MOV     A,@R0
0165 FF                MOV     R7,A
0166 C3                CLR     C
0167 9406              SUBB    A,#06H
0169 502C              JNC     ?C0242
                                           ; SOURCE LINE # 2073
016B 08                INC     R0
016C E6                MOV     A,@R0
016D 2F                ADD     A,R7
016E FF                MOV     R7,A
016F E4                CLR     A
0170 33                RLC     A
0171 FE                MOV     R6,A
0172 120000      R     LCALL   _GetTab
0175 7800        R     MOV     R0,#LOW ResIdx
0177 EF                MOV     A,R7
0178 F6                MOV     @R0,A
                                           ; SOURCE LINE # 2074
0179 601C              JZ      ?C0242
                                           ; SOURCE LINE # 2075
017B E6                MOV     A,@R0
017C 14                DEC     A
017D FF                MOV     R7,A
017E 7800        R     MOV     R0,#LOW i
0180 E6                MOV     A,@R0
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 101 

0181 2400        E     ADD     A,#LOW pbFrmTable+01H
0183 F582              MOV     DPL,A
0185 E4                CLR     A
0186 3400        E     ADDC    A,#HIGH pbFrmTable+01H
0188 F583              MOV     DPH,A
018A EF                MOV     A,R7
018B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2076
018C 900000      E     MOV     DPTR,#pbFrmTable
018F E0                MOVX    A,@DPTR
0190 04                INC     A
0191 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2077
                                           ; SOURCE LINE # 2078
                                           ; SOURCE LINE # 2079
                                           ; SOURCE LINE # 2080
0192         ?C0243:
0192 7800        R     MOV     R0,#LOW i
0194 06                INC     @R0
0195 80CB              SJMP    ?C0241
0197         ?C0242:
                                           ; SOURCE LINE # 2081
0197 900000      E     MOV     DPTR,#pbFrmTable+01H
019A E0                MOVX    A,@DPTR
019B 7800        R     MOV     R0,#LOW MaxFrmRate
019D F6                MOV     @R0,A
                                           ; SOURCE LINE # 2082
019E 8032              SJMP    ?C0246
01A0         ?C0240:
                                           ; SOURCE LINE # 2083
                                           ; SOURCE LINE # 2084
01A0 7800        R     MOV     R0,#LOW MaxFrmRate
01A2 E6                MOV     A,@R0
01A3 FF                MOV     R7,A
01A4 D3                SETB    C
01A5 9400              SUBB    A,#00H
01A7 400B              JC      ?C0247
                                           ; SOURCE LINE # 2085
01A9 EF                MOV     A,R7
01AA D3                SETB    C
01AB 941E              SUBB    A,#01EH
01AD 4002              JC      ?C0248
                                           ; SOURCE LINE # 2086
01AF 761E              MOV     @R0,#01EH
01B1         ?C0248:
                                           ; SOURCE LINE # 2087
01B1 7800        R     MOV     R0,#LOW MaxFrmRate
01B3 16                DEC     @R0
                                           ; SOURCE LINE # 2088
01B4         ?C0247:
                                           ; SOURCE LINE # 2090
01B4 7800        R     MOV     R0,#LOW MaxFrmRate
01B6 E6                MOV     A,@R0
01B7 75F007            MOV     B,#07H
01BA A4                MUL     AB
01BB 2400        R     ADD     A,#LOW Interval_Idx_Tab
01BD F9                MOV     R1,A
01BE 7400        R     MOV     A,#HIGH Interval_Idx_Tab
01C0 35F0              ADDC    A,B
01C2 FA                MOV     R2,A
01C3 7BFF              MOV     R3,#0FFH
01C5 7800        E     MOV     R0,#LOW pbFrmTable
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 102 

01C7 7C00        E     MOV     R4,#HIGH pbFrmTable
01C9 7D01              MOV     R5,#01H
01CB 7E00              MOV     R6,#00H
01CD 7F07              MOV     R7,#07H
01CF 120000      E     LCALL   ?C?COPY
                                           ; SOURCE LINE # 2091
01D2         ?C0246:
                                           ; SOURCE LINE # 2093
01D2 7800        R     MOV     R0,#LOW wTmpAddr
01D4 E6                MOV     A,@R0
01D5 F500        E     MOV     wTabAddr,A
01D7 08                INC     R0
01D8 E6                MOV     A,@R0
01D9 F500        E     MOV     wTabAddr+01H,A
                                           ; SOURCE LINE # 2094
01DB 7800        R     MOV     R0,#LOW MaxFrmRate
01DD E6                MOV     A,@R0
01DE FF                MOV     R7,A
                                           ; SOURCE LINE # 2095
01DF         ?C0249:
01DF 22                RET     
             ; FUNCTION _CaculateFrmRateV2 (END)

             ; FUNCTION _GetFPSTableIndex (BEGIN)
                                           ; SOURCE LINE # 2154
;---- Variable 'bIndex' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2155
                                           ; SOURCE LINE # 2156
0000 EF                MOV     A,R7
0001 D3                SETB    C
0002 943B              SUBB    A,#03BH
0004 400B              JC      ?C0250
                                           ; SOURCE LINE # 2157
0006 EF                MOV     A,R7
0007 24BB              ADD     A,#0BBH
0009 75F00A            MOV     B,#0AH
000C 84                DIV     AB
000D 243C              ADD     A,#03CH
000F FF                MOV     R7,A
0010 22                RET     
0011         ?C0250:
                                           ; SOURCE LINE # 2159
                                           ; SOURCE LINE # 2161
0011         ?C0251:
0011 22                RET     
             ; FUNCTION _GetFPSTableIndex (END)

             ; FUNCTION L?0326 (BEGIN)
0000 7800        R     MOV     R0,#LOW ResIdx
0002         L?0327:
0002 E6                MOV     A,@R0
0003 FF                MOV     R7,A
0004 7D01              MOV     R5,#01H
             ; FUNCTION _GetExResTable (BEGIN)
                                           ; SOURCE LINE # 2163
;---- Variable 'wTemp' assigned to Register 'R2/R3' ----
;---- Variable 'iResIdx' assigned to Register 'R7' ----
;---- Variable 'iMode' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 2164
                                           ; SOURCE LINE # 2170
;---- Variable 'ResIdx' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2171
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 103 

;---- Variable 'Mode' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 2172
0006 200027      E     JB      xExResTable,?C0253
                                           ; SOURCE LINE # 2173
0009 EF                MOV     A,R7
000A BD010D            CJNE    R5,#01H,?C0254
                                           ; SOURCE LINE # 2174
000D 25E0              ADD     A,ACC
000F 25E0              ADD     A,ACC
0011 2400        E     ADD     A,#LOW Res_Table
0013 F582              MOV     DPL,A
0015 E4                CLR     A
0016 3400        E     ADDC    A,#HIGH Res_Table
                                           ; SOURCE LINE # 2175
0018 800B              SJMP    ?C0320
001A         ?C0254:
                                           ; SOURCE LINE # 2176
001A 25E0              ADD     A,ACC
001C 25E0              ADD     A,ACC
001E 2400        E     ADD     A,#LOW Res_Table+02H
0020 F582              MOV     DPL,A
0022 E4                CLR     A
0023 3400        E     ADDC    A,#HIGH Res_Table+02H
0025         ?C0320:
0025 F583              MOV     DPH,A
0027 E4                CLR     A
0028 93                MOVC    A,@A+DPTR
0029 FA                MOV     R2,A
002A 7401              MOV     A,#01H
002C 93                MOVC    A,@A+DPTR
002D FB                MOV     R3,A
                                           ; SOURCE LINE # 2177
                                           ; SOURCE LINE # 2178
002E 8034              SJMP    ?C0256
0030         ?C0253:
                                           ; SOURCE LINE # 2179
0030 7800        R     MOV     R0,#LOW pResTable
0032 7600        E     MOV     @R0,#HIGH pbResTable
0034 08                INC     R0
0035 7600        E     MOV     @R0,#LOW pbResTable
                                           ; SOURCE LINE # 2180
0037 BD0112            CJNE    R5,#01H,?C0257
                                           ; SOURCE LINE # 2181
003A 18                DEC     R0
003B E6                MOV     A,@R0
003C FC                MOV     R4,A
003D 08                INC     R0
003E E6                MOV     A,@R0
003F F582              MOV     DPL,A
0041 8C83              MOV     DPH,R4
0043 75F004            MOV     B,#04H
0046 EF                MOV     A,R7
0047 120000      E     LCALL   ?C?OFFXADD
                                           ; SOURCE LINE # 2182
004A 8013              SJMP    ?C0321
004C         ?C0257:
                                           ; SOURCE LINE # 2183
004C 7800        R     MOV     R0,#LOW pResTable
004E E6                MOV     A,@R0
004F FC                MOV     R4,A
0050 08                INC     R0
0051 E6                MOV     A,@R0
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 104 

0052 F582              MOV     DPL,A
0054 8C83              MOV     DPH,R4
0056 75F004            MOV     B,#04H
0059 EF                MOV     A,R7
005A 120000      E     LCALL   ?C?OFFXADD
005D A3                INC     DPTR
005E A3                INC     DPTR
005F         ?C0321:
005F E0                MOVX    A,@DPTR
0060 FA                MOV     R2,A
0061 A3                INC     DPTR
0062 E0                MOVX    A,@DPTR
0063 FB                MOV     R3,A
                                           ; SOURCE LINE # 2184
                                           ; SOURCE LINE # 2185
0064         ?C0256:
                                           ; SOURCE LINE # 2186
0064 AF03              MOV     R7,AR3
0066 AE02              MOV     R6,AR2
                                           ; SOURCE LINE # 2187
0068         ?C0259:
0068 22                RET     
             ; FUNCTION _GetExResTable (END)

             ; FUNCTION LoadDefaultSetting (BEGIN)
                                           ; SOURCE LINE # 2188
                                           ; SOURCE LINE # 2189
                                           ; SOURCE LINE # 2192
0000 300004      E     JNB     xHighSpdMode,?C0260
                                           ; SOURCE LINE # 2193
0003 7F06              MOV     R7,#06H
                                           ; SOURCE LINE # 2194
0005 8002              SJMP    ?C0322
0007         ?C0260:
                                           ; SOURCE LINE # 2195
0007 7F1A              MOV     R7,#01AH
0009         ?C0322:
0009 120000      R     LCALL   _SetPtrTabEx
                                           ; SOURCE LINE # 2196
000C         ?C0261:
                                           ; SOURCE LINE # 2197
000C 7F0E              MOV     R7,#0EH
000E 7E00              MOV     R6,#00H
0010 120000      R     LCALL   _GetTab
;---- Variable 'DescData' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2198
0013 EF                MOV     A,R7
0014 C3                CLR     C
0015 9403              SUBB    A,#03H
0017 400E              JC      ?C0262
                                           ; SOURCE LINE # 2199
0019 7F11              MOV     R7,#011H
001B 7E00              MOV     R6,#00H
001D 120000      R     LCALL   _GetTab
                                           ; SOURCE LINE # 2200
0020 EF                MOV     A,R7
0021 30E203            JNB     ACC.2,?C0262
                                           ; SOURCE LINE # 2201
0024 D200        E     SETB    xSupportPrivacy
0026 22                RET     
                                           ; SOURCE LINE # 2204
                                           ; SOURCE LINE # 2205
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 105 

0027         ?C0262:
                                           ; SOURCE LINE # 2206
0027 C200        E     CLR     xSupportPrivacy
                                           ; SOURCE LINE # 2207
0029         ?C0264:
0029 22                RET     
             ; FUNCTION LoadDefaultSetting (END)

             ; FUNCTION _AddDesc (BEGIN)
                                           ; SOURCE LINE # 2214
0000 8C00        R     MOV     wDescAddr,R4
0002 8D00        R     MOV     wDescAddr+01H,R5
;---- Variable 'FollowID' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 2215
                                           ; SOURCE LINE # 2216
;---- Variable 'i' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 2217
0004 900000      E     MOV     DPTR,#pCustomizeDesc
0007 E0                MOVX    A,@DPTR
0008 FC                MOV     R4,A
0009 A3                INC     DPTR
000A E0                MOVX    A,@DPTR
000B FD                MOV     R5,A
000C 4C                ORL     A,R4
000D 7003              JNZ     $ + 5H
000F 020000      R     LJMP    ?C0266
                                           ; SOURCE LINE # 2219
0012         ?C0265:
                                           ; SOURCE LINE # 2220
0012 8D82              MOV     DPL,R5
0014 8C83              MOV     DPH,R4
0016 E0                MOVX    A,@DPTR
0017 FE                MOV     R6,A
                                           ; SOURCE LINE # 2221
0018 0E                INC     R6
                                           ; SOURCE LINE # 2222
0019 EE                MOV     A,R6
001A D3                SETB    C
001B 9404              SUBB    A,#04H
001D 4003              JC      $ + 5H
001F 020000      R     LJMP    ?C0266
                                           ; SOURCE LINE # 2223
0022 900000      E     MOV     DPTR,#pCustomizeDesc
0025 E0                MOVX    A,@DPTR
0026 FC                MOV     R4,A
0027 A3                INC     DPTR
0028 E0                MOVX    A,@DPTR
0029 F582              MOV     DPL,A
002B 8C83              MOV     DPH,R4
002D EE                MOV     A,R6
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2224
002F EF                MOV     A,R7
0030 6409              XRL     A,#09H
0032 6011              JZ      ?C0269
0034 EF                MOV     A,R7
0035 6401              XRL     A,#01H
0037 600C              JZ      ?C0269
0039 EF                MOV     A,R7
003A C3                CLR     C
003B 9437              SUBB    A,#037H
003D 401C              JC      ?C0268
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 106 

003F EF                MOV     A,R7
0040 D3                SETB    C
0041 943A              SUBB    A,#03AH
0043 5016              JNC     ?C0268
0045         ?C0269:
                                           ; SOURCE LINE # 2225
0045 850082      R     MOV     DPL,wDescAddr+01H
0048 850083      R     MOV     DPH,wDescAddr
004B E4                CLR     A
004C 93                MOVC    A,@A+DPTR
004D FD                MOV     R5,A
004E 900000      E     MOV     DPTR,#pCustomizeDesc
0051 E0                MOVX    A,@DPTR
0052 FA                MOV     R2,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 F582              MOV     DPL,A
0057 8A83              MOV     DPH,R2
                                           ; SOURCE LINE # 2226
0059 804B              SJMP    ?C0324
005B         ?C0268:
005B EF                MOV     A,R7
005C 646A              XRL     A,#06AH
005E 6011              JZ      ?C0272
0060 EF                MOV     A,R7
0061 6402              XRL     A,#02H
0063 600C              JZ      ?C0272
0065 EF                MOV     A,R7
0066 C3                CLR     C
0067 943B              SUBB    A,#03BH
0069 401D              JC      ?C0271
006B EF                MOV     A,R7
006C D3                SETB    C
006D 943E              SUBB    A,#03EH
006F 5017              JNC     ?C0271
0071         ?C0272:
                                           ; SOURCE LINE # 2227
0071 850082      R     MOV     DPL,wDescAddr+01H
0074 850083      R     MOV     DPH,wDescAddr
0077 E4                CLR     A
0078 93                MOVC    A,@A+DPTR
0079 FD                MOV     R5,A
007A 900000      E     MOV     DPTR,#pCustomizeDesc
007D E0                MOVX    A,@DPTR
007E FA                MOV     R2,A
007F A3                INC     DPTR
0080 E0                MOVX    A,@DPTR
0081 F582              MOV     DPL,A
0083 8A83              MOV     DPH,R2
0085 A3                INC     DPTR
0086         ?C0323:
                                           ; SOURCE LINE # 2228
0086 801E              SJMP    ?C0324
0088         ?C0271:
                                           ; SOURCE LINE # 2229
0088 850082      R     MOV     DPL,wDescAddr+01H
008B 850083      R     MOV     DPH,wDescAddr
008E E4                CLR     A
008F 93                MOVC    A,@A+DPTR
0090 FD                MOV     R5,A
0091 900000      E     MOV     DPTR,#pCustomizeDesc
0094 E0                MOVX    A,@DPTR
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 107 

0095 FA                MOV     R2,A
0096 A3                INC     DPTR
0097 E0                MOVX    A,@DPTR
0098 FB                MOV     R3,A
0099 F582              MOV     DPL,A
009B 8A83              MOV     DPH,R2
009D A3                INC     DPTR
009E E0                MOVX    A,@DPTR
009F 2D                ADD     A,R5
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2230
00A1 8B82              MOV     DPL,R3
00A3 8A83              MOV     DPH,R2
00A5 A3                INC     DPTR
00A6         ?C0324:
00A6 A3                INC     DPTR
00A7 E0                MOVX    A,@DPTR
00A8 2D                ADD     A,R5
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2231
00AA         ?C0270:
                                           ; SOURCE LINE # 2232
00AA 900000      E     MOV     DPTR,#pCustomizeDesc
00AD E0                MOVX    A,@DPTR
00AE FC                MOV     R4,A
00AF A3                INC     DPTR
00B0 E0                MOVX    A,@DPTR
00B1 FD                MOV     R5,A
00B2 F582              MOV     DPL,A
00B4 8C83              MOV     DPH,R4
00B6 75F004            MOV     B,#04H
00B9 EE                MOV     A,R6
00BA 120000      E     LCALL   ?C?OFFXADD
00BD E582              MOV     A,DPL
00BF 24FF              ADD     A,#0FFH
00C1 F582              MOV     DPL,A
00C3 E583              MOV     A,DPH
00C5 34FF              ADDC    A,#0FFH
00C7 F583              MOV     DPH,A
00C9 EF                MOV     A,R7
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2233
00CB 8D82              MOV     DPL,R5
00CD 8C83              MOV     DPH,R4
00CF 75F004            MOV     B,#04H
00D2 EE                MOV     A,R6
00D3 120000      E     LCALL   ?C?OFFXADD
00D6 E500        R     MOV     A,wDescAddr
00D8 F0                MOVX    @DPTR,A
00D9 A3                INC     DPTR
00DA E500        R     MOV     A,wDescAddr+01H
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2234
00DD 900000      E     MOV     DPTR,#pCustomizeDesc
00E0 E0                MOVX    A,@DPTR
00E1 FC                MOV     R4,A
00E2 A3                INC     DPTR
00E3 E0                MOVX    A,@DPTR
00E4 F582              MOV     DPL,A
00E6 8C83              MOV     DPH,R4
00E8 75F004            MOV     B,#04H
00EB EE                MOV     A,R6
C51 COMPILER V7.06   SETINTF                                                               07/22/2020 17:08:20 PAGE 108 

00EC 120000      E     LCALL   ?C?OFFXADD
00EF A3                INC     DPTR
00F0 A3                INC     DPTR
00F1 E4                CLR     A
00F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2235
                                           ; SOURCE LINE # 2236
00F3         ?C0266:
00F3 22                RET     
             ; FUNCTION _AddDesc (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5358    ----
   CONSTANT SIZE    =    446    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14      29
   IDATA SIZE       =      5      43
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
